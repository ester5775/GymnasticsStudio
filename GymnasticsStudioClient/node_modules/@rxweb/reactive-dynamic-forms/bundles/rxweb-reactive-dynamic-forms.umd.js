(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@rxweb/reactive-form-validators'), require('@angular/core'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('@rxweb/reactive-dynamic-forms', ['exports', '@rxweb/reactive-form-validators', '@angular/core', '@angular/common'], factory) :
    (global = global || self, factory((global.rxweb = global.rxweb || {}, global.rxweb['reactive-dynamic-forms'] = {}), global['@rxweb/reactive-form-validators'], global.ng.core, global.ng.common));
}(this, function (exports, reactiveFormValidators, core, common) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }

    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
    }

    function __values(o) {
        var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
        if (m) return m.call(o);
        return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
    }

    function isNotMatched(jsonObject, compareObject) {
        var isModified = false;
        for (var columnName in compareObject) {
            if (Array.isArray(jsonObject[columnName])) {
                for (var i = 0; i < jsonObject[columnName].length; i++) {
                    isModified = isNotMatched(jsonObject[columnName][i], compareObject[columnName][i]);
                }
            }
            else if (typeof jsonObject[columnName] == "object")
                isModified = isNotMatched(jsonObject[columnName], compareObject[columnName]);
            else
                isModified = !(jsonObject[columnName] == compareObject[columnName]);
            if (isModified)
                break;
        }
        return isModified;
    }

    var ValueChangeNotification = /** @class */ (function () {
        function ValueChangeNotification() {
            this.attributeChangeSubscriptions = new Array();
        }
        ValueChangeNotification.prototype.onPropValueChanged = function (controlId, subscription, func) {
            this.attributeChangeSubscriptions.push({ controlId: controlId, names: subscription.names, props: subscription.props, func: func });
        };
        ValueChangeNotification.prototype.notifyValueChanged = function (name, value, oldValue, isProps) {
            if (isProps === void 0) { isProps = false; }
            if ((!isProps && this.isNotEqual(oldValue, value)) && this.onPropValueChanged) {
                var subscriptions = this.attributeChangeSubscriptions.filter(function (t) { return t.names.indexOf(name) != -1; });
                subscriptions.forEach(function (subscribe) {
                    if (subscribe.props && subscribe.props[name])
                        subscribe.func(subscribe.props[name]);
                });
            }
        };
        ValueChangeNotification.prototype.isNotEqual = function (leftValue, rightValue) {
            if (Array.isArray(leftValue) && Array.isArray(rightValue)) {
                var isNotEqual = leftValue.length != rightValue.length;
                if (!isNotEqual)
                    for (var i = 0; i < leftValue.length; i++) {
                        isNotEqual = isNotMatched(leftValue[i], rightValue[i]);
                        if (isNotEqual)
                            break;
                    }
                return isNotEqual;
            }
            return leftValue != rightValue;
        };
        ValueChangeNotification.prototype.destroy = function (controlId) {
            for (var i = 0; i < this.attributeChangeSubscriptions.length; i++) {
                if (this.attributeChangeSubscriptions[i].controlId == controlId) {
                    this.attributeChangeSubscriptions.splice(i, 1);
                    break;
                }
            }
        };
        return ValueChangeNotification;
    }());

    var FILTER = "filter";
    var FUNCTION = "function";
    var ERRORS = "errors";
    var PropDescriptor = /** @class */ (function (_super) {
        __extends(PropDescriptor, _super);
        function PropDescriptor() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        PropDescriptor.prototype.checkFilterFunction = function () {
            var descriptor = Object.getOwnPropertyDescriptor(Object.getPrototypeOf(this), FILTER);
            this.isDefinedFilter = (descriptor && !descriptor.get && !descriptor.set && typeof this[FILTER] == FUNCTION);
        };
        PropDescriptor.prototype.overrideProp = function (props) {
            var _this = this;
            Object.keys(props).forEach(function (t) {
                Object.defineProperty(_this, t, props[t]);
            });
        };
        PropDescriptor.prototype.defineProp = function (propName) {
            var _this = this;
            var value = this.props[propName];
            var oldValue = null;
            Object.defineProperty(this.props, propName, {
                get: function () { return value; },
                set: function (v) {
                    value = v;
                    _this.notifyValueChanged("props." + propName, value, oldValue, false);
                    oldValue = value;
                }
            });
        };
        PropDescriptor.prototype.overrideProps = function () {
            var _this = this;
            ["disabled", "label", "placeholder", "hide", "description", "focus", "readonly", "class", "source"].forEach(function (t) {
                var descriptor = _this.getDescriptor(t);
                var value = null;
                var oldValue = null;
                Object.defineProperty(_this, t, {
                    get: function () { return descriptor ? descriptor.get.call(_this) : value; },
                    set: function (v) {
                        value = v;
                        if (descriptor && descriptor.set)
                            descriptor.set.call(_this, v);
                        _super.prototype.notifyValueChanged.call(_this, t, value, oldValue);
                        oldValue = v;
                    }
                });
            });
        };
        PropDescriptor.prototype.overrideErrorsProp = function (formControl) {
            var _this = this;
            var value = formControl.errors;
            var errorMessage = '';
            var oldValue = formControl.errorMessage;
            Object.defineProperty(formControl, ERRORS, {
                get: function () { return value; },
                set: function (v) {
                    value = v;
                    errorMessage = formControl.errorMessage;
                    _this.notifyValueChanged("errorMessage", errorMessage || "", oldValue);
                    oldValue = formControl.errorMessage;
                }
            });
            formControl[ERRORS] = formControl[ERRORS];
        };
        PropDescriptor.prototype.getDescriptor = function (propName) {
            var descriptor = Object.getOwnPropertyDescriptor(Object.getPrototypeOf(this), propName);
            if (!descriptor)
                descriptor = Object.getOwnPropertyDescriptor(this, propName);
            return descriptor;
        };
        return PropDescriptor;
    }(ValueChangeNotification));

    var FILE = 'file';
    var RANGE = 'range';
    var CHECKBOX = 'checkbox';
    var BLANK = "";
    var PROP = "prop";
    var ATTR = "attr";
    var EVENTS = "events";
    var FOCUS = "focus";
    var READONLY = "readonly";
    var CLASS = "class";
    var STYLE = "style";
    var RADIO = "radio";
    var STRING = "string";
    var FUNCTION$1 = "function";
    var SQUARE = "{";
    var COLON = ":";
    var CLICK = "click";
    var INPUT = "input";
    var TEXT = "text";
    var CONTROL = 'control';
    var BLUR = 'blur';
    var SELECT = "select";
    var TEXTAREA = "textarea";
    var BOOLEAN = "boolean";
    var NONE = "none";
    var DISPLAY = "display";
    var ADDITIONAL_CLASS = "additional-class";
    var SELECT_MULTIPLE = "select-multiple";
    var SOURCE = "source";
    var ADVANCE = "advance";
    var SQUARE_CONTROL = "[control]";
    var SQUARE_LABEL = "[label]";
    var SQUARE_SMALL = "[small]";
    var SQUARE_ERROR = "[error]";
    var FILTER$1 = "filter";
    var INPUT_TEXT = "input-text";
    var PREPEND_LEFT = "prepend-left";
    var PREPEND_RIGHT = "prepend-right";
    var PREPEND_BOTH = "prepend-both";
    var CONDITIONAL_VALIDATOR = "conditionalValidator";
    var INLINE = "inline";

    var Linq = /** @class */ (function () {
        function Linq() {
        }
        Linq.extractArguments = function (splitTexts) {
            var expressionArguments = ["this"];
            if (splitTexts && splitTexts[0])
                splitTexts[0].split(",").forEach(function (t) { return expressionArguments.push(t.trim().replace("(", "").replace(")", "")); });
            return expressionArguments;
        };
        Linq.dynamicConfigParser = function (expressionString) {
            var controlNames = [];
            var expressionArguments = Linq.extractArguments(expressionString.match(/\(([^)]+)\)/g));
            var splitString = expressionString.replace(new RegExp(/\r?\n|\r|;/g), ' ').replace(/["%()\{}=\\?´`'#<>|,;:+-]+/g, " ").split(/ /g);
            if (expressionArguments.length > 3)
                expressionArguments.splice(expressionArguments.length - 1, 1);
            splitString.forEach(function (t, i) {
                if (t) {
                    if (t.includes("controlsConfig.")) {
                        var splitText = t.split("controlsConfig.");
                        if (splitText.length > 1)
                            controlNames.push(splitText[1].split(".")[0]);
                    }
                    else if (t.includes("controlsConfig["))
                        controlNames.push(splitString[i + 1]);
                }
            });
            return controlNames;
        };
        return Linq;
    }());

    var ControlState = /** @class */ (function () {
        function ControlState() {
        }
        ControlState.controlId = 1;
        ControlState.controls = {};
        return ControlState;
    }());
    var NotificationState = /** @class */ (function () {
        function NotificationState() {
        }
        NotificationState.notificationId = 1;
        NotificationState.notifications = {};
        return NotificationState;
    }());

    var BaseFormControlConfig = /** @class */ (function (_super) {
        __extends(BaseFormControlConfig, _super);
        function BaseFormControlConfig(configs, notificationId) {
            var _this = _super.call(this) || this;
            _this.configs = configs;
            _this.notificationId = notificationId;
            _this._actionResult = {
                label: undefined,
                img: undefined,
                placeholder: undefined,
                source: [],
                filter: [],
                hide: false,
                description: undefined,
                disabled: false,
                focus: false,
                readonly: false,
                class: [],
                prependText: ''
            };
            return _this;
        }
        BaseFormControlConfig.prototype.setNotification = function () {
            if (NotificationState.notifications[this.notificationId])
                if (!NotificationState.notifications[this.notificationId][this.config.name])
                    NotificationState.notifications[this.notificationId][this.config.name] =
                        this.controlNotifications = { filter: [], disabled: [], label: [], description: [], hide: [], placeholder: [], readonly: [], focus: [], class: [] };
                else
                    this.controlNotifications = NotificationState.notifications[this.notificationId][this.config.name];
            this.complete();
        };
        BaseFormControlConfig.prototype.complete = function () {
            var _this = this;
            var _loop_1 = function (action) {
                var descriptor = this_1.getDescriptor(action);
                if ((descriptor && descriptor.get) || this_1.isDefinedFilter) {
                    var stringFunction = this_1.isDefinedFilter ? String(this_1[FILTER$1]) : String(descriptor.get);
                    var columnNames = Linq.dynamicConfigParser(stringFunction);
                    columnNames.forEach(function (column) {
                        if (!NotificationState.notifications[_this.notificationId][column])
                            NotificationState.notifications[_this.notificationId][column] = { filter: [], disabled: [], label: [], description: [], hide: [], placeholder: [], readonly: [], focus: [], class: [] };
                        var controlNotifications = NotificationState.notifications[_this.notificationId][column];
                        controlNotifications[action].push(_this.config.name);
                    });
                }
            };
            var this_1 = this;
            for (var action in this.controlNotifications) {
                _loop_1(action);
            }
            this.overrideProps();
            this.updateActionValue();
        };
        BaseFormControlConfig.prototype.refresh = function (actionName) {
            var _this = this;
            for (var columnName in this.controlNotifications) {
                if (this.controlNotifications[columnName].length > 0)
                    this.controlNotifications[columnName].forEach(function (x) {
                        if (columnName == FILTER$1)
                            _this.configs[x].value = null;
                        if (x != _this.config.name)
                            _this.configs[x].refresh(columnName);
                        else
                            _this.setActionValue(columnName);
                    });
            }
            if (actionName)
                this.setActionValue(actionName);
        };
        BaseFormControlConfig.prototype.setActionValue = function (actionName) {
            if (actionName == FILTER$1 && this.isDefinedFilter) {
                this[FILTER$1].call(this);
            }
            else
                this[actionName == FILTER$1 ? SOURCE : actionName] = this[actionName];
        };
        BaseFormControlConfig.prototype.updateActionValue = function () {
            var _this = this;
            ["disabled", "label", "img", "placeholder", "hide", "description", "focus", "readonly", "class", "filter", "source"].forEach(function (key) {
                switch (key) {
                    case FILTER$1:
                        if (_this.isDefinedFilter && key == FILTER$1)
                            _this[FILTER$1]();
                        if (_this.config.filter)
                            _this[FILTER$1] = _this.config.filter;
                        break;
                    case SOURCE:
                        if (_this.config[key])
                            _this[key] = _this.config[key];
                        if (key == SOURCE && !_this.source)
                            _this[key] = [];
                        break;
                    default:
                        if (_this.config.ui && _this.config.ui[key])
                            _this[key] = _this.config.ui[key];
                        else
                            _this[key == FILTER$1 ? SOURCE : key] = _this._actionResult[key];
                        break;
                }
            });
        };
        return BaseFormControlConfig;
    }(PropDescriptor));

    var dynamicContainer = new (/** @class */ (function () {
        function class_1() {
            this.components = [];
            this.overrideProps = {};
        }
        class_1.prototype.registerComponent = function (name, target) {
            var componentContainer = this.components.filter(function (component) { return component.instance == target; })[0];
            if (!componentContainer)
                this.components.push({ instance: target, name: name });
        };
        class_1.prototype.registerOverrideProp = function (props) {
            var _this = this;
            if (props)
                Object.keys(props).forEach(function (t) { return _this.overrideProps[t] = props[t]; });
        };
        class_1.prototype.getOverrideProp = function (name) {
            return this.overrideProps[name];
        };
        class_1.prototype.getComponent = function (name) {
            return this.components.filter(function (component) { return component.name == name; })[0];
        };
        return class_1;
    }()))();

    var FormControlConfig = /** @class */ (function (_super) {
        __extends(FormControlConfig, _super);
        function FormControlConfig(fieldConfig, controlsConfig, notificationId) {
            var _this = _super.call(this, controlsConfig, notificationId) || this;
            _this.controlsConfig = controlsConfig;
            _this.overrides = {};
            _this.config = fieldConfig;
            _this.overrideProperty();
            _this.value = fieldConfig.value;
            _super.prototype.checkFilterFunction.call(_this);
            _this.props = _this.config.props || Object.create({});
            _this.setNotification();
            return _this;
        }
        FormControlConfig.prototype.overrideProperty = function () {
            var _this = this;
            if (this.config.overrideProps) {
                this.config.overrideProps.forEach(function (t) {
                    var propInfo = dynamicContainer.getOverrideProp(t);
                    _this.overrideProp(propInfo);
                });
            }
        };
        Object.defineProperty(FormControlConfig.prototype, "formControl", {
            get: function () {
                return this._formControl;
            },
            set: function (value) {
                var _this = this;
                this._formControl = value;
                setTimeout(function () { return _this.overrideErrorsProp(_this._formControl); }, 10);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FormControlConfig.prototype, "errorMessage", {
            get: function () {
                return this.formControl.errorMessage;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FormControlConfig.prototype, "prependText", {
            get: function () {
                return this.config.ui ? this.config.ui.prependText : '';
            },
            enumerable: true,
            configurable: true
        });
        return FormControlConfig;
    }(BaseFormControlConfig));
    var ControlConfig = /** @class */ (function (_super) {
        __extends(ControlConfig, _super);
        function ControlConfig(fieldConfig, controlsConfig) {
            return _super.call(this, fieldConfig, controlsConfig, 0) || this;
        }
        return ControlConfig;
    }(FormControlConfig));

    function getInstance(model, objectArguments) {
        var classInstance = Object.create(model.prototype);
        try {
            model.apply(classInstance, objectArguments);
        }
        catch (ex) {
            ///resolution of issue https://github.com/rxweb/rxweb/issues/188
            classInstance = Reflect.construct(model, objectArguments);
        }
        return classInstance;
    }

    var ApplicationUtil = /** @class */ (function () {
        function ApplicationUtil() {
        }
        ApplicationUtil.getRootFormGroup = function (control) {
            if (control.parent) {
                return this.getRootFormGroup(control.parent);
            }
            return control;
        };
        ApplicationUtil.isObject = function (value) {
            return Object.prototype.toString.call(value) === '[object Object]';
        };
        return ApplicationUtil;
    }());

    var ARRAY = "array";
    var RxDynamicFormBuilder = /** @class */ (function () {
        function RxDynamicFormBuilder() {
        }
        RxDynamicFormBuilder.prototype.formGroup = function (fields, dynamicFormConfig) {
            var _this = this;
            var notificationId = NotificationState.notificationId++;
            NotificationState.notifications[notificationId] = {};
            this.formConfiguration = dynamicFormConfig || {};
            var entityObject = {};
            var formFieldConfigs = new Array();
            var modelConfig = {};
            var formGroup = new reactiveFormValidators.RxFormGroup({}, entityObject, {}, undefined);
            fields.forEach(function (x, i) {
                if (x.type == ARRAY) {
                    _this.createFormArray(modelConfig, x, ApplicationUtil.getRootFormGroup(formGroup), entityObject, notificationId);
                }
                else {
                    var splitName = x.name.split('.');
                    var name_1 = x.name;
                    if (splitName.length > 1) {
                        if (!entityObject[splitName[0]]) {
                            entityObject[splitName[0]] = {};
                            formGroup.addControl(splitName[0], new reactiveFormValidators.RxFormGroup({}, entityObject[splitName[0]], {}, undefined));
                            formGroup = formGroup.controls[splitName[0]];
                        }
                        else if (formGroup.controls[splitName[0]] != undefined && formGroup.controls[splitName[0]] instanceof reactiveFormValidators.RxFormGroup)
                            formGroup = formGroup.controls[splitName[0]];
                        name_1 = splitName[1];
                    }
                    else
                        formGroup = ApplicationUtil.getRootFormGroup(formGroup);
                    var modelInstance = _this.getDynamicModelInstance(x, modelConfig, entityObject, name_1, notificationId);
                    formGroup.addControl(name_1, modelInstance.formControl);
                    formFieldConfigs.push(modelInstance);
                }
            });
            if (this.formConfiguration.additionalConfig)
                this.formConfiguration.additionalConfig.forEach(function (t) { return _this.getModelInstance(t, modelConfig, notificationId); });
            var rootFormGroup = ApplicationUtil.getRootFormGroup(formGroup);
            rootFormGroup["model"] = undefined;
            return {
                controlsConfig: modelConfig,
                formGroup: rootFormGroup
            };
        };
        RxDynamicFormBuilder.prototype.createFormArray = function (modelConfig, field, formGroup, entityObject, notificationId) {
            var _this = this;
            modelConfig[field.name] = [];
            entityObject[field.name] = [];
            var formArray = new reactiveFormValidators.RxFormArray(entityObject[field.name], []);
            if (field.controlConfigs) {
                if (field.rows)
                    field.rows.forEach(function (row) {
                        formArray.controls.push(_this.createDynamicFormGroup(field, modelConfig[field.name], _this.getRefObject(entityObject[field.name]), row, notificationId));
                    });
                if (field.minimumRepeatCount && field.minimumRepeatCount > 0) {
                    var countLeft = field.minimumRepeatCount - (formArray.controls.length);
                    for (var i = 0; i < countLeft; i++)
                        formArray.controls.push(this.createDynamicFormGroup(field, modelConfig[field.name], this.getRefObject(entityObject[field.name]), { fields: [] }, notificationId));
                }
                this.addTwoProp(modelConfig[field.name], field, entityObject[field.name], formArray, notificationId);
                formGroup.addControl(field.name, formArray);
            }
        };
        RxDynamicFormBuilder.prototype.getRefObject = function (entityObject) {
            var jObject = {};
            entityObject.push(jObject);
            return jObject;
        };
        RxDynamicFormBuilder.prototype.addTwoProp = function (modelConfig, x, entityObject, formArray, notificationId) {
            var _this = this;
            modelConfig.__proto__.addItem = function () {
                formArray.controls.push(_this.createDynamicFormGroup(x, modelConfig, _this.getRefObject(entityObject), { fields: [] }, notificationId));
            };
            modelConfig.__proto__.removeItem = function (index) {
                formArray.removeAt(index);
                modelConfig.splice(index, 1);
            };
        };
        RxDynamicFormBuilder.prototype.createDynamicFormGroup = function (x, modelConfig, entityObject, row, notificationId) {
            var _this = this;
            var nestedFormGroup = new reactiveFormValidators.RxFormGroup({}, entityObject, {}, undefined);
            var jObject = {};
            modelConfig.push(jObject);
            Object.keys(x.controlConfigs).forEach(function (key) {
                var field = row.fields.filter(function (x) { return x.name == key; })[0];
                var formControlConfig = __assign({}, x.controlConfigs[key], { name: key });
                if (field)
                    formControlConfig = __assign({}, formControlConfig, field);
                var modelInstance = _this.getDynamicModelInstance(formControlConfig, jObject, entityObject, key, notificationId);
                nestedFormGroup.addControl(key, modelInstance.formControl);
            });
            return nestedFormGroup;
        };
        RxDynamicFormBuilder.prototype.getModelInstance = function (x, modelConfig, notificationId) {
            var configModel = (x.modelName) && this.formConfiguration && this.formConfiguration.controlConfigModels ? this.formConfiguration.controlConfigModels.filter(function (y) { return y.modelName == x.modelName; })[0] : undefined;
            var modelArguments = [x, modelConfig, notificationId];
            var model = undefined;
            if (configModel) {
                model = configModel.model;
                if (configModel.arguments)
                    configModel.arguments.forEach(function (t) { return modelArguments.push(t); });
            }
            else
                model = FormControlConfig;
            var modelInstance = getInstance(model, modelArguments);
            modelConfig[x.name] = modelInstance;
            return modelInstance;
        };
        RxDynamicFormBuilder.prototype.getDynamicModelInstance = function (x, modelConfig, entityObject, name, notificationId) {
            var modelInstance = this.getModelInstance(x, modelConfig, notificationId);
            var validators = [];
            var asyncValidators = [];
            if (x.validators)
                this.validatorBindings(validators, x.validators);
            if (modelInstance.validator)
                validators.push(modelInstance.validator.bind(modelInstance));
            if (modelInstance.asyncValidator)
                asyncValidators.push(modelInstance.asyncValidator.bind(modelInstance));
            if (modelInstance)
                entityObject[x.name] = x.value;
            var baseObject = {};
            baseObject[x.name] = x.value;
            entityObject[x.name] = x.value;
            modelInstance.formControl = new reactiveFormValidators.RxFormControl(x.value, validators, asyncValidators, entityObject, baseObject, name, undefined);
            return modelInstance;
        };
        RxDynamicFormBuilder.prototype.validatorBindings = function (validations, validationConfig) {
            for (var column in reactiveFormValidators.RxwebValidators) {
                if (validationConfig[column]) {
                    validations.push(reactiveFormValidators.RxwebValidators[column](validationConfig[column]));
                }
            }
            return validations;
        };
        return RxDynamicFormBuilder;
    }());

    var commonAttributes = {
        placeholder: ':placeholder',
        readonly: ':readonly',
        class: ':class',
        name: '{config.name'
    };
    var commonEvents = {
        focus: ':focus',
        input: 'true',
        blur: 'blur'
    };
    var ɵ0 = function (item, index) {
        return ['div', ['input', [{
                        attr: __assign({ type: '{config.type' }, commonAttributes, { value: item[this.config.valuePropName || 'value'], checked: item[this.config.valuePropName || 'value'] == this.value, disabled: item.disabled ? item.disabled : ':disabled' }),
                        events: commonEvents,
                        overrideProp: (index == 0)
                    }],
                'label', [{ prop: { innerText: item[this.config.textPropName || 'text'] } }]]];
    };
    var checkBoxAndRadioDesign = ['div', [{ source: true }, {
                for: {
                    source: ɵ0
                }
            }
        ]];
    var configUiText = { innerText: ':props.text' };
    var classAttribute = { class: ':class', style: { display: ":hide" } };
    var ɵ1 = function (item) {
        return ['label', [{
                    attr: __assign({ type: '{config.type' }, commonAttributes, { value: item[this.config.valuePropName || 'value'] }),
                    events: commonEvents
                }],
            'label', [{ prop: { innerText: item[this.config.textPropName || 'text'] } }]];
    }, ɵ2 = function (item) {
        var _this = this;
        return ['option', [
                {
                    prop: { innerText: item[this.config.textPropName || 'text'] }, attr: {
                        value: item[this.config.valuePropName || 'value'],
                        selected: Array.isArray(this.value) ? this.value.filter(function (x) { return item[_this.config.valuePropName || 'value'] == x; })[0] != undefined : item[this.config.valuePropName || 'value'] == this.value,
                        disabled: item.disabled
                    }
                }
            ]];
    };
    var DYNAMIC_ELEMENT_DESIGN_TREE = {
        p: ['p', [{ prop: configUiText, attr: classAttribute }]],
        h1: ['h1', [{ prop: configUiText, attr: classAttribute }]],
        h2: ['h2', [{ prop: configUiText, attr: classAttribute }]],
        h3: ['h3', [{ prop: configUiText, attr: classAttribute }]],
        h4: ['h4', [{ prop: configUiText, attr: classAttribute }]],
        h5: ['h5', [{ prop: configUiText, attr: classAttribute }]],
        h6: ['h6', [{ prop: configUiText, attr: classAttribute }]],
        a: ['a', [{ attr: __assign({ href: '{config.href' }, classAttribute), prop: configUiText }]],
        hr: ['hr', [{ attr: commonAttributes }]],
        strong: ['strong', [{ prop: configUiText, attr: classAttribute }]],
        span: ['span', [{ prop: configUiText, attr: classAttribute }]],
        img: ['img', [{ prop: { src: ':img' }, attr: __assign({ style: { display: ":img" } }, classAttribute) }]],
        label: ['label', [{ prop: { innerText: ':label' }, attr: __assign({ style: { display: ":label" } }, classAttribute) }]],
        small: ['small', [{ prop: { innerText: ':description' }, attr: __assign({ style: { display: ":description" } }, classAttribute) }]],
        input: ['input', [{
                    attr: __assign({ type: '{config.type' }, commonAttributes, { disabled: ':disabled' }),
                    events: commonEvents,
                }]],
        error: ["span", [{ prop: { innerText: ':errorMessage' }, attr: __assign({ style: { display: ":errorMessage" } }, commonAttributes) }]],
        div: ['div', [{ attr: classAttribute }]],
        card: ['div', [{ attr: classAttribute }]],
        'card-header': ['div', [{ attr: classAttribute, prop: configUiText }]],
        'card-body': ['div', [{ attr: classAttribute }]],
        buttonGroup: ['div', [{
                    for: {
                        source: ɵ1
                    }
                }
            ]
        ],
        'prepend-left': ["div", [
                "div", [
                    "div", [{ prop: { innerText: '{config.ui.prependText.left' } }]
                ],
                '[input-text]'
            ]],
        'prepend-right': ["div", [
                '[input-text]',
                "div", [
                    "div", [{ prop: { innerText: '{config.ui.prependText.right' } }]
                ],
            ]],
        'prepend-both': ["div", [
                "div", [
                    "div", [{ prop: { innerText: '{config.ui.prependText.left' } }]
                ],
                '[input-text]',
                "div", [
                    "div", [{ prop: { innerText: '{config.ui.prependText.right' } }]
                ],
            ]],
        textarea: ['textarea', [{ attr: __assign({ rows: '{config.ui.rows', cols: '{config.ui.cols' }, commonAttributes), events: commonEvents }]],
        radio: checkBoxAndRadioDesign,
        'checkbox': checkBoxAndRadioDesign,
        select: ['select', [{
                    attr: {
                        multiple: '{config.multiselect',
                    },
                    events: commonEvents,
                    source: true
                },
                'option', [{ prop: { innerText: ":placeholder" }, attr: { value: '', style: { display: ":placeholder" } } }],
                {
                    for: {
                        source: ɵ2
                    }
                }
            ]],
        button: ['button', [{ attr: __assign({}, commonAttributes, { name: '{config.name', type: '{config.type' }), events: { click: '{config.events.click' }, prop: { innerText: ':props.text' } }]],
        alert: ['div', [{ attr: commonAttributes }]],
        viewMode: {
            basic: ['div', [{
                        attr: {
                            style: { display: ":hide" }
                        }
                    },
                    '[label]',
                    '[control]',
                    '[error]',
                    '[small]'
                ]],
            horizontal: ['div', [{
                        attr: {
                            style: { display: ":hide" }
                        }
                    },
                    '[label]',
                    'div', ['[control]', '[error]', '[small]']
                ]],
            inline: [],
            advance: ['div', [
                    'div', [{
                            attr: {
                                style: { display: ":hide" }
                            }
                        },
                        '[img]', '[label]', '[control]', '[error]', '[small]']
                ]]
        }
    };

    var BOOSTRAP_CLASS_CONFIG = {
        defaultControl: 'form-control',
        fileControl: 'form-control-file',
        readOnlyPlainText: 'form-control-plaintext',
        rangeControl: 'form-control-range',
        checkBoxAndRadioControl: 'form-check-input',
        checkboxAndRadioControlInline: 'form-check-inline',
        controlValid: 'is-valid',
        controlInvalid: 'is-invalid',
        validMessage: 'valid-feedback',
        invalidMessage: 'invalid-feedback',
    };
    var PREPEND_TEXT_CLASS_PATH = {
        class: ['input-group-prepend'],
        child: {
            0: { class: ['input-group-text'] }
        }
    };
    var INPUT_GROUP = ['input-group'];
    var BOOTSTRAP_DESIGN_CONFIG = {
        elementClassPath: {
            "prepend-left": {
                class: INPUT_GROUP,
                child: {
                    0: PREPEND_TEXT_CLASS_PATH
                }
            },
            "prepend-right": {
                class: INPUT_GROUP,
                child: {
                    1: PREPEND_TEXT_CLASS_PATH
                }
            },
            "prepend-both": {
                class: INPUT_GROUP,
                child: {
                    0: PREPEND_TEXT_CLASS_PATH,
                    2: PREPEND_TEXT_CLASS_PATH
                }
            },
            input: { class: [inputElementClassProvider, invalidClass], listenerProps: [":errorMessage"] },
            checkbox: {
                class: [], child: {
                    0: {
                        class: ['form-check', inLineRadioAndCheckbox],
                        child: { 0: { class: ['form-check-input'] }, 1: { class: ['form-check-label'] } }
                    }
                }
            },
            radio: {
                class: [], child: {
                    0: {
                        class: ['form-check', inLineRadioAndCheckbox],
                        child: { 0: { class: ['form-check-input'] }, 1: { class: ['form-check-label'] } }
                    }
                }
            },
            'error': { class: [function () { return !((this.formControl.validator || this.formControl.asyncValidator) && this.formControl.errorMessage) ? "" : BOOSTRAP_CLASS_CONFIG.invalidMessage; }], listenerProps: [":errorMessage"] },
            button: { class: ['btn'] },
            alert: { class: ['alert'] },
            card: { class: ['card'] },
            'card-header': { class: ['card-header'] },
            'card-body': { class: ['card-body'] },
            viewMode: {
                basic: { class: ['form-group'] },
                horizontal: {
                    class: ['form-group', 'row'],
                    child: {
                        0: { class: [function () { return this.config.ui && this.config.ui.viewMode && this.config.ui.viewMode.horizontal && this.config.ui.viewMode.horizontal.label ? this.config.ui.viewMode.horizontal.label : ''; }] },
                        1: {
                            class: [function () { return this.config.ui && this.config.ui.viewMode && this.config.ui.viewMode.horizontal && this.config.ui.viewMode.horizontal.div ? this.config.ui.viewMode.horizontal.div : ''; }],
                        }
                    }
                },
                inline: {
                    class: [], child: {}
                },
                advance: {
                    class: ['form-row', function () { return this.config && this.config.ui && this.config.ui.viewMode && this.config.ui.viewMode.advance && this.config.ui.viewMode.advance.root_div ? this.config.ui.viewMode.advance.root_div : ''; }],
                    child: {
                        0: {
                            class: ['form-group', function () { return this.config && this.config.ui && this.config.ui.viewMode && this.config.ui.viewMode.advance && this.config.ui.viewMode.advance.div ? this.config.ui.viewMode.advance.div : ''; }],
                            child: {
                                0: { class: [function () { return this.config && this.config.ui && this.config.ui.viewMode && this.config.ui.viewMode.advance && this.config.ui.viewMode.advance.label ? this.config.ui.viewMode.advance.label : ''; }] },
                                2: { class: [function () { return this.config && this.config.ui && this.config.ui.viewMode && this.config.ui.viewMode.advance && this.config.ui.viewMode.advance.error ? this.config.ui.viewMode.advance.error : ''; }] },
                                3: { class: [function () { return this.config.ui && this.config.ui.viewMode && this.config.ui.viewMode.advance && this.config.ui.viewMode.advance.small ? this.config.ui.viewMode.advance.small : ''; }] }
                            }
                        }
                    }
                }
            },
            small: { class: ['form-text'] },
            textarea: { class: [BOOSTRAP_CLASS_CONFIG.defaultControl, invalidClass], listenerProps: [":errorMessage"] },
            select: { class: [BOOSTRAP_CLASS_CONFIG.defaultControl, invalidClass], listenerProps: [":errorMessage"] }
        }
    };
    function inputElementClassProvider() {
        var elementClass = '';
        if (!this.readonly || (this.readonly && !this.isPlainTextMode))
            switch (this.config.type) {
                case FILE:
                    elementClass = BOOSTRAP_CLASS_CONFIG.fileControl;
                    break;
                case RANGE:
                    elementClass = BOOSTRAP_CLASS_CONFIG.rangeControl;
                    break;
                case RADIO:
                case CHECKBOX:
                    elementClass = BLANK;
                    break;
                default:
                    elementClass = BOOSTRAP_CLASS_CONFIG.defaultControl;
                    break;
            }
        else if (this.readonly && this.isPlainTextMode)
            elementClass = BOOSTRAP_CLASS_CONFIG.readOnlyPlainText;
        return elementClass;
    }
    function inLineRadioAndCheckbox() {
        return this.config && this.config.inline ? ['form-check-inline'] : [];
    }
    function invalidClass() {
        var invalidClass = ((this.formControl.validator || this.formControl.asyncValidator) && this.formControl.errorMessage) ? BOOSTRAP_CLASS_CONFIG.controlInvalid : '';
        return invalidClass;
    }

    function objectPropValue(key, valueObject) {
        var e_1, _a;
        var jObject = undefined;
        var splitTexts = key.split('.');
        try {
            for (var splitTexts_1 = __values(splitTexts), splitTexts_1_1 = splitTexts_1.next(); !splitTexts_1_1.done; splitTexts_1_1 = splitTexts_1.next()) {
                var column = splitTexts_1_1.value;
                if (!jObject)
                    jObject = valueObject;
                if (jObject)
                    jObject = jObject[column];
                else
                    break;
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (splitTexts_1_1 && !splitTexts_1_1.done && (_a = splitTexts_1.return)) _a.call(splitTexts_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return jObject;
    }

    var PROPS = ":props.";
    var GLOBAL_MATCH = "g";
    var DOT = ".";
    var BaseObjectAccessor = /** @class */ (function () {
        function BaseObjectAccessor(dynamicNodeConfig) {
            this.dynamicNodeConfig = dynamicNodeConfig;
            this.subscribeProps = {
                names: [], props: {}
            };
            this.controlConfig = this.dynamicNodeConfig.controlConfig;
        }
        BaseObjectAccessor.prototype.getPropName = function (text) {
            if (text[0] == COLON || (text[0] == SQUARE)) {
                return text.replace(new RegExp(COLON, GLOBAL_MATCH), BLANK).replace(new RegExp(SQUARE, GLOBAL_MATCH), BLANK);
            }
            return text;
        };
        BaseObjectAccessor.prototype.getValue = function (text) {
            if (typeof text == STRING && ((text[0] == COLON) || (text[0] == SQUARE))) {
                text = text.replace(new RegExp(COLON, GLOBAL_MATCH), BLANK).replace(new RegExp(SQUARE, GLOBAL_MATCH), BLANK);
                return objectPropValue(text, this.controlConfig);
            }
            return text;
        };
        BaseObjectAccessor.prototype.setPropSubscription = function (propName, type, attributeName, valuePropName, parentPropName) {
            if (valuePropName === void 0) { valuePropName = ''; }
            if (parentPropName === void 0) { parentPropName = ''; }
            if (propName.startsWith(PROPS))
                this.defineProp(propName);
            var prop = this.getPropName(propName);
            if (!this.subscribeProps.props[prop])
                this.subscribeProps.props[prop] = {};
            if (!this.subscribeProps.props[prop][type])
                this.subscribeProps.props[prop][type] = {};
            if (parentPropName) {
                this.subscribeProps.props[prop][type][parentPropName] = {};
                this.subscribeProps.props[prop][type][parentPropName][attributeName] = (valuePropName) ? valuePropName : propName;
            }
            else
                this.subscribeProps.props[prop][type][attributeName] = (valuePropName) ? valuePropName : propName;
            if (this.subscribeProps.names.indexOf(prop) == -1)
                this.subscribeProps.names.push(prop);
        };
        BaseObjectAccessor.prototype.isSubscribeProp = function (propName) {
            return (typeof propName == STRING && (propName[0] == COLON));
        };
        BaseObjectAccessor.prototype.defineProp = function (propName) {
            var splitText = propName.split(DOT);
            if (splitText.length > 1) {
                var descriptor = Object.getOwnPropertyDescriptor(Object.getPrototypeOf(this.controlConfig.props), splitText[1]);
                if (!descriptor)
                    this.controlConfig.defineProp(splitText[1]);
            }
        };
        return BaseObjectAccessor;
    }());

    var ComponentView = /** @class */ (function () {
        function ComponentView(_component, _viewContainerRef, _componentFactoryResolver, formControlConfig, dynamicFormBuildConfig) {
            this.formControlConfig = formControlConfig;
            this.dynamicFormBuildConfig = dynamicFormBuildConfig;
            this.component = _component;
            this.viewContainerRef = _viewContainerRef;
            this.componentFactoryResolver = _componentFactoryResolver;
        }
        ComponentView.prototype.create = function () {
            var componentFactory = this.componentFactoryResolver.resolveComponentFactory(this.component);
            this.componentRef = this.viewContainerRef.createComponent(componentFactory, this.viewContainerRef.length, this.viewContainerRef.parentInjector);
            this.setParams(this.componentRef.instance);
        };
        ComponentView.prototype.setParams = function (instance) {
            var e_1, _a;
            if (this.formControlConfig.inputs) {
                var propNames = Object.getOwnPropertyNames(this.formControlConfig.inputs);
                try {
                    for (var propNames_1 = __values(propNames), propNames_1_1 = propNames_1.next(); !propNames_1_1.done; propNames_1_1 = propNames_1.next()) {
                        var propName = propNames_1_1.value;
                        this.overridePropAndSetValue(instance, propName, this.formControlConfig.inputs);
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (propNames_1_1 && !propNames_1_1.done && (_a = propNames_1.return)) _a.call(propNames_1);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
            }
            instance["controlConfig"] = this.formControlConfig;
            instance["dynamicFormBuildConfig"] = this.dynamicFormBuildConfig;
        };
        ComponentView.prototype.overridePropAndSetValue = function (instance, propName, inputs) {
            var descriptor = Object.getOwnPropertyDescriptor(Object.getPrototypeOf(inputs), propName);
            var value = '';
            if (!descriptor) {
                value = inputs[propName];
                delete inputs[propName];
            }
            Object.defineProperty(inputs, propName, {
                get: function () { return (descriptor) ? descriptor.get() : value; },
                set: function (v) { instance[propName] = v; (descriptor) ? descriptor.set.call(inputs, v) : value = v; }
            });
            instance[propName] = descriptor ? descriptor.get.call(inputs) : value;
        };
        ComponentView.prototype.rootNode = function () {
            return this.componentRef.hostView.rootNodes[0];
        };
        ComponentView.prototype.getComponentRef = function () {
            return this.componentRef;
        };
        ComponentView.prototype.destroy = function () {
            if (this.componentRef) {
                this.componentRef.destroy();
                this.componentRef = undefined;
            }
        };
        return ComponentView;
    }());

    var ElementAccessor = /** @class */ (function (_super) {
        __extends(ElementAccessor, _super);
        function ElementAccessor(dynamicNodeConfig) {
            var _this = _super.call(this, dynamicNodeConfig) || this;
            _this.checkedCheckbox = function (value, element) { return (value) ? (_this.controlConfig.config.multiselect) ? value.filter(function (t) { return element.value == t; })[0] != undefined : element.value == value : false; };
            _this.checkedRadio = function (value, element) { return (value) ? value == element.value : false; };
            return _this;
        }
        ElementAccessor.prototype.createNodeElement = function (parentElement, name) {
            this.element = name.startsWith("#") ? this.createComponentView(this.dynamicNodeConfig.controlConfig) : this.dynamicNodeConfig.renderer.createElement(name);
            this.dynamicNodeConfig.renderer.appendChild(parentElement, this.element);
        };
        ElementAccessor.prototype.createComponentView = function (controlConfig) {
            var container = dynamicContainer.getComponent(controlConfig.config.type.replace("#", ""));
            if (container) {
                this.componentView = new ComponentView(container.instance, this.dynamicNodeConfig.viewContainerRef, this.dynamicNodeConfig.componentFactoryResolver, controlConfig, this.dynamicNodeConfig.dynamicFormBuildConfig);
                this.componentView.create();
                return this.componentView.rootNode();
            }
        };
        ElementAccessor.prototype.removeChildren = function (element) {
            if (element.firstElementChild) {
                this.removeChildren(element.firstElementChild);
            }
            var controlId = element.getAttribute("data-rxwebid");
            if (controlId && ControlState.controls[controlId]) {
                ControlState.controls[controlId].destroy();
                delete ControlState.controls[controlId];
            }
        };
        ElementAccessor.prototype.setControlConfigValue = function (targetElement) {
            var e_1, _a;
            var value = targetElement.value === "" ? null : targetElement.value;
            switch (targetElement.type) {
                case FILE:
                    this.controlConfig.formControl.setValue(targetElement.files);
                    this.controlConfig.value = targetElement.files;
                    break;
                case CHECKBOX:
                    this.setCheckboxValue(targetElement);
                    break;
                case SELECT_MULTIPLE:
                    var values = [];
                    try {
                        for (var _b = __values(this.element.options), _c = _b.next(); !_c.done; _c = _b.next()) {
                            var option = _c.value;
                            if (option.selected && option.value)
                                values.push(option.value);
                        }
                    }
                    catch (e_1_1) { e_1 = { error: e_1_1 }; }
                    finally {
                        try {
                            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                        }
                        finally { if (e_1) throw e_1.error; }
                    }
                    this.controlConfig.value = values;
                    break;
                default:
                    this.controlConfig.formControl.setValue(value);
                    this.controlConfig.value = value;
                    break;
            }
        };
        ElementAccessor.prototype.resetElementValue = function (value) {
            var e_2, _a;
            switch (this.element.type) {
                case CHECKBOX:
                case RADIO:
                    var elements = document.querySelectorAll("[name='" + this.controlConfig.config.name + "']");
                    for (var i = 0; i < elements.length; i++) {
                        elements[i].checked = this.element.type == CHECKBOX ? this.checkedCheckbox(value, elements[i]) : this.checkedRadio(value, elements[i]);
                    }
                    break;
                case SELECT_MULTIPLE:
                    var _loop_1 = function (option) {
                        option.selected = (value) ? value.filter(function (t) { return t == option.value; })[0] != undefined : false;
                    };
                    try {
                        for (var _b = __values(this.element.options), _c = _b.next(); !_c.done; _c = _b.next()) {
                            var option = _c.value;
                            _loop_1(option);
                        }
                    }
                    catch (e_2_1) { e_2 = { error: e_2_1 }; }
                    finally {
                        try {
                            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                        }
                        finally { if (e_2) throw e_2.error; }
                    }
                    break;
                default:
                    this.element.value = value;
            }
        };
        ElementAccessor.prototype.setCheckboxValue = function (targetElement) {
            var value = (this.controlConfig.config.multiselect) ? this.controlConfig.value || [] : targetElement.value;
            if (targetElement.checked)
                (this.controlConfig.config.multiselect) ? value.push(targetElement.value) : null;
            else
                (this.controlConfig.config.multiselect) ? value.splice(value.indexOf(targetElement.value), 1) : value = null;
            this.controlConfig.formControl.setValue(value);
            this.controlConfig.value = value;
        };
        return ElementAccessor;
    }(BaseObjectAccessor));

    var ElementEventProcessor = /** @class */ (function (_super) {
        __extends(ElementEventProcessor, _super);
        function ElementEventProcessor(dynamicNodeConfig) {
            var _this = _super.call(this, dynamicNodeConfig) || this;
            _this.dynamicNodeConfig = dynamicNodeConfig;
            return _this;
        }
        ElementEventProcessor.prototype.bindEvents = function (events, isSubscribe) {
            var _this = this;
            Object.keys(events).forEach(function (eventName) {
                switch (eventName) {
                    case FOCUS:
                        _this.setFocus(_this.getValue(events[eventName]));
                        break;
                    case SELECT:
                    case INPUT:
                        _this.setInput();
                        break;
                    case BLUR:
                        _this.setBlur();
                        break;
                    case CLICK:
                        _this.setClick(_this.getValue(events[eventName]));
                        break;
                }
                if (isSubscribe && _this.isSubscribeProp(events[eventName]))
                    _this.setPropSubscription(_this.getPropName(events[eventName]), EVENTS, eventName);
            });
        };
        ElementEventProcessor.prototype.setClick = function (functionName) {
            var _this = this;
            this.element.onclick = function () {
                if (_this.controlConfig[functionName])
                    _this.controlConfig[functionName].call(_this.controlConfig);
            };
        };
        ElementEventProcessor.prototype.setFocus = function (value) {
            var _this = this;
            if (value && this.element.focus)
                setTimeout(function (t) { _this.element.focus(); }, 1000);
        };
        ElementEventProcessor.prototype.setBlur = function () {
            var _this = this;
            var listen = this.dynamicNodeConfig.renderer.listen(this.element, BLUR, function () {
                _this.dynamicNodeConfig.controlConfig.formControl.markAsTouched();
            });
            this.eventListeners.push(listen);
        };
        ElementEventProcessor.prototype.setInput = function () {
            var _this = this;
            var listen = this.dynamicNodeConfig.renderer.listen(this.element, INPUT, function (v) {
                var isPassed = true;
                if (_this.controlConfig.hooks && _this.controlConfig.hooks.preValue) {
                    isPassed = _this.controlConfig.hooks.preValue.call(_this.controlConfig, v.target.value);
                    if (!isPassed) {
                        _this.controlConfig.formControl.patchValue(_this.controlConfig.formControl.value);
                        _this.resetElementValue(_this.controlConfig.formControl.value);
                    }
                }
                if (isPassed) {
                    _this.setControlConfigValue(v.target);
                    if (_this.controlConfig.hooks && _this.controlConfig.hooks.postValue)
                        _this.controlConfig.hooks.postValue.call(_this.controlConfig);
                    _this.controlConfig.formControl.markAsDirty();
                }
                if (_this.conditionalValidator)
                    _this.conditionalValidator(_this.controlConfig.formControl);
            });
            this.eventListeners.push(listen);
            setTimeout(function () {
                if (_this.controlConfig.formControl[CONDITIONAL_VALIDATOR]) {
                    _this.conditionalValidator = _this.controlConfig.formControl[CONDITIONAL_VALIDATOR];
                    delete _this.controlConfig.formControl[CONDITIONAL_VALIDATOR];
                }
            }, 50);
        };
        return ElementEventProcessor;
    }(ElementAccessor));

    var ElementPropsAccessor = /** @class */ (function (_super) {
        __extends(ElementPropsAccessor, _super);
        function ElementPropsAccessor(dynamicNodeConfig) {
            var _this = _super.call(this, dynamicNodeConfig) || this;
            _this.oldAdditionalClasses = [];
            _this.oldClasses = [];
            return _this;
        }
        ElementPropsAccessor.prototype.bindAttribute = function (attr, isSubscribe) {
            var _this = this;
            Object.keys(attr).forEach(function (attributeName) {
                var value = (attributeName !== STYLE) ? _this.getValue(attr[attributeName]) : attr[attributeName];
                switch (attributeName) {
                    case ADDITIONAL_CLASS:
                    case CLASS:
                        _this.setClass(value, attributeName);
                        break;
                    case STYLE:
                        Object.keys(attr[attributeName]).forEach(function (x) {
                            var value = _this.getValue(attr[attributeName][x]);
                            _this.setStyleProp(x, value);
                            if (isSubscribe && _this.isSubscribeProp(attr[attributeName][x]))
                                _this.setPropSubscription(attr[attributeName][x], ATTR, x, '', STYLE);
                        });
                        break;
                    default:
                        _this.addOrRemoveAttribute(attributeName, value, attr[attributeName] === "");
                        break;
                }
                if (isSubscribe && attributeName !== STYLE && _this.isSubscribeProp(attr[attributeName]))
                    _this.setPropSubscription(attr[attributeName], ATTR, attributeName);
            });
        };
        ElementPropsAccessor.prototype.bindProp = function (prop, isSubscribe) {
            var _this = this;
            Object.keys(prop).forEach(function (propName) {
                var value = _this.getValue(prop[propName]);
                _this.setProperty(propName, (value !== undefined && value !== null && value !== false) ? value : "");
                if (isSubscribe && _this.isSubscribeProp(prop[propName]))
                    _this.setPropSubscription(prop[propName], PROP, propName);
            });
        };
        ElementPropsAccessor.prototype.setClass = function (classes, type) {
            classes = this.getClassNames(type == ADDITIONAL_CLASS ? this.dynamicNodeConfig.additionalClasses.class : classes);
            type == ADDITIONAL_CLASS ? this.addOrRemoveClasses(this.oldAdditionalClasses, false) : this.addOrRemoveClasses(this.oldClasses, false);
            this.addOrRemoveClasses(classes);
            switch (type) {
                case ADDITIONAL_CLASS:
                    this.oldAdditionalClasses = classes;
                    break;
                case CLASS:
                    this.oldClasses = classes;
                    break;
            }
        };
        ElementPropsAccessor.prototype.setStyleProp = function (propName, value) {
            switch (propName) {
                case DISPLAY:
                    value = (typeof value == BOOLEAN || value === undefined) ? value : !(value);
                    value = (value) ? NONE : BLANK;
                    break;
            }
            this.addOrRemoveStyle(propName, value);
        };
        ElementPropsAccessor.prototype.setProperty = function (propertyName, value) {
            this.dynamicNodeConfig.renderer.setProperty(this.element, propertyName, value);
        };
        ElementPropsAccessor.prototype.addOrRemoveClasses = function (classes, isAdd) {
            var _this = this;
            if (isAdd === void 0) { isAdd = true; }
            if (isAdd)
                classes.forEach(function (t) { return _this.dynamicNodeConfig.renderer.addClass(_this.element, t); });
            else
                classes.forEach(function (t) { return _this.dynamicNodeConfig.renderer.removeClass(_this.element, t); });
        };
        ElementPropsAccessor.prototype.addOrRemoveStyle = function (styleName, value) {
            if (value)
                this.dynamicNodeConfig.renderer.setStyle(this.element, styleName, value);
            else
                this.dynamicNodeConfig.renderer.removeStyle(this.element, styleName);
        };
        ElementPropsAccessor.prototype.addOrRemoveAttribute = function (attributeName, value, isBlank) {
            if (value || isBlank)
                this.dynamicNodeConfig.renderer.setAttribute(this.element, attributeName, value);
            else
                this.dynamicNodeConfig.renderer.removeAttribute(this.element, attributeName);
        };
        ElementPropsAccessor.prototype.getClassNames = function (classes) {
            var _this = this;
            var elementClasses = [];
            if (classes)
                classes.forEach(function (t) {
                    if (typeof t == STRING)
                        elementClasses.push(t);
                    else if (typeof t == FUNCTION$1) {
                        var elementClass = t.call(_this.controlConfig);
                        if (elementClass && !Array.isArray(elementClass))
                            elementClasses.push(elementClass);
                        else if (Array.isArray(elementClass))
                            elementClass.forEach(function (x) { return elementClasses.push(x); });
                    }
                });
            return elementClasses;
        };
        return ElementPropsAccessor;
    }(ElementEventProcessor));

    var VALUE = "value";
    var OverrideObjectProp = /** @class */ (function (_super) {
        __extends(OverrideObjectProp, _super);
        function OverrideObjectProp(dynamicNodeConfig) {
            return _super.call(this, dynamicNodeConfig) || this;
        }
        OverrideObjectProp.prototype.overrideValueProp = function () {
            var _this = this;
            var descriptor = Object.getOwnPropertyDescriptor(Object.getPrototypeOf(this.controlConfig), VALUE);
            var value = this.controlConfig.value;
            var oldValue = null;
            Object.defineProperty(this.controlConfig, VALUE, {
                get: function () { return descriptor ? descriptor.get.call(_this.controlConfig) : value; },
                set: function (v) {
                    value = v;
                    if (_this.controlConfig.formControl.value != v) {
                        _this.controlConfig.formControl.setValue(v);
                        _this.resetElementValue(v);
                        _this.controlConfig.value = v;
                    }
                    else {
                        _this.controlConfig.notifyValueChanged(VALUE, v, oldValue);
                        if (descriptor)
                            descriptor.set.call(_this.controlConfig, v);
                        _this.controlConfig.refresh();
                    }
                    _this.controlConfig.config.value = v;
                    oldValue = v;
                }
            });
            this.overrideFormControlProp();
            if (this.controlConfig.formControl.value)
                setTimeout(function () { _this.resetElementValue(_this.controlConfig.formControl.value); }, 50);
        };
        OverrideObjectProp.prototype.overrideFormControlProp = function () {
            var _this = this;
            var value = this.controlConfig.formControl.value;
            Object.defineProperty(this.controlConfig.formControl, VALUE, {
                get: function () { return value; },
                set: function (v) {
                    value = v;
                    var t = setTimeout(function () {
                        if (value != _this.controlConfig.value) {
                            _this.controlConfig.value = value;
                            _this.resetElementValue(value);
                        }
                    }, 50);
                }
            });
        };
        return OverrideObjectProp;
    }(ElementPropsAccessor));

    var DomManipulation = /** @class */ (function (_super) {
        __extends(DomManipulation, _super);
        function DomManipulation(parentNode, elementName, dynamicNodeConfig) {
            var _this = _super.call(this, dynamicNodeConfig) || this;
            _this.isComponentView = false;
            _this.subscribers = [];
            _this.elementIndex = 0;
            _this.eventListeners = [];
            _this.actionListeners = {};
            _this.elementClasses = [];
            _this.nodeName = elementName;
            _super.prototype.createNodeElement.call(_this, parentNode, elementName);
            _this.bindAdditionalClasses();
            _this.controlId = ControlState.controlId = ControlState.controlId + 1;
            ControlState.controls[_this.controlId] = _this;
            _this.addOrRemoveAttribute("data-rxwebid", _this.controlId, false);
            return _this;
        }
        DomManipulation.prototype.parseObject = function (jObject, isSubscribe) {
            this.domConfig = jObject;
            this.process(jObject, isSubscribe);
            this.overrideProp(isSubscribe);
            this.subscribeValueChange();
        };
        DomManipulation.prototype.subscribeValueChange = function () {
            var _this = this;
            if (Object.keys(this.subscribeProps).length > 0)
                this.controlConfig.onPropValueChanged(this.controlId, this.subscribeProps, function (x, y) {
                    _this.process(x, false);
                });
        };
        DomManipulation.prototype.process = function (jObject, isSubscribe) {
            var _this = this;
            Object.keys(jObject).forEach(function (propName) {
                switch (propName) {
                    case PROP:
                        _this.bindProp(jObject[propName], isSubscribe);
                        break;
                    case ATTR:
                        _this.bindAttribute(jObject[propName], isSubscribe);
                        break;
                    case EVENTS:
                        _this.bindEvents(jObject[propName], isSubscribe);
                        break;
                    case SOURCE:
                        if (!isSubscribe) {
                            while (_this.element.firstElementChild)
                                _this.removeChildren(_this.element.firstElementChild);
                            _this.dynamicNodeConfig.controlConfigProcessor.createChildrens(_this.dynamicNodeConfig.collections, _this, _this.controlConfig, _this.dynamicNodeConfig.additionalClasses, false);
                        }
                        else
                            _this.setPropSubscription(SOURCE, SOURCE, SOURCE);
                        break;
                }
            });
        };
        DomManipulation.prototype.overrideProp = function (isSubscribe) {
            switch (this.nodeName) {
                case INPUT:
                case SELECT:
                case TEXTAREA:
                    if (this.domConfig.overrideProp == undefined || this.domConfig.overrideProp)
                        this.overrideValueProp();
                    this.setPropSubscription(READONLY, ATTR, ADDITIONAL_CLASS, ADDITIONAL_CLASS);
                    if (this.controlConfig && this.controlConfig.config && this.controlConfig.config.additionalConfig)
                        this.process(this.controlConfig.config.additionalConfig, isSubscribe);
                    break;
            }
        };
        DomManipulation.prototype.bindAdditionalClasses = function () {
            var _this = this;
            var additionalClasses = this.dynamicNodeConfig.additionalClasses;
            if (additionalClasses && additionalClasses.class) {
                this.setClass(additionalClasses.class, ADDITIONAL_CLASS);
                if (additionalClasses.listenerProps)
                    additionalClasses.listenerProps.forEach(function (t) { return _this.setPropSubscription(t, ATTR, ADDITIONAL_CLASS, ADDITIONAL_CLASS); });
            }
        };
        DomManipulation.prototype.destroy = function () {
            var eventCount = this.eventListeners.length;
            for (var i = 0; i < eventCount; i++) {
                this.eventListeners[0]();
                this.eventListeners.splice(0, 1);
            }
            this.eventListeners = [];
            this.element.onClick = null;
            if (this.componentView)
                this.componentView.destroy();
            else
                this.element.parentElement.removeChild(this.element);
            this.controlConfig.destroy(this.controlId);
        };
        return DomManipulation;
    }(OverrideObjectProp));

    var ControlConfigProcessor = /** @class */ (function () {
        function ControlConfigProcessor(element, renderer, componentFactoryResolver, viewContainerRef) {
            this.element = element;
            this.renderer = renderer;
            this.componentFactoryResolver = componentFactoryResolver;
            this.viewContainerRef = viewContainerRef;
            this.isBuild = false;
        }
        Object.defineProperty(ControlConfigProcessor.prototype, "viewMode", {
            get: function () {
                return this._viewMode;
            },
            set: function (value) {
                this._viewMode = value;
                if (this.isBuild)
                    this.build();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ControlConfigProcessor.prototype, "currentViewMode", {
            get: function () {
                return DYNAMIC_ELEMENT_DESIGN_TREE.viewMode[this.viewMode];
            },
            enumerable: true,
            configurable: true
        });
        ControlConfigProcessor.prototype.getView = function (name, controlConfig) {
            if (this.viewMode == INLINE)
                name = this.getName(name, controlConfig, true);
            return DYNAMIC_ELEMENT_DESIGN_TREE[name];
        };
        Object.defineProperty(ControlConfigProcessor.prototype, "viewClassPath", {
            get: function () {
                return BOOTSTRAP_DESIGN_CONFIG.elementClassPath.viewMode[this.viewMode];
            },
            enumerable: true,
            configurable: true
        });
        ControlConfigProcessor.prototype.build = function () {
            var _this = this;
            this.uiBindings.forEach(function (controlConfigName) {
                _this.designForm(controlConfigName, _this.element, _this.currentViewMode[0], _this.currentViewMode[1], BOOTSTRAP_DESIGN_CONFIG.elementClassPath.viewMode[_this.viewMode]);
            });
        };
        ControlConfigProcessor.prototype.designForm = function (controlConfigName, element, viewRoot, viewChild, classPath, childrenControlConfig) {
            var _this = this;
            var controlConfig = childrenControlConfig || this.getControlConfig(controlConfigName);
            if (controlConfig) {
                if (this.viewMode != INLINE && controlConfig && !controlConfig.config.skipDefaultView)
                    this.createElement(viewRoot, viewChild, element, controlConfig, classPath);
                else {
                    var currentView = this.getView(controlConfig.config.type, controlConfig);
                    if (currentView)
                        this.createElement(currentView[0], currentView[1], element, controlConfig, this.getClassPath(controlConfig.config.type, controlConfig, this._viewMode == INLINE));
                    else
                        this.createDomManipulation(controlConfig.config.type, [], element, controlConfig, [], true);
                }
            }
            else if (this.viewMode == ADVANCE && Array.isArray(controlConfigName)) {
                var config = new ControlConfig({}, {});
                var domManipulation_1 = this.createElement(this.currentViewMode[0], [], element, config, BOOTSTRAP_DESIGN_CONFIG.elementClassPath.viewMode[this.viewMode]);
                controlConfigName.forEach(function (t) {
                    _this.designForm(t, domManipulation_1.element, _this.currentViewMode[1][0], _this.currentViewMode[1][1], BOOTSTRAP_DESIGN_CONFIG.elementClassPath.viewMode[_this.viewMode].child["0"]);
                });
            }
        };
        ControlConfigProcessor.prototype.createElement = function (elementName, collections, parentElement, controlConfig, elementClassPath) {
            var _this = this;
            if (!elementName.startsWith("#")) {
                elementClassPath = elementClassPath ? elementClassPath : {};
                var domManipulation_2 = this.createDomManipulation(elementName, collections, parentElement, controlConfig, elementClassPath);
                this.createChildrens(collections, domManipulation_2, controlConfig, elementClassPath);
                if (controlConfig.config && controlConfig.config.childrens && controlConfig.config.childrens.length > 0) {
                    controlConfig.config.childrens.forEach(function (t, i) {
                        var childrenControlConfig = undefined;
                        if (!(typeof t == STRING) && !Array.isArray(t))
                            childrenControlConfig = new ControlConfig(__assign({}, t, { skipDefaultView: true }), {});
                        _this.designForm(t, domManipulation_2.element, _this.currentViewMode[0], _this.currentViewMode[1], BOOTSTRAP_DESIGN_CONFIG.elementClassPath.viewMode[_this.viewMode], childrenControlConfig);
                    });
                }
                return domManipulation_2;
            }
            else
                this.createDomManipulation(elementName, collections, parentElement, controlConfig, elementClassPath, true); //this.createComponentView(controlConfig, parentElement);
        };
        ControlConfigProcessor.prototype.createDomManipulation = function (elementName, collections, parentElement, controlConfig, elementClassPath, isComponentView) {
            if (isComponentView === void 0) { isComponentView = false; }
            var dynamicNodeConfig = {
                controlConfig: controlConfig, additionalClasses: elementClassPath, renderer: this.renderer, collections: collections, controlConfigProcessor: this,
                viewContainerRef: isComponentView ? this.viewContainerRef : undefined,
                componentFactoryResolver: isComponentView ? this.componentFactoryResolver : undefined,
                dynamicFormBuildConfig: this.dynamicFormBuildConfig
            };
            return new DomManipulation(parentElement, elementName, dynamicNodeConfig);
        };
        ControlConfigProcessor.prototype.createChildrens = function (collections, domManipulation, controlConfig, elementClassPath, isSubscribe) {
            var _this = this;
            if (isSubscribe === void 0) { isSubscribe = true; }
            var elementCount = 0;
            var childElementsClassConfig = elementClassPath.child ? elementClassPath.child : {};
            for (var i = 0; i < collections.length; i++) {
                var collection = collections[i];
                if (!ApplicationUtil.isObject(collection)) {
                    if (this.isCreateElement(collections[i], controlConfig)) {
                        if (collection == SQUARE_CONTROL && controlConfig.config.type == undefined && controlConfig.config.childControlConfigs) {
                            controlConfig.config.childControlConfigs.forEach(function (x) {
                                var childControlConfig = _this.getControlConfig(x);
                                _this.createChildNodes(collections, childControlConfig, childElementsClassConfig, elementCount, i, domManipulation);
                            });
                        }
                        else {
                            if (collection == SQUARE_CONTROL && controlConfig.config.type.startsWith("#"))
                                this.createDomManipulation(controlConfig.config.type, [], domManipulation.element, controlConfig, [], true);
                            else {
                                var isIncrease = this.createChildNodes(collections, controlConfig, childElementsClassConfig, elementCount, i, domManipulation);
                                if (isIncrease)
                                    i = i + 1;
                            }
                        }
                    }
                    elementCount++;
                }
                else {
                    if (collection.for)
                        this.runForCollection(collection, domManipulation, controlConfig, elementClassPath);
                    if (isSubscribe)
                        domManipulation.parseObject(collections[i], isSubscribe);
                }
            }
        };
        ControlConfigProcessor.prototype.createChildNodes = function (collections, controlConfig, childElementsClassConfig, elementCount, i, domManipulation) {
            var isNextCollection = false;
            var nextCollection = this.getCollection(collections[i], controlConfig);
            var childClasses = this.getAdditionalClasses(collections[i], childElementsClassConfig, elementCount, controlConfig);
            if (!nextCollection) {
                nextCollection = [collections[i], collections[i + 1]];
                isNextCollection = true;
            }
            this.createElement(nextCollection[0], nextCollection[1], domManipulation.element, controlConfig, childClasses);
            return isNextCollection;
        };
        ControlConfigProcessor.prototype.runForCollection = function (collection, domManipulation, controlConfig, elementClassPath) {
            var _this = this;
            Object.keys(collection.for).forEach(function (t) {
                var source = objectPropValue(t, controlConfig);
                source.forEach(function (x, index) {
                    var item = collection.for[t].call(controlConfig, x, index);
                    _this.createChildrens(item, domManipulation, controlConfig, elementClassPath);
                });
            });
        };
        ControlConfigProcessor.prototype.getAdditionalClasses = function (name, childClasses, index, controlConfig) {
            name = this.getName(name, controlConfig);
            var additionalClasses = BOOTSTRAP_DESIGN_CONFIG.elementClassPath[name];
            var childrenClasses = childClasses[index] ? childClasses[index] : {
                class: []
            };
            if (additionalClasses) {
                if (childrenClasses.class)
                    additionalClasses = { class: additionalClasses.class.concat(childrenClasses.class), listenerProps: additionalClasses.listenerProps, child: additionalClasses.child };
                return additionalClasses;
            }
            return childrenClasses;
        };
        ControlConfigProcessor.prototype.getCollection = function (name, controlConfig) {
            if (name[0] == "[") {
                name = this.getName(name, controlConfig);
                return DYNAMIC_ELEMENT_DESIGN_TREE[name];
            }
            return undefined;
        };
        ControlConfigProcessor.prototype.getControlName = function (name) {
            var controlName = '';
            switch (name) {
                case "number":
                case "color":
                case "date":
                case "email":
                case "password":
                case "tel":
                case "time":
                case "url":
                case "color":
                case RANGE:
                case FILE:
                case TEXT:
                    controlName = INPUT;
                    break;
                default:
                    controlName = name;
            }
            return controlName;
        };
        ControlConfigProcessor.prototype.getControlConfig = function (name) {
            return this.dynamicFormBuildConfig.controlsConfig[name];
        };
        ControlConfigProcessor.prototype.getName = function (name, controlConfig, isInline) {
            if (isInline === void 0) { isInline = false; }
            name = name.replace(new RegExp(/\[/g), '').replace(new RegExp(/\]/g), '');
            name = (name == CONTROL || isInline) ? this.getControlName(controlConfig.config.type) : name;
            switch (name) {
                case INPUT:
                    name = this.prependControl(name, controlConfig);
                    break;
                case INPUT_TEXT:
                    name = INPUT;
                    break;
            }
            return name;
        };
        ControlConfigProcessor.prototype.prependControl = function (name, controlConfig) {
            if (controlConfig.config.ui && controlConfig.config.ui.prependText && controlConfig.config.ui.prependText.right && controlConfig.config.ui.prependText.left)
                name = PREPEND_BOTH;
            else if (name == INPUT && controlConfig.config.ui && controlConfig.config.ui.prependText && controlConfig.config.ui.prependText.left)
                name = PREPEND_LEFT;
            else if (name == INPUT && controlConfig.config.ui && controlConfig.config.ui.prependText && controlConfig.config.ui.prependText.right)
                name = PREPEND_RIGHT;
            return name;
        };
        ControlConfigProcessor.prototype.isCreateElement = function (collection, controlConfig) {
            var isCreate = true;
            switch (collection) {
                case "[img]":
                    isCreate = controlConfig.img != undefined;
                case SQUARE_LABEL:
                    isCreate = controlConfig.label != undefined;
                    break;
                case SQUARE_SMALL:
                    isCreate = controlConfig.description != undefined;
                    break;
                case SQUARE_ERROR:
                    isCreate = controlConfig.formControl != undefined && (controlConfig.formControl.validator != undefined || controlConfig.formControl.asyncValidator != undefined);
                    break;
            }
            return isCreate;
        };
        ControlConfigProcessor.prototype.getClassPath = function (name, controlConfig, isInline) {
            if (this.viewMode == INLINE)
                name = this.getName(name, controlConfig, isInline);
            return BOOTSTRAP_DESIGN_CONFIG.elementClassPath[name];
        };
        __decorate([
            core.Input('rxwebDynamicForm'),
            __metadata("design:type", Object)
        ], ControlConfigProcessor.prototype, "dynamicFormBuildConfig", void 0);
        __decorate([
            core.Input(),
            __metadata("design:type", String),
            __metadata("design:paramtypes", [String])
        ], ControlConfigProcessor.prototype, "viewMode", null);
        __decorate([
            core.Input(),
            __metadata("design:type", Array)
        ], ControlConfigProcessor.prototype, "uiBindings", void 0);
        return ControlConfigProcessor;
    }());

    var RxDynamicFormDirective = /** @class */ (function (_super) {
        __extends(RxDynamicFormDirective, _super);
        function RxDynamicFormDirective(elementRef, renderer, componentFactoryResolver, viewContainerRef) {
            return _super.call(this, elementRef.nativeElement, renderer, componentFactoryResolver, viewContainerRef) || this;
        }
        RxDynamicFormDirective.prototype.ngOnInit = function () {
            this.build();
        };
        RxDynamicFormDirective.prototype.removeChildren = function (element) {
            while (element.firstElementChild)
                this.removeChildren(element.firstElementChild);
            var controlId = element.getAttribute("data-rxwebid");
            if (controlId && ControlState.controls[controlId]) {
                ControlState.controls[controlId].destroy();
                delete ControlState.controls[controlId];
            }
        };
        RxDynamicFormDirective.prototype.ngOnDestroy = function () {
            if (this.element)
                this.removeChildren(this.element);
        };
        RxDynamicFormDirective = __decorate([
            core.Directive({
                selector: '[rxwebDynamicForm]'
            }),
            __metadata("design:paramtypes", [core.ElementRef, core.Renderer2, core.ComponentFactoryResolver, core.ViewContainerRef])
        ], RxDynamicFormDirective);
        return RxDynamicFormDirective;
    }(ControlConfigProcessor));

    var RxReactiveDynamicFormsModule = /** @class */ (function () {
        function RxReactiveDynamicFormsModule() {
        }
        RxReactiveDynamicFormsModule_1 = RxReactiveDynamicFormsModule;
        RxReactiveDynamicFormsModule.forRoot = function () { return { ngModule: RxReactiveDynamicFormsModule_1, providers: [] }; };
        var RxReactiveDynamicFormsModule_1;
        RxReactiveDynamicFormsModule = RxReactiveDynamicFormsModule_1 = __decorate([
            core.NgModule({
                declarations: [RxDynamicFormDirective],
                imports: [common.CommonModule],
                providers: [RxDynamicFormBuilder],
                exports: [RxDynamicFormDirective]
            })
        ], RxReactiveDynamicFormsModule);
        return RxReactiveDynamicFormsModule;
    }());

    function dynamicComponent(name) {
        return function (target) {
            dynamicContainer.registerComponent(name, target);
        };
    }

    function overrideProps(props) {
        return function (target) {
            dynamicContainer.registerOverrideProp(props);
        };
    }

    var AbstractControlConfig = /** @class */ (function () {
        function AbstractControlConfig() {
        }
        Object.defineProperty(AbstractControlConfig.prototype, "controlConfig", {
            get: function () {
                return this._controlConfig;
            },
            set: function (value) {
                this._controlConfig = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(AbstractControlConfig.prototype, "dynamicFormBuildConfig", {
            get: function () {
                return this._dynamicFormBuildConfig;
            },
            set: function (value) {
                this._dynamicFormBuildConfig = value;
            },
            enumerable: true,
            configurable: true
        });
        AbstractControlConfig.prototype.addItem = function () {
            this.dynamicFormBuildConfig.controlsConfig[this.controlConfig.config.controlConfigName]["addItem"]();
        };
        AbstractControlConfig.prototype.removeItem = function (index) {
            this.dynamicFormBuildConfig.controlsConfig[this.controlConfig.config.controlConfigName]["removeItem"](index);
        };
        __decorate([
            core.Input(),
            __metadata("design:type", FormControlConfig),
            __metadata("design:paramtypes", [FormControlConfig])
        ], AbstractControlConfig.prototype, "controlConfig", null);
        __decorate([
            core.Input(),
            __metadata("design:type", Object),
            __metadata("design:paramtypes", [Object])
        ], AbstractControlConfig.prototype, "dynamicFormBuildConfig", null);
        return AbstractControlConfig;
    }());

    exports.AbstractControlConfig = AbstractControlConfig;
    exports.BOOSTRAP_CLASS_CONFIG = BOOSTRAP_CLASS_CONFIG;
    exports.BOOTSTRAP_DESIGN_CONFIG = BOOTSTRAP_DESIGN_CONFIG;
    exports.ControlConfig = ControlConfig;
    exports.DYNAMIC_ELEMENT_DESIGN_TREE = DYNAMIC_ELEMENT_DESIGN_TREE;
    exports.FormControlConfig = FormControlConfig;
    exports.RxDynamicFormBuilder = RxDynamicFormBuilder;
    exports.RxReactiveDynamicFormsModule = RxReactiveDynamicFormsModule;
    exports.dynamicComponent = dynamicComponent;
    exports.overrideProps = overrideProps;
    exports.ɵ0 = ɵ0;
    exports.ɵ1 = ɵ1;
    exports.ɵ2 = ɵ2;
    exports.ɵa = RxDynamicFormDirective;
    exports.ɵb = ControlConfigProcessor;
    exports.ɵc = BaseFormControlConfig;
    exports.ɵd = PropDescriptor;
    exports.ɵe = ValueChangeNotification;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=rxweb-reactive-dynamic-forms.umd.js.map
