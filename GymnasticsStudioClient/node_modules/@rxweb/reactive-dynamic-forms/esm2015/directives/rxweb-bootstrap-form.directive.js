import * as tslib_1 from "tslib";
import { Renderer2, ElementRef, Directive, ComponentFactoryResolver, ViewContainerRef } from '@angular/core';
import { ControlConfigProcessor } from '../form-designer/control-config-processor';
import { ControlState } from '../statics/control-state';
let RxDynamicFormDirective = class RxDynamicFormDirective extends ControlConfigProcessor {
    constructor(elementRef, renderer, componentFactoryResolver, viewContainerRef) {
        super(elementRef.nativeElement, renderer, componentFactoryResolver, viewContainerRef);
    }
    ngOnInit() {
        this.build();
    }
    removeChildren(element) {
        while (element.firstElementChild)
            this.removeChildren(element.firstElementChild);
        let controlId = element.getAttribute("data-rxwebid");
        if (controlId && ControlState.controls[controlId]) {
            ControlState.controls[controlId].destroy();
            delete ControlState.controls[controlId];
        }
    }
    ngOnDestroy() {
        if (this.element)
            this.removeChildren(this.element);
    }
};
RxDynamicFormDirective = tslib_1.__decorate([
    Directive({
        selector: '[rxwebDynamicForm]'
    }),
    tslib_1.__metadata("design:paramtypes", [ElementRef, Renderer2, ComponentFactoryResolver, ViewContainerRef])
], RxDynamicFormDirective);
export { RxDynamicFormDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicnh3ZWItYm9vdHN0cmFwLWZvcm0uZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHJ4d2ViL3JlYWN0aXZlLWR5bmFtaWMtZm9ybXMvIiwic291cmNlcyI6WyJkaXJlY3RpdmVzL3J4d2ViLWJvb3RzdHJhcC1mb3JtLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQVUsU0FBUyxFQUFhLHdCQUF3QixFQUFFLGdCQUFnQixFQUFFLE1BQU0sZUFBZSxDQUFBO0FBQy9ILE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLDJDQUEyQyxDQUFDO0FBQ25GLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUt4RCxJQUFhLHNCQUFzQixHQUFuQyxNQUFhLHNCQUF1QixTQUFRLHNCQUFzQjtJQUc5RCxZQUFZLFVBQXNCLEVBQUUsUUFBbUIsRUFBRSx3QkFBa0QsRUFBRSxnQkFBa0M7UUFDM0ksS0FBSyxDQUFDLFVBQVUsQ0FBQyxhQUFxQixFQUFFLFFBQVEsRUFBRSx3QkFBd0IsRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDO0lBQ2xHLENBQUM7SUFHRCxRQUFRO1FBQ0osSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO0lBQ2pCLENBQUM7SUFFRCxjQUFjLENBQUMsT0FBWTtRQUN2QixPQUFPLE9BQU8sQ0FBQyxpQkFBaUI7WUFDNUIsSUFBSSxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQUMsaUJBQWlCLENBQUMsQ0FBQztRQUVuRCxJQUFJLFNBQVMsR0FBRyxPQUFPLENBQUMsWUFBWSxDQUFDLGNBQWMsQ0FBQyxDQUFDO1FBQ3JELElBQUksU0FBUyxJQUFJLFlBQVksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLEVBQUU7WUFDL0MsWUFBWSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQztZQUMzQyxPQUFPLFlBQVksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUM7U0FDM0M7SUFDTCxDQUFDO0lBRUQsV0FBVztRQUNQLElBQUksSUFBSSxDQUFDLE9BQU87WUFDWixJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUUxQyxDQUFDO0NBQ0osQ0FBQTtBQTVCWSxzQkFBc0I7SUFIbEMsU0FBUyxDQUFDO1FBQ1AsUUFBUSxFQUFFLG9CQUFvQjtLQUNqQyxDQUFDOzZDQUkwQixVQUFVLEVBQVksU0FBUyxFQUE0Qix3QkFBd0IsRUFBb0IsZ0JBQWdCO0dBSHRJLHNCQUFzQixDQTRCbEM7U0E1Qlksc0JBQXNCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUmVuZGVyZXIyLCBFbGVtZW50UmVmLCBPbkluaXQsIERpcmVjdGl2ZSwgT25EZXN0cm95LCBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIsIFZpZXdDb250YWluZXJSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJ1xyXG5pbXBvcnQgeyBDb250cm9sQ29uZmlnUHJvY2Vzc29yIH0gZnJvbSAnLi4vZm9ybS1kZXNpZ25lci9jb250cm9sLWNvbmZpZy1wcm9jZXNzb3InO1xyXG5pbXBvcnQgeyBDb250cm9sU3RhdGUgfSBmcm9tICcuLi9zdGF0aWNzL2NvbnRyb2wtc3RhdGUnO1xyXG5cclxuQERpcmVjdGl2ZSh7XHJcbiAgICBzZWxlY3RvcjogJ1tyeHdlYkR5bmFtaWNGb3JtXSdcclxufSlcclxuZXhwb3J0IGNsYXNzIFJ4RHluYW1pY0Zvcm1EaXJlY3RpdmUgZXh0ZW5kcyBDb250cm9sQ29uZmlnUHJvY2Vzc29yIGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3kge1xyXG5cclxuXHJcbiAgICBjb25zdHJ1Y3RvcihlbGVtZW50UmVmOiBFbGVtZW50UmVmLCByZW5kZXJlcjogUmVuZGVyZXIyLCBjb21wb25lbnRGYWN0b3J5UmVzb2x2ZXI6IENvbXBvbmVudEZhY3RvcnlSZXNvbHZlciwgdmlld0NvbnRhaW5lclJlZjogVmlld0NvbnRhaW5lclJlZikge1xyXG4gICAgICAgIHN1cGVyKGVsZW1lbnRSZWYubmF0aXZlRWxlbWVudCBhcyBOb2RlLCByZW5kZXJlciwgY29tcG9uZW50RmFjdG9yeVJlc29sdmVyLCB2aWV3Q29udGFpbmVyUmVmKTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgbmdPbkluaXQoKSB7XHJcbiAgICAgICAgdGhpcy5idWlsZCgpO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbW92ZUNoaWxkcmVuKGVsZW1lbnQ6IGFueSkge1xyXG4gICAgICAgIHdoaWxlIChlbGVtZW50LmZpcnN0RWxlbWVudENoaWxkKVxyXG4gICAgICAgICAgICB0aGlzLnJlbW92ZUNoaWxkcmVuKGVsZW1lbnQuZmlyc3RFbGVtZW50Q2hpbGQpO1xyXG5cclxuICAgICAgICBsZXQgY29udHJvbElkID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJkYXRhLXJ4d2ViaWRcIik7XHJcbiAgICAgICAgaWYgKGNvbnRyb2xJZCAmJiBDb250cm9sU3RhdGUuY29udHJvbHNbY29udHJvbElkXSkge1xyXG4gICAgICAgICAgICBDb250cm9sU3RhdGUuY29udHJvbHNbY29udHJvbElkXS5kZXN0cm95KCk7XHJcbiAgICAgICAgICAgIGRlbGV0ZSBDb250cm9sU3RhdGUuY29udHJvbHNbY29udHJvbElkXTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgbmdPbkRlc3Ryb3koKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuZWxlbWVudClcclxuICAgICAgICAgICAgdGhpcy5yZW1vdmVDaGlsZHJlbih0aGlzLmVsZW1lbnQpO1xyXG5cclxuICAgIH1cclxufSJdfQ==