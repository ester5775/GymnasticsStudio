import { COLON, BLANK, STRING, SQUARE } from '../../const/app.const';
import { objectPropValue } from '../../functions/object-prop-value.function';
const PROPS = ":props.";
const GLOBAL_MATCH = "g";
const DOT = ".";
export class BaseObjectAccessor {
    constructor(dynamicNodeConfig) {
        this.dynamicNodeConfig = dynamicNodeConfig;
        this.subscribeProps = {
            names: [], props: {}
        };
        this.controlConfig = this.dynamicNodeConfig.controlConfig;
    }
    getPropName(text) {
        if (text[0] == COLON || (text[0] == SQUARE)) {
            return text.replace(new RegExp(COLON, GLOBAL_MATCH), BLANK).replace(new RegExp(SQUARE, GLOBAL_MATCH), BLANK);
        }
        return text;
    }
    getValue(text) {
        if (typeof text == STRING && ((text[0] == COLON) || (text[0] == SQUARE))) {
            text = text.replace(new RegExp(COLON, GLOBAL_MATCH), BLANK).replace(new RegExp(SQUARE, GLOBAL_MATCH), BLANK);
            return objectPropValue(text, this.controlConfig);
        }
        return text;
    }
    setPropSubscription(propName, type, attributeName, valuePropName = '', parentPropName = '') {
        if (propName.startsWith(PROPS))
            this.defineProp(propName);
        let prop = this.getPropName(propName);
        if (!this.subscribeProps.props[prop])
            this.subscribeProps.props[prop] = {};
        if (!this.subscribeProps.props[prop][type])
            this.subscribeProps.props[prop][type] = {};
        if (parentPropName) {
            this.subscribeProps.props[prop][type][parentPropName] = {};
            this.subscribeProps.props[prop][type][parentPropName][attributeName] = (valuePropName) ? valuePropName : propName;
        }
        else
            this.subscribeProps.props[prop][type][attributeName] = (valuePropName) ? valuePropName : propName;
        if (this.subscribeProps.names.indexOf(prop) == -1)
            this.subscribeProps.names.push(prop);
    }
    isSubscribeProp(propName) {
        return (typeof propName == STRING && (propName[0] == COLON));
    }
    defineProp(propName) {
        let splitText = propName.split(DOT);
        if (splitText.length > 1) {
            let descriptor = Object.getOwnPropertyDescriptor(Object.getPrototypeOf(this.controlConfig.props), splitText[1]);
            if (!descriptor)
                this.controlConfig.defineProp(splitText[1]);
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZS1vYmplY3QtYWNjZXNzb3IuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Acnh3ZWIvcmVhY3RpdmUtZHluYW1pYy1mb3Jtcy8iLCJzb3VyY2VzIjpbImRvbWFpbi9kb20vYmFzZS1vYmplY3QtYWNjZXNzb3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBQyxNQUFNLHVCQUF1QixDQUFDO0FBRXBFLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSw0Q0FBNEMsQ0FBQTtBQUc1RSxNQUFNLEtBQUssR0FBVyxTQUFTLENBQUM7QUFDaEMsTUFBTSxZQUFZLEdBQVcsR0FBRyxDQUFDO0FBQ2pDLE1BQU0sR0FBRyxHQUFXLEdBQUcsQ0FBQztBQUV4QixNQUFNLE9BQWdCLGtCQUFrQjtJQU1wQyxZQUFtQixpQkFBb0M7UUFBcEMsc0JBQWlCLEdBQWpCLGlCQUFpQixDQUFtQjtRQUp2RCxtQkFBYyxHQUEyQjtZQUNyQyxLQUFLLEVBQUUsRUFBRSxFQUFFLEtBQUssRUFBRSxFQUFFO1NBQ3ZCLENBQUM7UUFFeUQsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUMsaUJBQWlCLENBQUMsYUFBYSxDQUFDO0lBQUMsQ0FBQztJQUV2SCxXQUFXLENBQUMsSUFBWTtRQUNwQixJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxLQUFLLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksTUFBTSxDQUFDLEVBQUU7WUFDekMsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksTUFBTSxDQUFDLEtBQUssRUFBRSxZQUFZLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxNQUFNLENBQUMsTUFBTSxFQUFFLFlBQVksQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDO1NBQ2hIO1FBQ0QsT0FBTyxJQUFJLENBQUM7SUFDaEIsQ0FBQztJQUdELFFBQVEs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LENBQUM7WUFDaEgsSUFBSSxDQUFDLFVBQVU7Z0JBQ1gsSUFBSSxDQUFDLGFBQWEsQ0FBQyxVQUFVLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDbkQ7SUFDTCxDQUFDO0NBQ0oiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDT0xPTiwgQkxBTkssIFNUUklORywgU1FVQVJFfSBmcm9tICcuLi8uLi9jb25zdC9hcHAuY29uc3QnO1xyXG5pbXBvcnQgeyBEeW5hbWljTm9kZUNvbmZpZyB9IGZyb20gJy4uLy4uL21vZGVscy9pbnRlcmZhY2UvZHluYW1pYy1ub2RlLWNvbmZpZydcclxuaW1wb3J0IHsgb2JqZWN0UHJvcFZhbHVlIH0gZnJvbSAnLi4vLi4vZnVuY3Rpb25zL29iamVjdC1wcm9wLXZhbHVlLmZ1bmN0aW9uJ1xyXG5pbXBvcnQgeyBGb3JtQ29udHJvbENvbmZpZyB9IGZyb20gXCIuLi8uLi9zZXJ2aWNlcy9mb3JtLWNvbnRyb2wtY29uZmlnXCJcclxuXHJcbmNvbnN0IFBST1BTOiBzdHJpbmcgPSBcIjpwcm9wcy5cIjtcclxuY29uc3QgR0xPQkFMX01BVENIOiBzdHJpbmcgPSBcImdcIjtcclxuY29uc3QgRE9UOiBzdHJpbmcgPSBcIi5cIjtcclxuXHJcbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBCYXNlT2JqZWN0QWNjZXNzb3Ige1xyXG4gICAgY29udHJvbENvbmZpZzogRm9ybUNvbnRyb2xDb25maWc7XHJcbiAgICBzdWJzY3JpYmVQcm9wczogeyBba2V5OiBzdHJpbmddOiBhbnkgfSA9IHtcclxuICAgICAgICBuYW1lczogW10sIHByb3BzOiB7fVxyXG4gICAgfTtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgZHluYW1pY05vZGVDb25maWc6IER5bmFtaWNOb2RlQ29uZmlnKSB7IHRoaXMuY29udHJvbENvbmZpZyA9IHRoaXMuZHluYW1pY05vZGVDb25maWcuY29udHJvbENvbmZpZzsgfVxyXG5cclxuICAgIGdldFByb3BOYW1lKHRleHQ6IHN0cmluZykge1xyXG4gICAgICAgIGlmICh0ZXh0WzBdID09IENPTE9OIHx8ICh0ZXh0WzBdID09IFNRVUFSRSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRleHQucmVwbGFjZShuZXcgUmVnRXhwKENPTE9OLCBHTE9CQUxfTUFUQ0gpLCBCTEFOSykucmVwbGFjZShuZXcgUmVnRXhwKFNRVUFSRSwgR0xPQkFMX01BVENIKSwgQkxBTkspO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGV4dDtcclxuICAgIH1cclxuXHJcblxyXG4gICAgZ2V0VmFsdWUodGV4dDogc3RyaW5nKSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiB0ZXh0ID09IFNUUklORyAmJiAoKHRleHRbMF0gPT0gQ09MT04pIHx8ICh0ZXh0WzBdID09IFNRVUFSRSkpKSB7XHJcbiAgICAgICAgICAgIHRleHQgPSB0ZXh0LnJlcGxhY2UobmV3IFJlZ0V4cChDT0xPTiwgR0xPQkFMX01BVENIKSwgQkxBTkspLnJlcGxhY2UobmV3IFJlZ0V4cChTUVVBUkUsIEdMT0JBTF9NQVRDSCksIEJMQU5LKTtcclxuICAgICAgICAgICAgcmV0dXJuIG9iamVjdFByb3BWYWx1ZSh0ZXh0LCB0aGlzLmNvbnRyb2xDb25maWcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGV4dDtcclxuICAgIH1cclxuXHJcbiAgICBzZXRQcm9wU3Vic2NyaXB0aW9uKHByb3BOYW1lOiBzdHJpbmcsIHR5cGU6IHN0cmluZywgYXR0cmlidXRlTmFtZTogc3RyaW5nLCB2YWx1ZVByb3BOYW1lOiBzdHJpbmcgPSAnJywgcGFyZW50UHJvcE5hbWU6IHN0cmluZyA9ICcnKSB7XHJcbiAgICAgICAgaWYgKHByb3BOYW1lLnN0YXJ0c1dpdGgoUFJPUFMpKSBcclxuICAgICAgICAgICAgdGhpcy5kZWZpbmVQcm9wKHByb3BOYW1lKTtcclxuXHJcbiAgICAgICAgbGV0IHByb3AgPSB0aGlzLmdldFByb3BOYW1lKHByb3BOYW1lKTtcclxuXHJcbiAgICAgICAgaWYgKCF0aGlzLnN1YnNjcmliZVByb3BzLnByb3BzW3Byb3BdKVxyXG4gICAgICAgICAgICB0aGlzLnN1YnNjcmliZVByb3BzLnByb3BzW3Byb3BdID0ge307XHJcbiAgICAgICAgaWYgKCF0aGlzLnN1YnNjcmliZVByb3BzLnByb3BzW3Byb3BdW3R5cGVdKVxyXG4gICAgICAgICAgICB0aGlzLnN1YnNjcmliZVByb3BzLnByb3BzW3Byb3BdW3R5cGVdID0ge307IFxyXG4gICAgICAgIGlmIChwYXJlbnRQcm9wTmFtZSkge1xyXG4gICAgICAgICAgICB0aGlzLnN1YnNjcmliZVByb3BzLnByb3BzW3Byb3BdW3R5cGVdW3BhcmVudFByb3BOYW1lXSA9IHt9O1xyXG4gICAgICAgICAgICB0aGlzLnN1YnNjcmliZVByb3BzLnByb3BzW3Byb3BdW3R5cGVdW3BhcmVudFByb3BOYW1lXVthdHRyaWJ1dGVOYW1lXSA9ICh2YWx1ZVByb3BOYW1lKSA/IHZhbHVlUHJvcE5hbWUgOiBwcm9wTmFtZTtcclxuICAgICAgICB9IGVsc2VcclxuICAgICAgICAgICAgdGhpcy5zdWJzY3JpYmVQcm9wcy5wcm9wc1twcm9wXVt0eXBlXVthdHRyaWJ1dGVOYW1lXSA9ICh2YWx1ZVByb3BOYW1lKSA/IHZhbHVlUHJvcE5hbWUgOiBwcm9wTmFtZTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuc3Vic2NyaWJlUHJvcHMubmFtZXMuaW5kZXhPZihwcm9wKSA9PSAtMSlcclxuICAgICAgICAgICAgdGhpcy5zdWJzY3JpYmVQcm9wcy5uYW1lcy5wdXNoKHByb3ApO1xyXG5cclxuICAgIH1cclxuXHJcbiAgICBpc1N1YnNjcmliZVByb3AocHJvcE5hbWU6c3RyaW5nKSB7XHJcbiAgICAgICAgcmV0dXJuICh0eXBlb2YgcHJvcE5hbWUgPT0gU1RSSU5HICYmIChwcm9wTmFtZVswXSA9PSBDT0xPTikpO1xyXG4gICAgfVxyXG5cclxuICAgIGRlZmluZVByb3AocHJvcE5hbWU6IHN0cmluZykge1xyXG4gICAgICAgIGxldCBzcGxpdFRleHQgPSBwcm9wTmFtZS5zcGxpdChET1QpO1xyXG4gICAgICAgIGlmIChzcGxpdFRleHQubGVuZ3RoID4gMSkge1xyXG4gICAgICAgICAgICBsZXQgZGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoT2JqZWN0LmdldFByb3RvdHlwZU9mKHRoaXMuY29udHJvbENvbmZpZy5wcm9wcyksIHNwbGl0VGV4dFsxXSk7XHJcbiAgICAgICAgICAgIGlmICghZGVzY3JpcHRvcilcclxuICAgICAgICAgICAgICAgIHRoaXMuY29udHJvbENvbmZpZy5kZWZpbmVQcm9wKHNwbGl0VGV4dFsxXSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59Il19