import { ElementPropsAccessor } from './element-props-accessor';
const VALUE = "value";
export class OverrideObjectProp extends ElementPropsAccessor {
    constructor(dynamicNodeConfig) { super(dynamicNodeConfig); }
    overrideValueProp() {
        let descriptor = Object.getOwnPropertyDescriptor(Object.getPrototypeOf(this.controlConfig), VALUE);
        let value = this.controlConfig.value;
        let oldValue = null;
        Object.defineProperty(this.controlConfig, VALUE, {
            get: () => { return descriptor ? descriptor.get.call(this.controlConfig) : value; },
            set: (v) => {
                value = v;
                if (this.controlConfig.formControl.value != v) {
                    this.controlConfig.formControl.setValue(v);
                    this.resetElementValue(v);
                    this.controlConfig.value = v;
                }
                else {
                    this.controlConfig.notifyValueChanged(VALUE, v, oldValue);
                    if (descriptor)
                        descriptor.set.call(this.controlConfig, v);
                    this.controlConfig.refresh();
                }
                this.controlConfig.config.value = v;
                oldValue = v;
            }
        });
        this.overrideFormControlProp();
        if (this.controlConfig.formControl.value)
            setTimeout(() => { this.resetElementValue(this.controlConfig.formControl.value); }, 50);
    }
    overrideFormControlProp() {
        let value = this.controlConfig.formControl.value;
        Object.defineProperty(this.controlConfig.formControl, VALUE, {
            get: () => { return value; },
            set: (v) => {
                value = v;
                var t = setTimeout(() => {
                    if (value != this.controlConfig.value) {
                        this.controlConfig.value = value;
                        this.resetElementValue(value);
                    }
                }, 50);
            }
        });
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3ZlcnJpZGUtb2JqZWN0LXByb3AuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Acnh3ZWIvcmVhY3RpdmUtZHluYW1pYy1mb3Jtcy8iLCJzb3VyY2VzIjpbImRvbWFpbi9kb20vb3ZlcnJpZGUtb2JqZWN0LXByb3AudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFHaEUsTUFBTSxLQUFLLEdBQVcsT0FBTyxDQUFDO0FBQzlCLE1BQU0sT0FBZ0Isa0JBQW1CLFNBQVEsb0JBQW9CO0lBSWpFLFlBQVksaUJBQW9DLElBQUksS0FBSyxDQUFDLGlCQUFpQixDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRS9FLGlCQUFpQjtRQUNiLElBQUksVUFBVSxHQUFHLE1BQU0sQ0FBQyx3QkFBd0IsQ0FBQyxNQUFNLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUNuRyxJQUFJLEtBQUssR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQztRQUNyQyxJQUFJLFFBQVEsR0FBRyxJQUFJLENBQUM7UUFDcEIsTUFBTSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsYUFBYSxFQUFFLEtBQUssRUFBRTtZQUM3QyxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsT0FBTyxVQUFVLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFBLENBQUMsQ0FBQztZQUNsRixHQUFHLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRTtnQkFDUCxLQUFLLEdBQUcsQ0FBQyxDQUFDO2dCQUNWLElBQUksSUFBSSxDQUFDLGFBQWEsQ0FBQyxXQUFXLENBQUMsS0FBSyxJQUFJLENBQUMsRUFBRTtvQkFDM0MsSUFBSSxDQUFDLGFBQWEsQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUMzQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxDQUFDLENBQUE7b0JBQ3pCLElBQUksQ0FBQyxhQUFhLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQTtpQkFDL0I7cUJBQU07b0JBQ0gsSUFBSSxDQUFDLGFBQWEsQ0FBQyxrQkFBa0IsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxFQUFFLFFBQVEsQ0FBQyxDQUFDO29CQUMxRCxJQUFJLFVBQVU7d0JBQ1YsVUFBVSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDLENBQUMsQ0FBQztvQkFDL0MsSUFBSSxDQUFDLGFBQWEsQ0FBQyxPQUFPLEVBQUUsQ0FBQztpQkFDaEM7Z0JBQ0QsSUFBSSxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQztnQkFDcEMsUUFBUSxHQUFHLENBQUMsQ0FBQztZQUNqQixDQUFDO1NBQ0osQ0FBQyxDQUFBO1FBQ0YsSUFBSSxDQUFDLHVCQUF1QixFQUFFLENBQUM7UUFDL0IsSUFBSSxJQUFJLENBQUMsYUFBYSxDQUFDLFdBQVcsQ0FBQyxLQUFLO1lBQ3BDLFVBQVUsQ0FBQyxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUE7SUFDL0YsQ0FBQztJQUVPLHVCQUF1QjtRQUMzQixJQUFJLEtBQUssR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUM7UUFDakQsTUFBTSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLFdBQVcsRUFBRSxLQUFLLEVBQUU7WUFDekQsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLE9BQU8sS0FBSyxDQUFBLENBQUMsQ0FBQztZQUMzQixHQUFHLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRTtnQkFDUCxLQUFLLEdBQUcsQ0FBQyxDQUFDO2dCQUNWLElBQUksQ0FBQyxHQUFHLFVBQVUsQ0FBQyxHQUFHLEVBQUU7b0JBQ3BCLElBQUksS0FBSyxJQUFJLElBQUksQ0FBQyxhQUFhLENBQUMsS0FBSyxFQUFFO3dCQUNuQyxJQUFJLENBQUMsYUFBYSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7d0JBQ2pDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxLQUFLLENBQUMsQ0FBQztxQkFDakM7Z0JBQ0wsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFBO1lBQ1YsQ0FBQztTQUNKLENBQUMsQ0FBQTtJQUNOLENBQUM7Q0FDSiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVsZW1lbnRQcm9wc0FjY2Vzc29yIH0gZnJvbSAnLi9lbGVtZW50LXByb3BzLWFjY2Vzc29yJztcclxuaW1wb3J0IHsgRHluYW1pY05vZGVDb25maWcgfSBmcm9tIFwiLi4vLi4vbW9kZWxzL2ludGVyZmFjZS9keW5hbWljLW5vZGUtY29uZmlnXCI7XHJcblxyXG5jb25zdCBWQUxVRTogc3RyaW5nID0gXCJ2YWx1ZVwiO1xyXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgT3ZlcnJpZGVPYmplY3RQcm9wIGV4dGVuZHMgRWxlbWVudFByb3BzQWNjZXNzb3Ige1xyXG5cclxuICAgIFxyXG5cclxuICAgIGNvbnN0cnVjdG9yKGR5bmFtaWNOb2RlQ29uZmlnOiBEeW5hbWljTm9kZUNvbmZpZykgeyBzdXBlcihkeW5hbWljTm9kZUNvbmZpZyk7IH1cclxuXHJcbiAgICBvdmVycmlkZVZhbHVlUHJvcCgpIHtcclxuICAgICAgICBsZXQgZGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoT2JqZWN0LmdldFByb3RvdHlwZU9mKHRoaXMuY29udHJvbENvbmZpZyksIFZBTFVFKTtcclxuICAgICAgICBsZXQgdmFsdWUgPSB0aGlzLmNvbnRyb2xDb25maWcudmFsdWU7XHJcbiAgICAgICAgbGV0IG9sZFZhbHVlID0gbnVsbDtcclxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcy5jb250cm9sQ29uZmlnLCBWQUxVRSwge1xyXG4gICAgICAgICAgICBnZXQ6ICgpID0+IHsgcmV0dXJuIGRlc2NyaXB0b3IgPyBkZXNjcmlwdG9yLmdldC5jYWxsKHRoaXMuY29udHJvbENvbmZpZykgOiB2YWx1ZSB9LFxyXG4gICAgICAgICAgICBzZXQ6ICh2KSA9PiB7XHJcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IHY7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5jb250cm9sQ29uZmlnLmZvcm1Db250cm9sLnZhbHVlICE9IHYpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbnRyb2xDb25maWcuZm9ybUNvbnRyb2wuc2V0VmFsdWUodik7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZXNldEVsZW1lbnRWYWx1ZSh2KVxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY29udHJvbENvbmZpZy52YWx1ZSA9IHZcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jb250cm9sQ29uZmlnLm5vdGlmeVZhbHVlQ2hhbmdlZChWQUxVRSwgdiwgb2xkVmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChkZXNjcmlwdG9yKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdG9yLnNldC5jYWxsKHRoaXMuY29udHJvbENvbmZpZywgdik7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jb250cm9sQ29uZmlnLnJlZnJlc2goKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRoaXMuY29udHJvbENvbmZpZy5jb25maWcudmFsdWUgPSB2O1xyXG4gICAgICAgICAgICAgICAgb2xkVmFsdWUgPSB2O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSlcclxuICAgICAgICB0aGlzLm92ZXJyaWRlRm9ybUNvbnRyb2xQcm9wKCk7XHJcbiAgICAgICAgaWYgKHRoaXMuY29udHJvbENvbmZpZy5mb3JtQ29udHJvbC52YWx1ZSlcclxuICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7IHRoaXMucmVzZXRFbGVtZW50VmFsdWUodGhpcy5jb250cm9sQ29uZmlnLmZvcm1Db250cm9sLnZhbHVlKTsgfSwgNTApXHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBvdmVycmlkZUZvcm1Db250cm9sUHJvcCgpIHtcclxuICAgICAgICBsZXQgdmFsdWUgPSB0aGlzLmNvbnRyb2xDb25maWcuZm9ybUNvbnRyb2wudmFsdWU7XHJcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMuY29udHJvbENvbmZpZy5mb3JtQ29udHJvbCwgVkFMVUUsIHtcclxuICAgICAgICAgICAgZ2V0OiAoKSA9PiB7IHJldHVybiB2YWx1ZSB9LFxyXG4gICAgICAgICAgICBzZXQ6ICh2KSA9PiB7XHJcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IHY7XHJcbiAgICAgICAgICAgICAgICB2YXIgdCA9IHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZSAhPSB0aGlzLmNvbnRyb2xDb25maWcudmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb250cm9sQ29uZmlnLnZhbHVlID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVzZXRFbGVtZW50VmFsdWUodmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0sIDUwKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSlcclxuICAgIH1cclxufSJdfQ==