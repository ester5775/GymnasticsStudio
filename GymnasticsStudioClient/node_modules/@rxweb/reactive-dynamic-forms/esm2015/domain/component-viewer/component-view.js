export class ComponentView {
    constructor(_component, _viewContainerRef, _componentFactoryResolver, formControlConfig, dynamicFormBuildConfig) {
        this.formControlConfig = formControlConfig;
        this.dynamicFormBuildConfig = dynamicFormBuildConfig;
        this.component = _component;
        this.viewContainerRef = _viewContainerRef;
        this.componentFactoryResolver = _componentFactoryResolver;
    }
    create() {
        let componentFactory = this.componentFactoryResolver.resolveComponentFactory(this.component);
        this.componentRef = this.viewContainerRef.createComponent(componentFactory, this.viewContainerRef.length, this.viewContainerRef.parentInjector);
        this.setParams(this.componentRef.instance);
    }
    setParams(instance) {
        if (this.formControlConfig.inputs) {
            let propNames = Object.getOwnPropertyNames(this.formControlConfig.inputs);
            for (let propName of propNames)
                this.overridePropAndSetValue(instance, propName, this.formControlConfig.inputs);
        }
        instance["controlConfig"] = this.formControlConfig;
        instance["dynamicFormBuildConfig"] = this.dynamicFormBuildConfig;
    }
    overridePropAndSetValue(instance, propName, inputs) {
        let descriptor = Object.getOwnPropertyDescriptor(Object.getPrototypeOf(inputs), propName);
        let value = '';
        if (!descriptor) {
            value = inputs[propName];
            delete inputs[propName];
        }
        Object.defineProperty(inputs, propName, {
            get() { return (descriptor) ? descriptor.get() : value; },
            set(v) { instance[propName] = v; (descriptor) ? descriptor.set.call(inputs, v) : value = v; }
        });
        instance[propName] = descriptor ? descriptor.get.call(inputs) : value;
    }
    rootNode() {
        return this.componentRef.hostView.rootNodes[0];
    }
    getComponentRef() {
        return this.componentRef;
    }
    destroy() {
        if (this.componentRef) {
            this.componentRef.destroy();
            this.componentRef = undefined;
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcG9uZW50LXZpZXcuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Acnh3ZWIvcmVhY3RpdmUtZHluYW1pYy1mb3Jtcy8iLCJzb3VyY2VzIjpbImRvbWFpbi9jb21wb25lbnQtdmlld2VyL2NvbXBvbmVudC12aWV3LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQU9BLE1BQU0sT0FBTyxhQUFhO0lBTXRCLFlBQVksVUFBNEIsRUFBRSxpQkFBbUMsRUFBRSx5QkFBbUQsRUFBUyxpQkFBbUMsRUFBUyxzQkFBNkM7UUFBekYsc0JBQWlCLEdBQWpCLGlCQUFpQixDQUFrQjtRQUFTLDJCQUFzQixHQUF0QixzQkFBc0IsQ0FBdUI7UUFDaE8sSUFBSSxDQUFDLFNBQVMsR0FBRyxVQUFVLENBQUM7UUFDNUIsSUFBSSxDQUFDLGdCQUFnQixHQUFHLGlCQUFpQixDQUFDO1FBQzFDLElBQUksQ0FBQyx3QkFBd0IsR0FBRyx5QkFBeUIsQ0FBQztJQUM5RCxDQUFDO0lBRUQsTUFBTTtRQUNGLElBQUksZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLHdCQUF3QixDQUFDLHVCQUF1QixDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUM3RixJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxlQUFlLENBQUMsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsY0FBYyxDQUFDLENBQUM7UUFDaEosSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQy9DLENBQUM7SUFFTyxTQUFTLENBQUMsUUFBZ0M7UUFDOUMsSUFBSSxJQUFJLENBQUMsaUJBQWlCLENBQUMsTUFBTSxFQUFFO1lBQy9CLElBQUksU0FBUyxHQUFHLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDMUUsS0FBSyxJQUFJLFFBQVEsSUFBSSxTQUFTO2dCQUMxQixJQUFJLENBQUMsdUJBQXVCLENBQUMsUUFBUSxFQUFFLFFBQVEsRUFBRSxJQUFJLENBQUMsaUJBQWlCLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdkY7UUFDRCxRQUFRLENBQUMsZUFBZSxDQUFDLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixDQUFDO1FBQ25ELFFBQVEsQ0FBQyx3QkFBd0IsQ0FBQyxHQUFHLElBQUksQ0FBQyxzQkFBc0IsQ0FBQztJQUNyRSxDQUFDO0lBRUQsdUJBQXVCLENBQUMsUUFBYSxFQUFFLFFBQWdCLEVBQUUsTUFBVztRQUNoRSxJQUFJLFVBQVUsR0FBRyxNQUFNLENBQUMsd0JBQXdCLENBQUMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUMsRUFBRSxRQUFRLENBQUMsQ0FBQTtRQUN6RixJQUFJLEtBQUssR0FBRyxFQUFFLENBQUM7UUFDZixJQUFJLENBQUMsVUFBVSxFQUFFO1lBQ2IsS0FBSyxHQUFHLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUN6QixPQUFPLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQztTQUMzQjtRQUNELE1BQU0sQ0FBQyxjQUFjLENBQUMsTUFBTSxFQUFFLFFBQVEsRUFBRTtZQUNwQyxHQUFHLEtBQUssT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQSxDQUFDLENBQUM7WUFDeEQsR0FBRyxDQUFDLENBQUMsSUFBSSxRQUFRLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUNoRyxDQUFDLENBQUE7UUFDRixRQUFRLENBQUMsUUFBUSxDQUFDLEdBQUcsVUFBVSxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDO0lBQzFFLENBQUM7SUFFRCxRQUFRO1FBQ0osT0FBUSxJQUFJLENBQUMsWUFBWSxDQUFDLFFBQWlDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBZ0IsQ0FBQztJQUM1RixDQUFDO0lBRUQsZUFBZTtRQUNYLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQztJQUM3QixDQUFDO0lBRUQsT0FBTztRQUNILElBQUksSUFBSSxDQUFDLFlBQVksRUFDckI7WUFDSSxJQUFJLENBQUMsWUFBWSxDQUFDLE9BQU8sRUFBRSxDQUFDO1lBQzVCLElBQUksQ0FBQyxZQUFZLEdBQUcsU0FBUyxDQUFDO1NBQ2pDO0lBQ0wsQ0FBQztDQUNKIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVmlld0NvbnRhaW5lclJlZiwgQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyLCBDb21wb25lbnRSZWYsIEVtYmVkZGVkVmlld1JlZiB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCJcclxuaW1wb3J0IHsgRm9ybUNvbnRyb2xDb25maWcgfSBmcm9tICcuLi8uLi9zZXJ2aWNlcy9mb3JtLWNvbnRyb2wtY29uZmlnJ1xyXG5pbXBvcnQgeyBEeW5hbWljRm9ybUJ1aWxkQ29uZmlnIH0gZnJvbSBcIi4uLy4uL21vZGVscy9pbnRlcmZhY2UvZHluYW1pYy1mb3JtLWJ1aWxkLWNvbmZpZ1wiXHJcbmV4cG9ydCBpbnRlcmZhY2UgQ29tcG9uZW50VHlwZTxUPiB7XHJcbiAgICBuZXcgKC4uLmFyZ3M6IGFueVtdKTogVDtcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIENvbXBvbmVudFZpZXc8VD4ge1xyXG4gICAgcHJpdmF0ZSBjb21wb25lbnQ6IENvbXBvbmVudFR5cGU8VD47XHJcbiAgICBwcml2YXRlIHZpZXdDb250YWluZXJSZWY6IFZpZXdDb250YWluZXJSZWY7XHJcbiAgICBwcml2YXRlIGNvbXBvbmVudEZhY3RvcnlSZXNvbHZlcjogQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyO1xyXG4gICAgcHJpdmF0ZSBjb21wb25lbnRSZWY6IENvbXBvbmVudFJlZjxUPjtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihfY29tcG9uZW50OiBDb21wb25lbnRUeXBlPFQ+LCBfdmlld0NvbnRhaW5lclJlZjogVmlld0NvbnRhaW5lclJlZiwgX2NvbXBvbmVudEZhY3RvcnlSZXNvbHZlcjogQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyLHByaXZhdGUgZm9ybUNvbnRyb2xDb25maWc6Rm9ybUNvbnRyb2xDb25maWcscHJpdmF0ZSBkeW5hbWljRm9ybUJ1aWxkQ29uZmlnOkR5bmFtaWNGb3JtQnVpbGRDb25maWcpIHtcclxuICAgICAgICB0aGlzLmNvbXBvbmVudCA9IF9jb21wb25lbnQ7XHJcbiAgICAgICAgdGhpcy52aWV3Q29udGFpbmVyUmVmID0gX3ZpZXdDb250YWluZXJSZWY7XHJcbiAgICAgICAgdGhpcy5jb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIgPSBfY29tcG9uZW50RmFjdG9yeVJlc29sdmVyO1xyXG4gICAgfVxyXG5cclxuICAgIGNyZWF0ZSgpOiB2b2lkIHtcclxuICAgICAgICBsZXQgY29tcG9uZW50RmFjdG9yeSA9IHRoaXMuY29tcG9uZW50RmFjdG9yeVJlc29sdmVyLnJlc29sdmVDb21wb25lbnRGYWN0b3J5KHRoaXMuY29tcG9uZW50KTtcclxuICAgICAgICB0aGlzLmNvbXBvbmVudFJlZiA9IHRoaXMudmlld0NvbnRhaW5lclJlZi5jcmVhdGVDb21wb25lbnQoY29tcG9uZW50RmFjdG9yeSwgdGhpcy52aWV3Q29udGFpbmVyUmVmLmxlbmd0aCwgdGhpcy52aWV3Q29udGFpbmVyUmVmLnBhcmVudEluamVjdG9yKTtcclxuICAgICAgICB0aGlzLnNldFBhcmFtcyh0aGlzLmNvbXBvbmVudFJlZi5pbnN0YW5jZSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBzZXRQYXJhbXMoaW5zdGFuY2U6IHsgW2tleTogc3RyaW5nXTogYW55IH0pIHtcclxuICAgICAgICBpZiAodGhpcy5mb3JtQ29udHJvbENvbmZpZy5pbnB1dHMpIHtcclxuICAgICAgICAgICAgbGV0IHByb3BOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRoaXMuZm9ybUNvbnRyb2xDb25maWcuaW5wdXRzKTtcclxuICAgICAgICAgICAgZm9yIChsZXQgcHJvcE5hbWUgb2YgcHJvcE5hbWVzKSBcclxuICAgICAgICAgICAgICAgIHRoaXMub3ZlcnJpZGVQcm9wQW5kU2V0VmFsdWUoaW5zdGFuY2UsIHByb3BOYW1lLCB0aGlzLmZvcm1Db250cm9sQ29uZmlnLmlucHV0cyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGluc3RhbmNlW1wiY29udHJvbENvbmZpZ1wiXSA9IHRoaXMuZm9ybUNvbnRyb2xDb25maWc7XHJcbiAgICAgICAgaW5zdGFuY2VbXCJkeW5hbWljRm9ybUJ1aWxkQ29uZmlnXCJdID0gdGhpcy5keW5hbWljRm9ybUJ1aWxkQ29uZmlnO1xyXG4gICAgfVxyXG5cclxuICAgIG92ZXJyaWRlUHJvcEFuZFNldFZhbHVlKGluc3RhbmNlOiBhbnksIHByb3BOYW1lOiBzdHJpbmcsIGlucHV0czogYW55KSB7XHJcbiAgICAgICAgbGV0IGRlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE9iamVjdC5nZXRQcm90b3R5cGVPZihpbnB1dHMpLCBwcm9wTmFtZSlcclxuICAgICAgICBsZXQgdmFsdWUgPSAnJztcclxuICAgICAgICBpZiAoIWRlc2NyaXB0b3IpIHtcclxuICAgICAgICAgICAgdmFsdWUgPSBpbnB1dHNbcHJvcE5hbWVdO1xyXG4gICAgICAgICAgICBkZWxldGUgaW5wdXRzW3Byb3BOYW1lXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGlucHV0cywgcHJvcE5hbWUsIHtcclxuICAgICAgICAgICAgZ2V0KCkgeyByZXR1cm4gKGRlc2NyaXB0b3IpID8gZGVzY3JpcHRvci5nZXQoKSA6IHZhbHVlIH0sXHJcbiAgICAgICAgICAgIHNldCh2KSB7IGluc3RhbmNlW3Byb3BOYW1lXSA9IHY7IChkZXNjcmlwdG9yKSA/IGRlc2NyaXB0b3Iuc2V0LmNhbGwoaW5wdXRzLCB2KSA6IHZhbHVlID0gdjsgfVxyXG4gICAgICAgIH0pXHJcbiAgICAgICAgaW5zdGFuY2VbcHJvcE5hbWVdID0gZGVzY3JpcHRvciA/IGRlc2NyaXB0b3IuZ2V0LmNhbGwoaW5wdXRzKSA6IHZhbHVlO1xyXG4gICAgfVxyXG5cclxuICAgIHJvb3ROb2RlKCk6IEhUTUxFbGVtZW50IHtcclxuICAgICAgICByZXR1cm4gKHRoaXMuY29tcG9uZW50UmVmLmhvc3RWaWV3IGFzIEVtYmVkZGVkVmlld1JlZjxhbnk+KS5yb290Tm9kZXNbMF0gYXMgSFRNTEVsZW1lbnQ7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0Q29tcG9uZW50UmVmKCk6IENvbXBvbmVudFJlZjxhbnk+IHtcclxuICAgICAgICByZXR1cm4gdGhpcy5jb21wb25lbnRSZWY7XHJcbiAgICB9XHJcblxyXG4gICAgZGVzdHJveSgpOnZvaWQge1xyXG4gICAgICAgIGlmICh0aGlzLmNvbXBvbmVudFJlZilcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRoaXMuY29tcG9uZW50UmVmLmRlc3Ryb3koKTtcclxuICAgICAgICAgICAgdGhpcy5jb21wb25lbnRSZWYgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59Il19