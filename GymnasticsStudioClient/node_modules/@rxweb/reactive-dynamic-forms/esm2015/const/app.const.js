export const FILE = 'file';
export const RANGE = 'range';
export const CHECKBOX = 'checkbox';
export const BLANK = "";
export const HIDE = "hide";
export const PROP = "prop";
export const ATTR = "attr";
export const EVENTS = "events";
export const FOCUS = "focus";
export const DESCRIPTION = "description";
export const LABEL = "label";
export const READONLY = "readonly";
export const INNER_TEXT = "innertext";
export const CLASS = "class";
export const STYLE = "style";
export const RXWEB = "rxweb-";
export const RADIO = "radio";
export const CHECKED = "checked";
export const STRING = "string";
export const FUNCTION = "function";
export const SQUARE = "{";
export const COLON = ":";
export const CLICK = "click";
export const INPUT = "input";
export const TEXT = "text";
export const CONTROL = 'control';
export const BLUR = 'blur';
export const SELECT = "select";
export const TEXTAREA = "textarea";
export const BOOLEAN = "boolean";
export const NONE = "none";
export const DISPLAY = "display";
export const ADDITIONAL_CLASS = "additional-class";
export const SELECT_MULTIPLE = "select-multiple";
export const SOURCE = "source";
export const RXWEB_ID_STRING = "string";
export const ADVANCE = "advance";
export const SQUARE_CONTROL = "[control]";
export const SQUARE_LABEL = "[label]";
export const SQUARE_SMALL = "[small]";
export const SQUARE_ERROR = "[error]";
export const FILTER = "filter";
export const INPUT_TEXT = "input-text";
export const PREPEND_LEFT = "prepend-left";
export const PREPEND_RIGHT = "prepend-right";
export const PREPEND_BOTH = "prepend-both";
export const CONDITIONAL_VALIDATOR = "conditionalValidator";
export const INLINE = "inline";
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwLmNvbnN0LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHJ4d2ViL3JlYWN0aXZlLWR5bmFtaWMtZm9ybXMvIiwic291cmNlcyI6WyJjb25zdC9hcHAuY29uc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxDQUFDLE1BQU0sSUFBSSxHQUFZLE1BQU0sQ0FBQztBQUVwQyxNQUFNLENBQUMsTUFBTSxLQUFLLEdBQVUsT0FBTyxDQUFDO0FBRXBDLE1BQU0sQ0FBQyxNQUFNLFFBQVEsR0FBVSxVQUFVLENBQUM7QUFFMUMsTUFBTSxDQUFDLE1BQU0sS0FBSyxHQUFXLEVBQUUsQ0FBQztBQUVoQyxNQUFNLENBQUMsTUFBTSxJQUFJLEdBQVcsTUFBTSxDQUFDO0FBRW5DLE1BQU0sQ0FBQyxNQUFNLElBQUksR0FBVyxNQUFNLENBQUM7QUFFbkMsTUFBTSxDQUFDLE1BQU0sSUFBSSxHQUFXLE1BQU0sQ0FBQztBQUVuQyxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQVcsUUFBUSxDQUFDO0FBRXZDLE1BQU0sQ0FBQyxNQUFNLEtBQUssR0FBVyxPQUFPLENBQUM7QUFFckMsTUFBTSxDQUFDLE1BQU0sV0FBVyxHQUFXLGFBQWEsQ0FBQztBQUVqRCxNQUFNLENBQUMsTUFBTSxLQUFLLEdBQVcsT0FBTyxDQUFDO0FBRXJDLE1BQU0sQ0FBQyxNQUFNLFFBQVEsR0FBVyxVQUFVLENBQUM7QUFFM0MsTUFBTSxDQUFDLE1BQU0sVUFBVSxHQUFXLFdBQVcsQ0FBQztBQUU5QyxNQUFNLENBQUMsTUFBTSxLQUFLLEdBQVcsT0FBTyxDQUFDO0FBRXJDLE1BQU0sQ0FBQyxNQUFNLEtBQUssR0FBVyxPQUFPLENBQUM7QUFFckMsTUFBTSxDQUFDLE1BQU0sS0FBSyxHQUFXLFFBQVEsQ0FBQztBQUV0QyxNQUFNLENBQUMsTUFBTSxLQUFLLEdBQVcsT0FBTyxDQUFDO0FBRXJDLE1BQU0sQ0FBQyxNQUFNLE9BQU8sR0FBVyxTQUFTLENBQUM7QUFFekMsTUFBTSxDQUFDLE1BQU0sTUFBTSxHQUFXLFFBQVEsQ0FBQztBQUV2QyxNQUFNLENBQUMsTUFBTSxRQUFRLEdBQVcsVUFBVSxDQUFDO0FBRTNDLE1BQU0sQ0FBQyxNQUFNLE1BQU0sR0FBVyxHQUFHLENBQUM7QUFFbEMsTUFBTSxDQUFDLE1BQU0sS0FBSyxHQUFXLEdBQUcsQ0FBQztBQUVqQyxNQUFNLENBQUMsTUFBTSxLQUFLLEdBQVcsT0FBTyxDQUFDO0FBRXJDLE1BQU0sQ0FBQyxNQUFNLEtBQUssR0FBVyxPQUFPLENBQUM7QUFFckMsTUFBTSxDQUFDLE1BQU0sSUFBSSxHQUFVLE1BQU0sQ0FBQztBQUVsQyxNQUFNLENBQUMsTUFBTSxPQUFPLEdBQVcsU0FBUyxDQUFDO0FBRXpDLE1BQU0sQ0FBQyxNQUFNLElBQUksR0FBVyxNQUFNLENBQUM7QUFFbkMsTUFBTSxDQUFDLE1BQU0sTUFBTSxHQUFXLFFBQVEsQ0FBQztBQUV2QyxNQUFNLENBQUMsTUFBTSxRQUFRLEdBQVcsVUFBVSxDQUFDO0FBRTNDLE1BQU0sQ0FBQyxNQUFNLE9BQU8sR0FBVyxTQUFTLENBQUM7QUFFekMsTUFBTSxDQUFDLE1BQU0sSUFBSSxHQUFXLE1BQU0sQ0FBQztBQUVuQyxNQUFNLENBQUMsTUFBTSxPQUFPLEdBQVcsU0FBUyxDQUFDO0FBRXpDLE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFXLGtCQUFrQixDQUFDO0FBRTNELE1BQU0sQ0FBQyxNQUFNLGVBQWUsR0FBVyxpQkFBaUIsQ0FBQztBQUV6RCxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQVcsUUFBUSxDQUFDO0FBRXZDLE1BQU0sQ0FBQyxNQUFNLGVBQWUsR0FBVyxRQUFRLENBQUM7QUFFaEQsTUFBTSxDQUFDLE1BQU0sT0FBTyxHQUFXLFNBQVMsQ0FBQztBQUV6QyxNQUFNLENBQUMsTUFBTSxjQUFjLEdBQVcsV0FBVyxDQUFDO0FBRWxELE1BQU0sQ0FBQyxNQUFNLFlBQVksR0FBVyxTQUFTLENBQUM7QUFFOUMsTUFBTSxDQUFDLE1BQU0sWUFBWSxHQUFXLFNBQVMsQ0FBQztBQUU5QyxNQUFNLENBQUMsTUFBTSxZQUFZLEdBQVcsU0FBUyxDQUFDO0FBRTlDLE1BQU0sQ0FBQyxNQUFNLE1BQU0sR0FBVyxRQUFRLENBQUM7QUFFdkMsTUFBTSxDQUFDLE1BQU0sVUFBVSxHQUFXLFlBQVksQ0FBQztBQUUvQyxNQUFNLENBQUMsTUFBTSxZQUFZLEdBQVcsY0FBYyxDQUFDO0FBRW5ELE1BQU0sQ0FBQyxNQUFNLGFBQWEsR0FBVyxlQUFlLENBQUM7QUFFckQsTUFBTSxDQUFDLE1BQU0sWUFBWSxHQUFXLGNBQWMsQ0FBQztBQUVuRCxNQUFNLENBQUMsTUFBTSxxQkFBcUIsR0FBVyxzQkFBc0IsQ0FBQTtBQUVuRSxNQUFNLENBQUMsTUFBTSxNQUFNLEdBQUcsUUFBUSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IEZJTEUgOiBzdHJpbmcgPSAnZmlsZSc7XHJcblxyXG5leHBvcnQgY29uc3QgUkFOR0U6c3RyaW5nID0gJ3JhbmdlJztcclxuXHJcbmV4cG9ydCBjb25zdCBDSEVDS0JPWDpzdHJpbmcgPSAnY2hlY2tib3gnO1xyXG5cclxuZXhwb3J0IGNvbnN0IEJMQU5LOiBzdHJpbmcgPSBcIlwiO1xyXG5cclxuZXhwb3J0IGNvbnN0IEhJREU6IHN0cmluZyA9IFwiaGlkZVwiO1xyXG5cclxuZXhwb3J0IGNvbnN0IFBST1A6IHN0cmluZyA9IFwicHJvcFwiO1xyXG5cclxuZXhwb3J0IGNvbnN0IEFUVFI6IHN0cmluZyA9IFwiYXR0clwiO1xyXG5cclxuZXhwb3J0IGNvbnN0IEVWRU5UUzogc3RyaW5nID0gXCJldmVudHNcIjtcclxuXHJcbmV4cG9ydCBjb25zdCBGT0NVUzogc3RyaW5nID0gXCJmb2N1c1wiO1xyXG5cclxuZXhwb3J0IGNvbnN0IERFU0NSSVBUSU9OOiBzdHJpbmcgPSBcImRlc2NyaXB0aW9uXCI7XHJcblxyXG5leHBvcnQgY29uc3QgTEFCRUw6IHN0cmluZyA9IFwibGFiZWxcIjtcclxuXHJcbmV4cG9ydCBjb25zdCBSRUFET05MWTogc3RyaW5nID0gXCJyZWFkb25seVwiO1xyXG5cclxuZXhwb3J0IGNvbnN0IElOTkVSX1RFWFQ6IHN0cmluZyA9IFwiaW5uZXJ0ZXh0XCI7XHJcblxyXG5leHBvcnQgY29uc3QgQ0xBU1M6IHN0cmluZyA9IFwiY2xhc3NcIjtcclxuXHJcbmV4cG9ydCBjb25zdCBTVFlMRTogc3RyaW5nID0gXCJzdHlsZVwiO1xyXG5cclxuZXhwb3J0IGNvbnN0IFJYV0VCOiBzdHJpbmcgPSBcInJ4d2ViLVwiO1xyXG5cclxuZXhwb3J0IGNvbnN0IFJBRElPOiBzdHJpbmcgPSBcInJhZGlvXCI7XHJcblxyXG5leHBvcnQgY29uc3QgQ0hFQ0tFRDogc3RyaW5nID0gXCJjaGVja2VkXCI7XHJcblxyXG5leHBvcnQgY29uc3QgU1RSSU5HOiBzdHJpbmcgPSBcInN0cmluZ1wiO1xyXG5cclxuZXhwb3J0IGNvbnN0IEZVTkNUSU9OOiBzdHJpbmcgPSBcImZ1bmN0aW9uXCI7XHJcblxyXG5leHBvcnQgY29uc3QgU1FVQVJFOiBzdHJpbmcgPSBcIntcIjtcclxuXHJcbmV4cG9ydCBjb25zdCBDT0xPTjogc3RyaW5nID0gXCI6XCI7XHJcblxyXG5leHBvcnQgY29uc3QgQ0xJQ0s6IHN0cmluZyA9IFwiY2xpY2tcIjtcclxuXHJcbmV4cG9ydCBjb25zdCBJTlBVVDogc3RyaW5nID0gXCJpbnB1dFwiO1xyXG5cclxuZXhwb3J0IGNvbnN0IFRFWFQ6c3RyaW5nID0gXCJ0ZXh0XCI7XHJcblxyXG5leHBvcnQgY29uc3QgQ09OVFJPTDogc3RyaW5nID0gJ2NvbnRyb2wnO1xyXG5cclxuZXhwb3J0IGNvbnN0IEJMVVI6IHN0cmluZyA9ICdibHVyJztcclxuXHJcbmV4cG9ydCBjb25zdCBTRUxFQ1Q6IHN0cmluZyA9IFwic2VsZWN0XCI7XHJcblxyXG5leHBvcnQgY29uc3QgVEVYVEFSRUE6IHN0cmluZyA9IFwidGV4dGFyZWFcIjtcclxuXHJcbmV4cG9ydCBjb25zdCBCT09MRUFOOiBzdHJpbmcgPSBcImJvb2xlYW5cIjtcclxuXHJcbmV4cG9ydCBjb25zdCBOT05FOiBzdHJpbmcgPSBcIm5vbmVcIjtcclxuXHJcbmV4cG9ydCBjb25zdCBESVNQTEFZOiBzdHJpbmcgPSBcImRpc3BsYXlcIjtcclxuXHJcbmV4cG9ydCBjb25zdCBBRERJVElPTkFMX0NMQVNTOiBzdHJpbmcgPSBcImFkZGl0aW9uYWwtY2xhc3NcIjtcclxuXHJcbmV4cG9ydCBjb25zdCBTRUxFQ1RfTVVMVElQTEU6IHN0cmluZyA9IFwic2VsZWN0LW11bHRpcGxlXCI7XHJcblxyXG5leHBvcnQgY29uc3QgU09VUkNFOiBzdHJpbmcgPSBcInNvdXJjZVwiO1xyXG5cclxuZXhwb3J0IGNvbnN0IFJYV0VCX0lEX1NUUklORzogc3RyaW5nID0gXCJzdHJpbmdcIjtcclxuXHJcbmV4cG9ydCBjb25zdCBBRFZBTkNFOiBzdHJpbmcgPSBcImFkdmFuY2VcIjtcclxuXHJcbmV4cG9ydCBjb25zdCBTUVVBUkVfQ09OVFJPTDogc3RyaW5nID0gXCJbY29udHJvbF1cIjtcclxuXHJcbmV4cG9ydCBjb25zdCBTUVVBUkVfTEFCRUw6IHN0cmluZyA9IFwiW2xhYmVsXVwiO1xyXG5cclxuZXhwb3J0IGNvbnN0IFNRVUFSRV9TTUFMTDogc3RyaW5nID0gXCJbc21hbGxdXCI7XHJcblxyXG5leHBvcnQgY29uc3QgU1FVQVJFX0VSUk9SOiBzdHJpbmcgPSBcIltlcnJvcl1cIjtcclxuXHJcbmV4cG9ydCBjb25zdCBGSUxURVI6IHN0cmluZyA9IFwiZmlsdGVyXCI7XHJcblxyXG5leHBvcnQgY29uc3QgSU5QVVRfVEVYVDogc3RyaW5nID0gXCJpbnB1dC10ZXh0XCI7XHJcblxyXG5leHBvcnQgY29uc3QgUFJFUEVORF9MRUZUOiBzdHJpbmcgPSBcInByZXBlbmQtbGVmdFwiO1xyXG5cclxuZXhwb3J0IGNvbnN0IFBSRVBFTkRfUklHSFQ6IHN0cmluZyA9IFwicHJlcGVuZC1yaWdodFwiO1xyXG5cclxuZXhwb3J0IGNvbnN0IFBSRVBFTkRfQk9USDogc3RyaW5nID0gXCJwcmVwZW5kLWJvdGhcIjtcclxuXHJcbmV4cG9ydCBjb25zdCBDT05ESVRJT05BTF9WQUxJREFUT1I6IHN0cmluZyA9IFwiY29uZGl0aW9uYWxWYWxpZGF0b3JcIlxyXG5cclxuZXhwb3J0IGNvbnN0IElOTElORSA9IFwiaW5saW5lXCI7Il19