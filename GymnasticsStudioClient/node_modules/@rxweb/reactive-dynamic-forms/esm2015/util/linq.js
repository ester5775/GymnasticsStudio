export class Linq {
    static extractArguments(splitTexts) {
        let expressionArguments = ["this"];
        if (splitTexts && splitTexts[0])
            splitTexts[0].split(",").forEach(t => expressionArguments.push(t.trim().replace("(", "").replace(")", "")));
        return expressionArguments;
    }
    static dynamicConfigParser(expressionString) {
        let controlNames = [];
        let expressionArguments = Linq.extractArguments(expressionString.match(/\(([^)]+)\)/g));
        let splitString = expressionString.replace(new RegExp(/\r?\n|\r|;/g), ' ').replace(/["%()\{}=\\?Â´`'#<>|,;:+-]+/g, " ").split(/ /g);
        if (expressionArguments.length > 3)
            expressionArguments.splice(expressionArguments.length - 1, 1);
        splitString.forEach((t, i) => {
            if (t) {
                if (t.includes("controlsConfig.")) {
                    let splitText = t.split("controlsConfig.");
                    if (splitText.length > 1)
                        controlNames.push(splitText[1].split(".")[0]);
                }
                else if (t.includes("controlsConfig["))
                    controlNames.push(splitString[i + 1]);
            }
        });
        return controlNames;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlucS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0ByeHdlYi9yZWFjdGl2ZS1keW5hbWljLWZvcm1zLyIsInNvdXJjZXMiOlsidXRpbC9saW5xLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE1BQU0sT0FBTyxJQUFJO0lBQ1QsTUFBTSxDQUFDLGdCQUFnQixDQUFDLFVBQW9CO1FBQzVDLElBQUksbUJBQW1CLEdBQWEsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUM3QyxJQUFJLFVBQVUsSUFBSSxVQUFVLENBQUMsQ0FBQyxDQUFDO1lBQzNCLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsbUJBQW1CLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2hILE9BQU8sbUJBQW1CLENBQUM7SUFDL0IsQ0FBQztJQUVELE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxnQkFBd0I7UUFDL0MsSUFBSSxZQUFZLEdBQUcsRUFBRSxDQUFDO1FBQ3RCLElBQUksbUJBQW1CLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFDLGdCQUFnQixDQUFDLEtBQUssQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDO1FBQ3hGLElBQUksV0FBVyxHQUFhLGdCQUFnQixDQUFDLE9BQU8sQ0FBQyxJQUFJLE1BQU0sQ0FBQyxhQUFhLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxPQUFPLENBQUMsNkJBQTZCLEVBQUUsR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzdJLElBQUksbUJBQW1CLENBQUMsTUFBTSxHQUFHLENBQUM7WUFDOUIsbUJBQW1CLENBQUMsTUFBTSxDQUFDLG1CQUFtQixDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUE7UUFDakUsV0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUN6QixJQUFJLENBQUMsRUFBRTtnQkFDSCxJQUFJLENBQUMsQ0FBQyxRQUFRLENBQUMsaUJBQWlCLENBQUMsRUFBRTtvQkFDL0IsSUFBSSxTQUFTLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO29CQUMzQyxJQUFJLFNBQVMsQ0FBQyxNQUFNLEdBQUcsQ0FBQzt3QkFDcEIsWUFBWSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7aUJBQ3JEO3FCQUFNLElBQUksQ0FBQyxDQUFDLFFBQVEsQ0FBQyxpQkFBaUIsQ0FBQztvQkFDcEMsWUFBWSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxHQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7YUFDM0M7UUFDTCxDQUFDLENBQUMsQ0FBQTtRQUNGLE9BQU8sWUFBWSxDQUFDO0lBQ3hCLENBQUM7Q0FDSiIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjbGFzcyBMaW5xe1xyXG5wcml2YXRlIHN0YXRpYyBleHRyYWN0QXJndW1lbnRzKHNwbGl0VGV4dHM6IHN0cmluZ1tdKTogc3RyaW5nW10ge1xyXG4gICAgICAgIGxldCBleHByZXNzaW9uQXJndW1lbnRzOiBzdHJpbmdbXSA9IFtcInRoaXNcIl07XHJcbiAgICAgICAgaWYgKHNwbGl0VGV4dHMgJiYgc3BsaXRUZXh0c1swXSlcclxuICAgICAgICAgICAgc3BsaXRUZXh0c1swXS5zcGxpdChcIixcIikuZm9yRWFjaCh0ID0+IGV4cHJlc3Npb25Bcmd1bWVudHMucHVzaCh0LnRyaW0oKS5yZXBsYWNlKFwiKFwiLCBcIlwiKS5yZXBsYWNlKFwiKVwiLCBcIlwiKSkpO1xyXG4gICAgICAgIHJldHVybiBleHByZXNzaW9uQXJndW1lbnRzO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBkeW5hbWljQ29uZmlnUGFyc2VyKGV4cHJlc3Npb25TdHJpbmc6IHN0cmluZyk6IGFueVtdIHtcclxuICAgICAgICBsZXQgY29udHJvbE5hbWVzID0gW107XHJcbiAgICAgICAgbGV0IGV4cHJlc3Npb25Bcmd1bWVudHMgPSBMaW5xLmV4dHJhY3RBcmd1bWVudHMoZXhwcmVzc2lvblN0cmluZy5tYXRjaCgvXFwoKFteKV0rKVxcKS9nKSk7XHJcbiAgICAgICAgbGV0IHNwbGl0U3RyaW5nOiBzdHJpbmdbXSA9IGV4cHJlc3Npb25TdHJpbmcucmVwbGFjZShuZXcgUmVnRXhwKC9cXHI/XFxufFxccnw7L2cpLCAnICcpLnJlcGxhY2UoL1tcIiUoKVxce309XFxcXD/CtGAnIzw+fCw7OistXSsvZywgXCIgXCIpLnNwbGl0KC8gL2cpO1xyXG4gICAgICAgIGlmIChleHByZXNzaW9uQXJndW1lbnRzLmxlbmd0aCA+IDMpXHJcbiAgICAgICAgICAgIGV4cHJlc3Npb25Bcmd1bWVudHMuc3BsaWNlKGV4cHJlc3Npb25Bcmd1bWVudHMubGVuZ3RoIC0gMSwgMSlcclxuICAgICAgICBzcGxpdFN0cmluZy5mb3JFYWNoKCh0LCBpKSA9PiB7XHJcbiAgICAgICAgICAgIGlmICh0KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodC5pbmNsdWRlcyhcImNvbnRyb2xzQ29uZmlnLlwiKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBzcGxpdFRleHQgPSB0LnNwbGl0KFwiY29udHJvbHNDb25maWcuXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChzcGxpdFRleHQubGVuZ3RoID4gMSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbE5hbWVzLnB1c2goc3BsaXRUZXh0WzFdLnNwbGl0KFwiLlwiKVswXSk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHQuaW5jbHVkZXMoXCJjb250cm9sc0NvbmZpZ1tcIikpIFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2xOYW1lcy5wdXNoKHNwbGl0U3RyaW5nW2krMV0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSlcclxuICAgICAgICByZXR1cm4gY29udHJvbE5hbWVzO1xyXG4gICAgfVxyXG59XHJcblxyXG4iXX0=