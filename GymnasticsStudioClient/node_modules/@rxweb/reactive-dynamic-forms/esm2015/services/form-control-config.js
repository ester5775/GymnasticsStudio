import { BaseFormControlConfig } from './base-form-control-config';
import { dynamicContainer } from "../core/dynamicContainer";
export class FormControlConfig extends BaseFormControlConfig {
    constructor(fieldConfig, controlsConfig, notificationId) {
        super(controlsConfig, notificationId);
        this.controlsConfig = controlsConfig;
        this.overrides = {};
        this.config = fieldConfig;
        this.overrideProperty();
        this.value = fieldConfig.value;
        super.checkFilterFunction();
        this.props = this.config.props || Object.create({});
        this.setNotification();
    }
    overrideProperty() {
        if (this.config.overrideProps) {
            this.config.overrideProps.forEach(t => {
                let propInfo = dynamicContainer.getOverrideProp(t);
                this.overrideProp(propInfo);
            });
        }
    }
    set formControl(value) {
        this._formControl = value;
        setTimeout(() => this.overrideErrorsProp(this._formControl), 10);
    }
    get formControl() {
        return this._formControl;
    }
    get errorMessage() {
        return this.formControl.errorMessage;
    }
    get prependText() {
        return this.config.ui ? this.config.ui.prependText : '';
    }
}
export class ControlConfig extends FormControlConfig {
    constructor(fieldConfig, controlsConfig) {
        super(fieldConfig, controlsConfig, 0);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybS1jb250cm9sLWNvbmZpZy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0ByeHdlYi9yZWFjdGl2ZS1keW5hbWljLWZvcm1zLyIsInNvdXJjZXMiOlsic2VydmljZXMvZm9ybS1jb250cm9sLWNvbmZpZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFHQSxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQTtBQUVsRSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUc1RCxNQUFNLE9BQWdCLGlCQUFrQixTQUFRLHFCQUFxQjtJQUdqRSxZQUFZLFdBQW1DLEVBQVMsY0FBb0QsRUFBQyxjQUFxQjtRQUM5SCxLQUFLLENBQUMsY0FBYyxFQUFFLGNBQWMsQ0FBQyxDQUFDO1FBRGMsbUJBQWMsR0FBZCxjQUFjLENBQXNDO1FBbUI1RyxjQUFTLEdBQU8sRUFBRSxDQUFDO1FBakJmLElBQUksQ0FBQyxNQUFNLEdBQUcsV0FBVyxDQUFDO1FBQzNCLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxLQUFLLEdBQUcsV0FBVyxDQUFDLEtBQUssQ0FBQztRQUMvQixLQUFLLENBQUMsbUJBQW1CLEVBQUUsQ0FBQztRQUM1QixJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxJQUFJLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDcEQsSUFBSSxDQUFDLGVBQWUsRUFBRSxDQUFDO0lBQzNCLENBQUM7SUFFTyxnQkFBZ0I7UUFDcEIsSUFBRyxJQUFJLENBQUMsTUFBTSxDQUFDLGFBQWEsRUFBQztZQUN6QixJQUFJLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFBLEVBQUU7Z0JBQ2pDLElBQUksUUFBUSxHQUFHLGdCQUFnQixDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDbkQsSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUNoQyxDQUFDLENBQUMsQ0FBQTtTQUNMO0lBQ0wsQ0FBQztJQTJCRCxJQUFJLFdBQVcsQ0FBQyxLQUFvQjtRQUNoQyxJQUFJLENBQUMsWUFBWSxHQUFHLEtBQUssQ0FBQztRQUMxQixVQUFVLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUNyRSxDQUFDO0lBRUQsSUFBSSxXQUFXO1FBQ1gsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDO0lBQzdCLENBQUM7SUFFRCxJQUFJLFlBQVk7UUFDWixPQUFPLElBQUksQ0FBQyxXQUFXLENBQUMsWUFBWSxDQUFDO0lBQ3pDLENBQUM7SUFFRCxJQUFJLFdBQVc7UUFDWCxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztJQUM1RCxDQUFDO0NBQ0o7QUFFRCxNQUFNLE9BQU8sYUFBYyxTQUFRLGlCQUFpQjtJQUNoRCxZQUFZLFdBQW1DLEVBQUUsY0FBb0Q7UUFDakcsS0FBSyxDQUFDLFdBQVcsRUFBRSxjQUFjLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDMUMsQ0FBQztDQUNKIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVmFsaWRhdG9yRm4sIEFzeW5jVmFsaWRhdG9yRm4gfSBmcm9tIFwiQGFuZ3VsYXIvZm9ybXNcIlxyXG5pbXBvcnQgeyAgSG9va3N9IGZyb20gXCIuLi9tb2RlbHMvaW50ZXJmYWNlL2FjdGlvbi1jb25maWdcIlxyXG5cclxuaW1wb3J0IHsgQmFzZUZvcm1Db250cm9sQ29uZmlnIH0gZnJvbSAnLi9iYXNlLWZvcm0tY29udHJvbC1jb25maWcnXHJcbmltcG9ydCB7IFJ4Rm9ybUNvbnRyb2wgfSBmcm9tIFwiQHJ4d2ViL3JlYWN0aXZlLWZvcm0tdmFsaWRhdG9yc1wiO1xyXG5pbXBvcnQgeyBkeW5hbWljQ29udGFpbmVyIH0gZnJvbSBcIi4uL2NvcmUvZHluYW1pY0NvbnRhaW5lclwiO1xyXG5cclxuXHJcbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBGb3JtQ29udHJvbENvbmZpZyBleHRlbmRzIEJhc2VGb3JtQ29udHJvbENvbmZpZyB7XHJcbiAgICBwcml2YXRlIF9mb3JtQ29udHJvbDogUnhGb3JtQ29udHJvbDtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihmaWVsZENvbmZpZzogeyBba2V5OiBzdHJpbmddOiBhbnkgfSwgcHVibGljIGNvbnRyb2xzQ29uZmlnOiB7IFtrZXk6IHN0cmluZ106IEZvcm1Db250cm9sQ29uZmlnIH0sbm90aWZpY2F0aW9uSWQ6bnVtYmVyKSB7XHJcbiAgICAgICAgc3VwZXIoY29udHJvbHNDb25maWcsIG5vdGlmaWNhdGlvbklkKTtcclxuICAgICAgICB0aGlzLmNvbmZpZyA9IGZpZWxkQ29uZmlnO1xyXG4gICAgICAgdGhpcy5vdmVycmlkZVByb3BlcnR5KCk7XHJcbiAgICAgICAgdGhpcy52YWx1ZSA9IGZpZWxkQ29uZmlnLnZhbHVlO1xyXG4gICAgICAgIHN1cGVyLmNoZWNrRmlsdGVyRnVuY3Rpb24oKTtcclxuICAgICAgICB0aGlzLnByb3BzID0gdGhpcy5jb25maWcucHJvcHMgfHwgT2JqZWN0LmNyZWF0ZSh7fSk7XHJcbiAgICAgICAgdGhpcy5zZXROb3RpZmljYXRpb24oKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIG92ZXJyaWRlUHJvcGVydHkoKXtcclxuICAgICAgICBpZih0aGlzLmNvbmZpZy5vdmVycmlkZVByb3BzKXtcclxuICAgICAgICAgICAgdGhpcy5jb25maWcub3ZlcnJpZGVQcm9wcy5mb3JFYWNoKHQ9PntcclxuICAgICAgICAgICAgICAgIGxldCBwcm9wSW5mbyA9IGR5bmFtaWNDb250YWluZXIuZ2V0T3ZlcnJpZGVQcm9wKHQpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5vdmVycmlkZVByb3AocHJvcEluZm8pO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBvdmVycmlkZXM6YW55ID0ge307XHJcblxyXG4gICAgXHJcbiAgICBpbnB1dHM6IGFueTtcclxuICAgIGV2ZW50czogYW55O1xyXG5cclxuICAgIHZhbHVlOiBhbnk7XHJcbiAgICBkaXNhYmxlZDogYm9vbGVhbjtcclxuICAgIGxhYmVsOiBzdHJpbmc7XHJcbiAgICBpbWc6IHN0cmluZztcclxuICAgIHBsYWNlaG9sZGVyOiBzdHJpbmc7XHJcbiAgICBoaWRlOiBib29sZWFuO1xyXG4gICAgZGVzY3JpcHRpb246IHN0cmluZztcclxuICAgIGZvY3VzOiBib29sZWFuO1xyXG4gICAgcmVhZG9ubHk6IGJvb2xlYW47XHJcbiAgICBjbGFzczogc3RyaW5nW107XHJcblxyXG4gICAgaXNQbGFpblRleHRNb2RlOiBib29sZWFuO1xyXG4gICAgXHJcbiAgICB2YWxpZGF0b3I6IFZhbGlkYXRvckZuO1xyXG4gICAgYXN5bmNWYWxpZGF0b3I6IEFzeW5jVmFsaWRhdG9yRm47XHJcblxyXG4gICAgaG9va3M6IEhvb2tzXHJcblxyXG5cclxuICAgIHNldCBmb3JtQ29udHJvbCh2YWx1ZTogUnhGb3JtQ29udHJvbCkge1xyXG4gICAgICAgIHRoaXMuX2Zvcm1Db250cm9sID0gdmFsdWU7XHJcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB0aGlzLm92ZXJyaWRlRXJyb3JzUHJvcCh0aGlzLl9mb3JtQ29udHJvbCksIDEwKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgZm9ybUNvbnRyb2woKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2Zvcm1Db250cm9sO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBlcnJvck1lc3NhZ2UoKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5mb3JtQ29udHJvbC5lcnJvck1lc3NhZ2U7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IHByZXBlbmRUZXh0KCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmNvbmZpZy51aSA/IHRoaXMuY29uZmlnLnVpLnByZXBlbmRUZXh0IDogJyc7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBDb250cm9sQ29uZmlnIGV4dGVuZHMgRm9ybUNvbnRyb2xDb25maWcge1xyXG4gICAgY29uc3RydWN0b3IoZmllbGRDb25maWc6IHsgW2tleTogc3RyaW5nXTogYW55IH0sIGNvbnRyb2xzQ29uZmlnOiB7IFtrZXk6IHN0cmluZ106IEZvcm1Db250cm9sQ29uZmlnIH0pIHtcclxuICAgICAgICBzdXBlcihmaWVsZENvbmZpZywgY29udHJvbHNDb25maWcsIDApO1xyXG4gICAgfVxyXG59Il19