import * as tslib_1 from "tslib";
import { PropDescriptor } from './prop-descriptor';
import { FILTER, SOURCE } from '../const/app.const';
import { Linq } from '../util/linq';
import { NotificationState } from '../statics/control-state';
var BaseFormControlConfig = /** @class */ (function (_super) {
    tslib_1.__extends(BaseFormControlConfig, _super);
    function BaseFormControlConfig(configs, notificationId) {
        var _this = _super.call(this) || this;
        _this.configs = configs;
        _this.notificationId = notificationId;
        _this._actionResult = {
            label: undefined,
            img: undefined,
            placeholder: undefined,
            source: [],
            filter: [],
            hide: false,
            description: undefined,
            disabled: false,
            focus: false,
            readonly: false,
            class: [],
            prependText: ''
        };
        return _this;
    }
    BaseFormControlConfig.prototype.setNotification = function () {
        if (NotificationState.notifications[this.notificationId])
            if (!NotificationState.notifications[this.notificationId][this.config.name])
                NotificationState.notifications[this.notificationId][this.config.name] =
                    this.controlNotifications = { filter: [], disabled: [], label: [], description: [], hide: [], placeholder: [], readonly: [], focus: [], class: [] };
            else
                this.controlNotifications = NotificationState.notifications[this.notificationId][this.config.name];
        this.complete();
    };
    BaseFormControlConfig.prototype.complete = function () {
        var _this = this;
        var _loop_1 = function (action) {
            var descriptor = this_1.getDescriptor(action);
            if ((descriptor && descriptor.get) || this_1.isDefinedFilter) {
                var stringFunction = this_1.isDefinedFilter ? String(this_1[FILTER]) : String(descriptor.get);
                var columnNames = Linq.dynamicConfigParser(stringFunction);
                columnNames.forEach(function (column) {
                    if (!NotificationState.notifications[_this.notificationId][column])
                        NotificationState.notifications[_this.notificationId][column] = { filter: [], disabled: [], label: [], description: [], hide: [], placeholder: [], readonly: [], focus: [], class: [] };
                    var controlNotifications = NotificationState.notifications[_this.notificationId][column];
                    controlNotifications[action].push(_this.config.name);
                });
            }
        };
        var this_1 = this;
        for (var action in this.controlNotifications) {
            _loop_1(action);
        }
        this.overrideProps();
        this.updateActionValue();
    };
    BaseFormControlConfig.prototype.refresh = function (actionName) {
        var _this = this;
        for (var columnName in this.controlNotifications) {
            if (this.controlNotifications[columnName].length > 0)
                this.controlNotifications[columnName].forEach(function (x) {
                    if (columnName == FILTER)
                        _this.configs[x].value = null;
                    if (x != _this.config.name)
                        _this.configs[x].refresh(columnName);
                    else
                        _this.setActionValue(columnName);
                });
        }
        if (actionName)
            this.setActionValue(actionName);
    };
    BaseFormControlConfig.prototype.setActionValue = function (actionName) {
        if (actionName == FILTER && this.isDefinedFilter) {
            this[FILTER].call(this);
        }
        else
            this[actionName == FILTER ? SOURCE : actionName] = this[actionName];
    };
    BaseFormControlConfig.prototype.updateActionValue = function () {
        var _this = this;
        ["disabled", "label", "img", "placeholder", "hide", "description", "focus", "readonly", "class", "filter", "source"].forEach(function (key) {
            switch (key) {
                case FILTER:
                    if (_this.isDefinedFilter && key == FILTER)
                        _this[FILTER]();
                    if (_this.config.filter)
                        _this[FILTER] = _this.config.filter;
                    break;
                case SOURCE:
                    if (_this.config[key])
                        _this[key] = _this.config[key];
                    if (key == SOURCE && !_this.source)
                        _this[key] = [];
                    break;
                default:
                    if (_this.config.ui && _this.config.ui[key])
                        _this[key] = _this.config.ui[key];
                    else
                        _this[key == FILTER ? SOURCE : key] = _this._actionResult[key];
                    break;
            }
        });
    };
    return BaseFormControlConfig;
}(PropDescriptor));
export { BaseFormControlConfig };
//# sourceMappingURL=data:application/json;base64,