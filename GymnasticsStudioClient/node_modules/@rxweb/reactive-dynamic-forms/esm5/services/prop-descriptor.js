import * as tslib_1 from "tslib";
import { ValueChangeNotification } from "./value-change-notification";
var FILTER = "filter";
var FUNCTION = "function";
var ERRORS = "errors";
var PropDescriptor = /** @class */ (function (_super) {
    tslib_1.__extends(PropDescriptor, _super);
    function PropDescriptor() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PropDescriptor.prototype.checkFilterFunction = function () {
        var descriptor = Object.getOwnPropertyDescriptor(Object.getPrototypeOf(this), FILTER);
        this.isDefinedFilter = (descriptor && !descriptor.get && !descriptor.set && typeof this[FILTER] == FUNCTION);
    };
    PropDescriptor.prototype.overrideProp = function (props) {
        var _this = this;
        Object.keys(props).forEach(function (t) {
            Object.defineProperty(_this, t, props[t]);
        });
    };
    PropDescriptor.prototype.defineProp = function (propName) {
        var _this = this;
        var value = this.props[propName];
        var oldValue = null;
        Object.defineProperty(this.props, propName, {
            get: function () { return value; },
            set: function (v) {
                value = v;
                _this.notifyValueChanged("props." + propName, value, oldValue, false);
                oldValue = value;
            }
        });
    };
    PropDescriptor.prototype.overrideProps = function () {
        var _this = this;
        ["disabled", "label", "placeholder", "hide", "description", "focus", "readonly", "class", "source"].forEach(function (t) {
            var descriptor = _this.getDescriptor(t);
            var value = null;
            var oldValue = null;
            Object.defineProperty(_this, t, {
                get: function () { return descriptor ? descriptor.get.call(_this) : value; },
                set: function (v) {
                    value = v;
                    if (descriptor && descriptor.set)
                        descriptor.set.call(_this, v);
                    _super.prototype.notifyValueChanged.call(_this, t, value, oldValue);
                    oldValue = v;
                }
            });
        });
    };
    PropDescriptor.prototype.overrideErrorsProp = function (formControl) {
        var _this = this;
        var value = formControl.errors;
        var errorMessage = '';
        var oldValue = formControl.errorMessage;
        Object.defineProperty(formControl, ERRORS, {
            get: function () { return value; },
            set: function (v) {
                value = v;
                errorMessage = formControl.errorMessage;
                _this.notifyValueChanged("errorMessage", errorMessage || "", oldValue);
                oldValue = formControl.errorMessage;
            }
        });
        formControl[ERRORS] = formControl[ERRORS];
    };
    PropDescriptor.prototype.getDescriptor = function (propName) {
        var descriptor = Object.getOwnPropertyDescriptor(Object.getPrototypeOf(this), propName);
        if (!descriptor)
            descriptor = Object.getOwnPropertyDescriptor(this, propName);
        return descriptor;
    };
    return PropDescriptor;
}(ValueChangeNotification));
export { PropDescriptor };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvcC1kZXNjcmlwdG9yLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHJ4d2ViL3JlYWN0aXZlLWR5bmFtaWMtZm9ybXMvIiwic291cmNlcyI6WyJzZXJ2aWNlcy9wcm9wLWRlc2NyaXB0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBR3RFLElBQU0sTUFBTSxHQUFXLFFBQVEsQ0FBQztBQUNoQyxJQUFNLFFBQVEsR0FBVyxVQUFVLENBQUM7QUFDcEMsSUFBTSxNQUFNLEdBQVcsUUFBUSxDQUFDO0FBQ2hDO0lBQW9DLDBDQUF1QjtJQUEzRDs7SUErRUEsQ0FBQztJQTFFYSw0Q0FBbUIsR0FBN0I7UUFDSSxJQUFJLFVBQVUsR0FBRyxNQUFNLENBQUMsd0JBQXdCLENBQUMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQztRQUN0RixJQUFJLENBQUMsZUFBZSxHQUFHLENBQUMsVUFBVSxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLElBQUksT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksUUFBUSxDQUFDLENBQUM7SUFDakgsQ0FBQztJQUdELHFDQUFZLEdBQVosVUFBYSxLQUF3QjtRQUFyQyxpQkFLQztRQUpHLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsT0FBTyxDQUFDLFVBQUEsQ0FBQztZQUN4QixNQUFNLENBQUMsY0FBYyxDQUFDLEtBQUksRUFBQyxDQUFDLEVBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDM0MsQ0FBQyxDQUFDLENBQUE7SUFFTixDQUFDO0lBRUQsbUNBQVUsR0FBVixVQUFXLFFBQWdCO1FBQTNCLGlCQVlDO1FBWEcsSUFBSSxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUNqQyxJQUFJ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QU8sVUFBVSxDQUFDO0lBQzFCLENBQUM7SUFJTCxxQkFBQztBQUFELENBQUMsQUEvRUQsQ0FBb0MsdUJBQXVCLEdBK0UxRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFZhbHVlQ2hhbmdlTm90aWZpY2F0aW9uIH0gZnJvbSBcIi4vdmFsdWUtY2hhbmdlLW5vdGlmaWNhdGlvblwiO1xyXG5pbXBvcnQgeyBPdmVycmlkZUNvbmZpZ1Byb3AgfSBmcm9tIFwiLi4vbW9kZWxzL2ludGVyZmFjZS9vdmVycmlkZS1jb25maWctcHJvcFwiO1xyXG5cclxuY29uc3QgRklMVEVSOiBzdHJpbmcgPSBcImZpbHRlclwiO1xyXG5jb25zdCBGVU5DVElPTjogc3RyaW5nID0gXCJmdW5jdGlvblwiO1xyXG5jb25zdCBFUlJPUlM6IHN0cmluZyA9IFwiZXJyb3JzXCI7XHJcbmV4cG9ydCBjbGFzcyBQcm9wRGVzY3JpcHRvciBleHRlbmRzIFZhbHVlQ2hhbmdlTm90aWZpY2F0aW9ue1xyXG4gICAgcHJvdGVjdGVkIGlzRGVmaW5lZEZpbHRlcjogYm9vbGVhbjtcclxuXHJcbiAgICBwcm9wczogeyBba2V5OiBzdHJpbmddOiBhbnkgfTtcclxuXHJcbiAgICBwcm90ZWN0ZWQgY2hlY2tGaWx0ZXJGdW5jdGlvbigpIHtcclxuICAgICAgICBsZXQgZGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoT2JqZWN0LmdldFByb3RvdHlwZU9mKHRoaXMpLCBGSUxURVIpO1xyXG4gICAgICAgIHRoaXMuaXNEZWZpbmVkRmlsdGVyID0gKGRlc2NyaXB0b3IgJiYgIWRlc2NyaXB0b3IuZ2V0ICYmICFkZXNjcmlwdG9yLnNldCAmJiB0eXBlb2YgdGhpc1tGSUxURVJdID09IEZVTkNUSU9OKTtcclxuICAgIH1cclxuXHJcbiAgIFxyXG4gICAgb3ZlcnJpZGVQcm9wKHByb3BzOk92ZXJyaWRlQ29uZmlnUHJvcCl7XHJcbiAgICAgICAgT2JqZWN0LmtleXMocHJvcHMpLmZvckVhY2godD0+e1xyXG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcyx0LHByb3BzW3RdKTsgICAgXHJcbiAgICAgICAgfSlcclxuXHJcbiAgICB9XHJcblxyXG4gICAgZGVmaW5lUHJvcChwcm9wTmFtZTogc3RyaW5nKSB7XHJcbiAgICAgICAgbGV0IHZhbHVlID0gdGhpcy5wcm9wc1twcm9wTmFtZV07XHJcbiAgICAgICAgbGV0IG9sZFZhbHVlID0gbnVsbDtcclxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcy5wcm9wcywgcHJvcE5hbWUsXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGdldDogKCkgPT4geyByZXR1cm4gdmFsdWUgfSxcclxuICAgICAgICAgICAgICAgIHNldDogKHYpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHY7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5ub3RpZnlWYWx1ZUNoYW5nZWQoYHByb3BzLiR7cHJvcE5hbWV9YCwgdmFsdWUsIG9sZFZhbHVlLCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgb2xkVmFsdWUgPSB2YWx1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSlcclxuICAgIH1cclxuXHJcblxyXG4gICAgcHJvdGVjdGVkIG92ZXJyaWRlUHJvcHMoKSB7XHJcbiAgICAgICAgW1wiZGlzYWJsZWRcIiwgXCJsYWJlbFwiLCBcInBsYWNlaG9sZGVyXCIsIFwiaGlkZVwiLCBcImRlc2NyaXB0aW9uXCIsIFwiZm9jdXNcIiwgXCJyZWFkb25seVwiLCBcImNsYXNzXCIsIFwic291cmNlXCJdLmZvckVhY2godCA9PiB7XHJcbiAgICAgICAgICAgbGV0IGRlc2NyaXB0b3IgPSB0aGlzLmdldERlc2NyaXB0b3IodCk7XHJcbiAgICAgICAgICAgIGxldCB2YWx1ZSA9IG51bGw7XHJcbiAgICAgICAgICAgIGxldCBvbGRWYWx1ZSA9IG51bGw7XHJcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCB0LCB7XHJcbiAgICAgICAgICAgICAgICBnZXQ6ICgpID0+IHsgcmV0dXJuIGRlc2NyaXB0b3IgPyBkZXNjcmlwdG9yLmdldC5jYWxsKHRoaXMpIDogdmFsdWU7IH0sXHJcbiAgICAgICAgICAgICAgICBzZXQ6ICh2KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSB2O1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChkZXNjcmlwdG9yICYmIGRlc2NyaXB0b3Iuc2V0KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdG9yLnNldC5jYWxsKHRoaXMsIHYpO1xyXG4gICAgICAgICAgICAgICAgICAgIHN1cGVyLm5vdGlmeVZhbHVlQ2hhbmdlZCh0LCB2YWx1ZSwgb2xkVmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIG9sZFZhbHVlID0gdjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSlcclxuICAgIH1cclxuXHJcblxyXG4gICAgcHJvdGVjdGVkIG92ZXJyaWRlRXJyb3JzUHJvcChmb3JtQ29udHJvbDogYW55KSB7XHJcbiAgICAgICAgbGV0IHZhbHVlID0gZm9ybUNvbnRyb2wuZXJyb3JzO1xyXG4gICAgICAgIGxldCBlcnJvck1lc3NhZ2UgPSAnJztcclxuICAgICAgICBsZXQgb2xkVmFsdWUgPSBmb3JtQ29udHJvbC5lcnJvck1lc3NhZ2U7XHJcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGZvcm1Db250cm9sLCBFUlJPUlMsXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGdldDogKCkgPT4geyByZXR1cm4gdmFsdWUgfSxcclxuICAgICAgICAgICAgICAgIHNldDogKHYpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHY7XHJcbiAgICAgICAgICAgICAgICAgICAgZXJyb3JNZXNzYWdlID0gZm9ybUNvbnRyb2wuZXJyb3JNZXNzYWdlO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubm90aWZ5VmFsdWVDaGFuZ2VkKGBlcnJvck1lc3NhZ2VgLCBlcnJvck1lc3NhZ2UgfHwgXCJcIiwgb2xkVmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIG9sZFZhbHVlID0gZm9ybUNvbnRyb2wuZXJyb3JNZXNzYWdlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIGZvcm1Db250cm9sW0VSUk9SU10gPSBmb3JtQ29udHJvbFtFUlJPUlNdO1xyXG4gICAgfVxyXG5cclxuICAgIHByb3RlY3RlZCBnZXREZXNjcmlwdG9yKHByb3BOYW1lOnN0cmluZyl7XHJcblxyXG4gICAgICAgIGxldCBkZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihPYmplY3QuZ2V0UHJvdG90eXBlT2YodGhpcyksIHByb3BOYW1lKTtcclxuICAgICAgICBpZighZGVzY3JpcHRvcilcclxuICAgICAgICAgICAgZGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGhpcywgcHJvcE5hbWUpO1xyXG4gICAgICAgICAgICByZXR1cm4gZGVzY3JpcHRvcjtcclxuICAgIH1cclxuXHJcblxyXG5cclxufSJdfQ==