import * as tslib_1 from "tslib";
import { BaseFormControlConfig } from './base-form-control-config';
import { dynamicContainer } from "../core/dynamicContainer";
var FormControlConfig = /** @class */ (function (_super) {
    tslib_1.__extends(FormControlConfig, _super);
    function FormControlConfig(fieldConfig, controlsConfig, notificationId) {
        var _this = _super.call(this, controlsConfig, notificationId) || this;
        _this.controlsConfig = controlsConfig;
        _this.overrides = {};
        _this.config = fieldConfig;
        _this.overrideProperty();
        _this.value = fieldConfig.value;
        _super.prototype.checkFilterFunction.call(_this);
        _this.props = _this.config.props || Object.create({});
        _this.setNotification();
        return _this;
    }
    FormControlConfig.prototype.overrideProperty = function () {
        var _this = this;
        if (this.config.overrideProps) {
            this.config.overrideProps.forEach(function (t) {
                var propInfo = dynamicContainer.getOverrideProp(t);
                _this.overrideProp(propInfo);
            });
        }
    };
    Object.defineProperty(FormControlConfig.prototype, "formControl", {
        get: function () {
            return this._formControl;
        },
        set: function (value) {
            var _this = this;
            this._formControl = value;
            setTimeout(function () { return _this.overrideErrorsProp(_this._formControl); }, 10);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FormControlConfig.prototype, "errorMessage", {
        get: function () {
            return this.formControl.errorMessage;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FormControlConfig.prototype, "prependText", {
        get: function () {
            return this.config.ui ? this.config.ui.prependText : '';
        },
        enumerable: true,
        configurable: true
    });
    return FormControlConfig;
}(BaseFormControlConfig));
export { FormControlConfig };
var ControlConfig = /** @class */ (function (_super) {
    tslib_1.__extends(ControlConfig, _super);
    function ControlConfig(fieldConfig, controlsConfig) {
        return _super.call(this, fieldConfig, controlsConfig, 0) || this;
    }
    return ControlConfig;
}(FormControlConfig));
export { ControlConfig };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybS1jb250cm9sLWNvbmZpZy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0ByeHdlYi9yZWFjdGl2ZS1keW5hbWljLWZvcm1zLyIsInNvdXJjZXMiOlsic2VydmljZXMvZm9ybS1jb250cm9sLWNvbmZpZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBR0EsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sNEJBQTRCLENBQUE7QUFFbEUsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFHNUQ7SUFBZ0QsNkNBQXFCO0lBR2pFLDJCQUFZLFdBQW1DLEVBQVMsY0FBb0QsRUFBQyxjQUFxQjtRQUFsSSxZQUNJLGtCQUFNLGNBQWMsRUFBRSxjQUFjLENBQUMsU0FPeEM7UUFSdUQsb0JBQWMsR0FBZCxjQUFjLENBQXNDO1FBbUI1RyxlQUFTLEdBQU8sRUFBRSxDQUFDO1FBakJmLEtBQUksQ0FBQyxNQUFNLEdBQUcsV0FBVyxDQUFDO1FBQzNCLEtBQUksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO1FBQ3ZCLEtBQUksQ0FBQyxLQUFLLEdBQUcsV0FBVyxDQUFDLEtBQUssQ0FBQztRQUMvQixpQkFBTSxtQkFBbUIsWUFBRSxDQUFDO1FBQzVCLEtBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLElBQUksTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUNwRCxLQUFJLENBQUMsZUFBZSxFQUFFLENBQUM7O0lBQzNCLENBQUM7SUFFTyw0Q0FBZ0IsR0FBeEI7UUFBQSxpQkFPQztRQU5HLElBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxhQUFhLEVBQUM7WUFDekIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLFVBQUEsQ0FBQztnQkFDL0IsSUFBSSxRQUFRLEdBQUcsZ0JBQWdCLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUNuRCxLQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQ2hDLENBQUMsQ0FBQyxDQUFBO1NBQ0w7SUFDTCxDQUFDO0lBMkJELHNCQUFJLDBDQUFXO2FBS2Y7WUFDSSxPQUFPLElBQUksQ0FBQyxZQUFZLENBQUM7UUFDN0IsQ0FBQzthQVBELFVBQWdCLEtBQW9CO1lBQXBDLGlCQUdDO1lBRkcsSUFBSSxDQUFDLFlBQVksR0FBRyxLQUFLLENBQUM7WUFDMUIsVUFBVSxDQUFDLGNBQU0sT0FBQSxLQUFJLENBQUMsa0JBQWtCLENBQUMsS0FBSSxDQUFDLFlBQVksQ0FBQyxFQUExQyxDQUEwQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ3JFLENBQUM7OztPQUFBO0lBTUQsc0JBQUksMkNBQVk7YUFBaEI7WUFDSSxPQUFPLElBQUksQ0FBQyxXQUFXLENBQUMsWUFBWSxDQUFDO1FBQ3pDLENBQUM7OztPQUFBO0lBRUQsc0JBQUksMENBQVc7YUFBZjtZQUNJLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO1FBQzVELENBQUM7OztPQUFBO0lBQ0wsd0JBQUM7QUFBRCxDQUFDLEFBL0RELENBQWdELHFCQUFxQixHQStEcEU7O0FBRUQ7SUFBbUMseUNBQWlCO0lBQ2hELHVCQUFZLFdBQW1DLEVBQUUsY0FBb0Q7ZUFDakcsa0JBQU0sV0FBVyxFQUFFLGNBQWMsRUFBRSxDQUFDLENBQUM7SUFDekMsQ0FBQztJQUNMLG9CQUFDO0FBQUQsQ0FBQyxBQUpELENBQW1DLGlCQUFpQixHQUluRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFZhbGlkYXRvckZuLCBBc3luY1ZhbGlkYXRvckZuIH0gZnJvbSBcIkBhbmd1bGFyL2Zvcm1zXCJcclxuaW1wb3J0IHsgIEhvb2tzfSBmcm9tIFwiLi4vbW9kZWxzL2ludGVyZmFjZS9hY3Rpb24tY29uZmlnXCJcclxuXHJcbmltcG9ydCB7IEJhc2VGb3JtQ29udHJvbENvbmZpZyB9IGZyb20gJy4vYmFzZS1mb3JtLWNvbnRyb2wtY29uZmlnJ1xyXG5pbXBvcnQgeyBSeEZvcm1Db250cm9sIH0gZnJvbSBcIkByeHdlYi9yZWFjdGl2ZS1mb3JtLXZhbGlkYXRvcnNcIjtcclxuaW1wb3J0IHsgZHluYW1pY0NvbnRhaW5lciB9IGZyb20gXCIuLi9jb3JlL2R5bmFtaWNDb250YWluZXJcIjtcclxuXHJcblxyXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgRm9ybUNvbnRyb2xDb25maWcgZXh0ZW5kcyBCYXNlRm9ybUNvbnRyb2xDb25maWcge1xyXG4gICAgcHJpdmF0ZSBfZm9ybUNvbnRyb2w6IFJ4Rm9ybUNvbnRyb2w7XHJcblxyXG4gICAgY29uc3RydWN0b3IoZmllbGRDb25maWc6IHsgW2tleTogc3RyaW5nXTogYW55IH0sIHB1YmxpYyBjb250cm9sc0NvbmZpZzogeyBba2V5OiBzdHJpbmddOiBGb3JtQ29udHJvbENvbmZpZyB9LG5vdGlmaWNhdGlvbklkOm51bWJlcikge1xyXG4gICAgICAgIHN1cGVyKGNvbnRyb2xzQ29uZmlnLCBub3RpZmljYXRpb25JZCk7XHJcbiAgICAgICAgdGhpcy5jb25maWcgPSBmaWVsZENvbmZpZztcclxuICAgICAgIHRoaXMub3ZlcnJpZGVQcm9wZXJ0eSgpO1xyXG4gICAgICAgIHRoaXMudmFsdWUgPSBmaWVsZENvbmZpZy52YWx1ZTtcclxuICAgICAgICBzdXBlci5jaGVja0ZpbHRlckZ1bmN0aW9uKCk7XHJcbiAgICAgICAgdGhpcy5wcm9wcyA9IHRoaXMuY29uZmlnLnByb3BzIHx8IE9iamVjdC5jcmVhdGUoe30pO1xyXG4gICAgICAgIHRoaXMuc2V0Tm90aWZpY2F0aW9uKCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBvdmVycmlkZVByb3BlcnR5KCl7XHJcbiAgICAgICAgaWYodGhpcy5jb25maWcub3ZlcnJpZGVQcm9wcyl7XHJcbiAgICAgICAgICAgIHRoaXMuY29uZmlnLm92ZXJyaWRlUHJvcHMuZm9yRWFjaCh0PT57XHJcbiAgICAgICAgICAgICAgICBsZXQgcHJvcEluZm8gPSBkeW5hbWljQ29udGFpbmVyLmdldE92ZXJyaWRlUHJvcCh0KTtcclxuICAgICAgICAgICAgICAgIHRoaXMub3ZlcnJpZGVQcm9wKHByb3BJbmZvKTtcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgb3ZlcnJpZGVzOmFueSA9IHt9O1xyXG5cclxuICAgIFxyXG4gICAgaW5wdXRzOiBhbnk7XHJcbiAgICBldmVudHM6IGFueTtcclxuXHJcbiAgICB2YWx1ZTogYW55O1xyXG4gICAgZGlzYWJsZWQ6IGJvb2xlYW47XHJcbiAgICBsYWJlbDogc3RyaW5nO1xyXG4gICAgaW1nOiBzdHJpbmc7XHJcbiAgICBwbGFjZWhvbGRlcjogc3RyaW5nO1xyXG4gICAgaGlkZTogYm9vbGVhbjtcclxuICAgIGRlc2NyaXB0aW9uOiBzdHJpbmc7XHJcbiAgICBmb2N1czogYm9vbGVhbjtcclxuICAgIHJlYWRvbmx5OiBib29sZWFuO1xyXG4gICAgY2xhc3M6IHN0cmluZ1tdO1xyXG5cclxuICAgIGlzUGxhaW5UZXh0TW9kZTogYm9vbGVhbjtcclxuICAgIFxyXG4gICAgdmFsaWRhdG9yOiBWYWxpZGF0b3JGbjtcclxuICAgIGFzeW5jVmFsaWRhdG9yOiBBc3luY1ZhbGlkYXRvckZuO1xyXG5cclxuICAgIGhvb2tzOiBIb29rc1xyXG5cclxuXHJcbiAgICBzZXQgZm9ybUNvbnRyb2wodmFsdWU6IFJ4Rm9ybUNvbnRyb2wpIHtcclxuICAgICAgICB0aGlzLl9mb3JtQ29udHJvbCA9IHZhbHVlO1xyXG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4gdGhpcy5vdmVycmlkZUVycm9yc1Byb3AodGhpcy5fZm9ybUNvbnRyb2wpLCAxMCk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGZvcm1Db250cm9sKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9mb3JtQ29udHJvbDtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgZXJyb3JNZXNzYWdlKCk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZm9ybUNvbnRyb2wuZXJyb3JNZXNzYWdlO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCBwcmVwZW5kVGV4dCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5jb25maWcudWkgPyB0aGlzLmNvbmZpZy51aS5wcmVwZW5kVGV4dCA6ICcnO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgQ29udHJvbENvbmZpZyBleHRlbmRzIEZvcm1Db250cm9sQ29uZmlnIHtcclxuICAgIGNvbnN0cnVjdG9yKGZpZWxkQ29uZmlnOiB7IFtrZXk6IHN0cmluZ106IGFueSB9LCBjb250cm9sc0NvbmZpZzogeyBba2V5OiBzdHJpbmddOiBGb3JtQ29udHJvbENvbmZpZyB9KSB7XHJcbiAgICAgICAgc3VwZXIoZmllbGRDb25maWcsIGNvbnRyb2xzQ29uZmlnLCAwKTtcclxuICAgIH1cclxufSJdfQ==