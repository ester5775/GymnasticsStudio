import { isNotMatched } from "../util/is-not-matched";
var ValueChangeNotification = /** @class */ (function () {
    function ValueChangeNotification() {
        this.attributeChangeSubscriptions = new Array();
    }
    ValueChangeNotification.prototype.onPropValueChanged = function (controlId, subscription, func) {
        this.attributeChangeSubscriptions.push({ controlId: controlId, names: subscription.names, props: subscription.props, func: func });
    };
    ValueChangeNotification.prototype.notifyValueChanged = function (name, value, oldValue, isProps) {
        if (isProps === void 0) { isProps = false; }
        if ((!isProps && this.isNotEqual(oldValue, value)) && this.onPropValueChanged) {
            var subscriptions = this.attributeChangeSubscriptions.filter(function (t) { return t.names.indexOf(name) != -1; });
            subscriptions.forEach(function (subscribe) {
                if (subscribe.props && subscribe.props[name])
                    subscribe.func(subscribe.props[name]);
            });
        }
    };
    ValueChangeNotification.prototype.isNotEqual = function (leftValue, rightValue) {
        if (Array.isArray(leftValue) && Array.isArray(rightValue)) {
            var isNotEqual = leftValue.length != rightValue.length;
            if (!isNotEqual)
                for (var i = 0; i < leftValue.length; i++) {
                    isNotEqual = isNotMatched(leftValue[i], rightValue[i]);
                    if (isNotEqual)
                        break;
                }
            return isNotEqual;
        }
        return leftValue != rightValue;
    };
    ValueChangeNotification.prototype.destroy = function (controlId) {
        for (var i = 0; i < this.attributeChangeSubscriptions.length; i++) {
            if (this.attributeChangeSubscriptions[i].controlId == controlId) {
                this.attributeChangeSubscriptions.splice(i, 1);
                break;
            }
        }
    };
    return ValueChangeNotification;
}());
export { ValueChangeNotification };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmFsdWUtY2hhbmdlLW5vdGlmaWNhdGlvbi5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0ByeHdlYi9yZWFjdGl2ZS1keW5hbWljLWZvcm1zLyIsInNvdXJjZXMiOlsic2VydmljZXMvdmFsdWUtY2hhbmdlLW5vdGlmaWNhdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFFdEQ7SUFBQTtRQUNZLGlDQUE0QixHQUFlLElBQUksS0FBSyxFQUFPLENBQUM7SUF1Q3hFLENBQUM7SUFyQ0csb0RBQWtCLEdBQWxCLFVBQW1CLFNBQWlCLEVBQUUsWUFBb0MsRUFBRSxJQUFjO1FBQ3RGLElBQUksQ0FBQyw0QkFBNEIsQ0FBQyxJQUFJLENBQUMsRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxZQUFZLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxZQUFZLENBQUMsS0FBSyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0lBQ3ZJLENBQUM7SUFHRCxvREFBa0IsR0FBbEIsVUFBbUIsSUFBSSxFQUFFLEtBQUssRUFBRSxRQUFRLEVBQUUsT0FBd0I7UUFBeEIsd0JBQUEsRUFBQSxlQUF3QjtRQUM5RCxJQUFJLENBQUMsQ0FBQyxPQUFPLElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxRQUFRLEVBQUUsS0FBSyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsa0JBQWtCLEVBQUU7WUFDM0UsSUFBSSxhQUFhLEdBQUcsSUFBSSxDQUFDLDRCQUE0QixDQUFDLE1BQU0sQ0FBQyxVQUFBLENBQUMsSUFBSSxPQUFBLENBQUMsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUEzQixDQUEyQixDQUFDLENBQUM7WUFDL0YsYUFBYSxDQUFDLE9BQU8sQ0FBQyxVQUFBLFNBQVM7Z0JBQzNCLElBQUksU0FBUyxDQUFDLEtBQUssSUFBSSxTQUFTLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQztvQkFDeEMsU0FBUyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUE7WUFDN0MsQ0FBQyxDQUFDLENBQUM7U0FDTjtJQUNMLENBQUM7SUFFTyw0Q0FBVSxHQUFsQixVQUFtQixTQUFjLEVBQUUsVUFBZTtRQUM5QyxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsRUFBRTtZQUN2RCxJQUFJLFVBQVUsR0FBRyxTQUFTLENBQUMsTUFBTSxJQUFJLFVBQVUsQ0FBQyxNQUFNLENBQUM7WUFDdkQsSUFBSSxDQUFDLFVBQVU7Z0JBQ1gsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFNBQVMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7b0JBQ3ZDLFVBQVUsR0FBRyxZQUFZLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFFLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUN2RCxJQUFJLFVBQVU7d0JBQ1YsTUFBTTtpQkFDYjtZQUNMLE9BQU8sVUFBVSxDQUFDO1NBQ3JCO1FBQ0QsT0FBTyxTQUFTLElBQUksVUFBVSxDQUFDO0lBQ25DLENBQUM7SUFFRCx5Q0FBTyxHQUFQLFVBQVEsU0FBaUI7UUFDckIsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyw0QkFBNEIsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDL0QsSUFBSSxJQUFJLENBQUMsNEJBQTRCLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxJQUFJLFNBQVMsRUFBRTtnQkFDN0QsSUFBSSxDQUFDLDRCQUE0QixDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7Z0JBQy9DLE1BQU07YUFDVDtTQUNKO0lBQ0wsQ0FBQztJQUNMLDhCQUFDO0FBQUQsQ0FBQyxBQXhDRCxJQXdDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGlzTm90TWF0Y2hlZCB9IGZyb20gXCIuLi91dGlsL2lzLW5vdC1tYXRjaGVkXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgVmFsdWVDaGFuZ2VOb3RpZmljYXRpb24ge1xyXG4gICAgcHJpdmF0ZSBhdHRyaWJ1dGVDaGFuZ2VTdWJzY3JpcHRpb25zOiBBcnJheTxhbnk+ID0gbmV3IEFycmF5PGFueT4oKTtcclxuXHJcbiAgICBvblByb3BWYWx1ZUNoYW5nZWQoY29udHJvbElkOiBudW1iZXIsIHN1YnNjcmlwdGlvbjogeyBba2V5OiBzdHJpbmddOiBhbnkgfSwgZnVuYzogRnVuY3Rpb24pIHtcclxuICAgICAgICB0aGlzLmF0dHJpYnV0ZUNoYW5nZVN1YnNjcmlwdGlvbnMucHVzaCh7IGNvbnRyb2xJZDogY29udHJvbElkLCBuYW1lczogc3Vic2NyaXB0aW9uLm5hbWVzLCBwcm9wczogc3Vic2NyaXB0aW9uLnByb3BzLCBmdW5jOiBmdW5jIH0pO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICBub3RpZnlWYWx1ZUNoYW5nZWQobmFtZSwgdmFsdWUsIG9sZFZhbHVlLCBpc1Byb3BzOiBib29sZWFuID0gZmFsc2UpIHtcclxuICAgICAgICBpZiAoKCFpc1Byb3BzICYmIHRoaXMuaXNOb3RFcXVhbChvbGRWYWx1ZSwgdmFsdWUpKSAmJiB0aGlzLm9uUHJvcFZhbHVlQ2hhbmdlZCkge1xyXG4gICAgICAgICAgICBsZXQgc3Vic2NyaXB0aW9ucyA9IHRoaXMuYXR0cmlidXRlQ2hhbmdlU3Vic2NyaXB0aW9ucy5maWx0ZXIodCA9PiB0Lm5hbWVzLmluZGV4T2YobmFtZSkgIT0gLTEpO1xyXG4gICAgICAgICAgICBzdWJzY3JpcHRpb25zLmZvckVhY2goc3Vic2NyaWJlID0+IHtcclxuICAgICAgICAgICAgICAgIGlmIChzdWJzY3JpYmUucHJvcHMgJiYgc3Vic2NyaWJlLnByb3BzW25hbWVdKVxyXG4gICAgICAgICAgICAgICAgICAgIHN1YnNjcmliZS5mdW5jKHN1YnNjcmliZS5wcm9wc1tuYW1lXSlcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgaXNOb3RFcXVhbChsZWZ0VmFsdWU6IGFueSwgcmlnaHRWYWx1ZTogYW55KSB7XHJcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkobGVmdFZhbHVlKSAmJiBBcnJheS5pc0FycmF5KHJpZ2h0VmFsdWUpKSB7XHJcbiAgICAgICAgICAgIGxldCBpc05vdEVxdWFsID0gbGVmdFZhbHVlLmxlbmd0aCAhPSByaWdodFZhbHVlLmxlbmd0aDtcclxuICAgICAgICAgICAgaWYgKCFpc05vdEVxdWFsKVxyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZWZ0VmFsdWUubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICBpc05vdEVxdWFsID0gaXNOb3RNYXRjaGVkKGxlZnRWYWx1ZVtpXSwgcmlnaHRWYWx1ZVtpXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzTm90RXF1YWwpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gaXNOb3RFcXVhbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGxlZnRWYWx1ZSAhPSByaWdodFZhbHVlO1xyXG4gICAgfVxyXG5cclxuICAgIGRlc3Ryb3koY29udHJvbElkOiBudW1iZXIpIHtcclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuYXR0cmlidXRlQ2hhbmdlU3Vic2NyaXB0aW9ucy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5hdHRyaWJ1dGVDaGFuZ2VTdWJzY3JpcHRpb25zW2ldLmNvbnRyb2xJZCA9PSBjb250cm9sSWQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuYXR0cmlidXRlQ2hhbmdlU3Vic2NyaXB0aW9ucy5zcGxpY2UoaSwgMSk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufSJdfQ==