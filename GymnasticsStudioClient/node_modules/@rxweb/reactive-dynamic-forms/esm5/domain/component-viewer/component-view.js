import * as tslib_1 from "tslib";
var ComponentView = /** @class */ (function () {
    function ComponentView(_component, _viewContainerRef, _componentFactoryResolver, formControlConfig, dynamicFormBuildConfig) {
        this.formControlConfig = formControlConfig;
        this.dynamicFormBuildConfig = dynamicFormBuildConfig;
        this.component = _component;
        this.viewContainerRef = _viewContainerRef;
        this.componentFactoryResolver = _componentFactoryResolver;
    }
    ComponentView.prototype.create = function () {
        var componentFactory = this.componentFactoryResolver.resolveComponentFactory(this.component);
        this.componentRef = this.viewContainerRef.createComponent(componentFactory, this.viewContainerRef.length, this.viewContainerRef.parentInjector);
        this.setParams(this.componentRef.instance);
    };
    ComponentView.prototype.setParams = function (instance) {
        var e_1, _a;
        if (this.formControlConfig.inputs) {
            var propNames = Object.getOwnPropertyNames(this.formControlConfig.inputs);
            try {
                for (var propNames_1 = tslib_1.__values(propNames), propNames_1_1 = propNames_1.next(); !propNames_1_1.done; propNames_1_1 = propNames_1.next()) {
                    var propName = propNames_1_1.value;
                    this.overridePropAndSetValue(instance, propName, this.formControlConfig.inputs);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (propNames_1_1 && !propNames_1_1.done && (_a = propNames_1.return)) _a.call(propNames_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        instance["controlConfig"] = this.formControlConfig;
        instance["dynamicFormBuildConfig"] = this.dynamicFormBuildConfig;
    };
    ComponentView.prototype.overridePropAndSetValue = function (instance, propName, inputs) {
        var descriptor = Object.getOwnPropertyDescriptor(Object.getPrototypeOf(inputs), propName);
        var value = '';
        if (!descriptor) {
            value = inputs[propName];
            delete inputs[propName];
        }
        Object.defineProperty(inputs, propName, {
            get: function () { return (descriptor) ? descriptor.get() : value; },
            set: function (v) { instance[propName] = v; (descriptor) ? descriptor.set.call(inputs, v) : value = v; }
        });
        instance[propName] = descriptor ? descriptor.get.call(inputs) : value;
    };
    ComponentView.prototype.rootNode = function () {
        return this.componentRef.hostView.rootNodes[0];
    };
    ComponentView.prototype.getComponentRef = function () {
        return this.componentRef;
    };
    ComponentView.prototype.destroy = function () {
        if (this.componentRef) {
            this.componentRef.destroy();
            this.componentRef = undefined;
        }
    };
    return ComponentView;
}());
export { ComponentView };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcG9uZW50LXZpZXcuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Acnh3ZWIvcmVhY3RpdmUtZHluYW1pYy1mb3Jtcy8iLCJzb3VyY2VzIjpbImRvbWFpbi9jb21wb25lbnQtdmlld2VyL2NvbXBvbmVudC12aWV3LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFPQTtJQU1JLHVCQUFZLFVBQTRCLEVBQUUsaUJBQW1DLEVBQUUseUJBQW1ELEVBQVMsaUJBQW1DLEVBQVMsc0JBQTZDO1FBQXpGLHNCQUFpQixHQUFqQixpQkFBaUIsQ0FBa0I7UUFBUywyQkFBc0IsR0FBdEIsc0JBQXNCLENBQXVCO1FBQ2hPLElBQUksQ0FBQyxTQUFTLEdBQUcsVUFBVSxDQUFDO1FBQzVCLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxpQkFBaUIsQ0FBQztRQUMxQyxJQUFJLENBQUMsd0JBQXdCLEdBQUcseUJBQXlCLENBQUM7SUFDOUQsQ0FBQztJQUVELDhCQUFNLEdBQU47UUFDSSxJQUFJLGdCQUFnQixHQUFHLElBQUksQ0FBQyx3QkFBd0IsQ0FBQyx1QkFBdUIsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDN0YsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsZUFBZSxDQUFDLGdCQUFnQixFQUFFLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLGdCQUFnQixDQUFDLGNBQWMsQ0FBQyxDQUFDO1FBQ2hKLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUMvQyxDQUFDO0lBRU8saUNBQVMsR0FBakIsVUFBa0IsUUFBZ0M7O1FBQzlDLElBQUksSUFBSSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sRUFBRTtZQUMvQixJQUFJLFNBQVMsR0FBRyxNQUFNLENBQUMsbUJBQW1CLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxDQUFDOztnQkFDMUUsS0FBcUIsSUFBQSxjQUFBLGlCQUFBLFNBQVMsQ0FBQSxvQ0FBQTtvQkFBekIsSUFBSSxRQUFRLHNCQUFBO29CQUNiLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxRQUFRLEVBQUUsUUFBUSxFQUFFLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztpQkFBQTs7Ozs7Ozs7O1NBQ3ZGO1FBQ0QsUUFBUSxDQUFDLGVBQWUsQ0FBQyxHQUFHLElBQUksQ0FBQyxpQkFBaUIsQ0FBQztRQUNuRCxRQUFRLENBQUMsd0JBQXdCLENBQUMsR0FBRyxJQUFJLENBQUMsc0JBQXNCLENBQUM7SUFDckUsQ0FBQztJQUVELCtDQUF1QixHQUF2QixVQUF3QixRQUFhLEVBQUUsUUFBZ0IsRUFBRSxNQUFXO1FBQ2hFLElBQUksVUFBVSxHQUFHLE1BQU0sQ0FBQyx3QkFBd0IsQ0FBQyxNQUFNLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBQyxFQUFFLFFBQVEsQ0FBQyxDQUFBO1FBQ3pGLElBQUksS0FBSyxHQUFHLEVBQUUsQ0FBQztRQUNmLElBQUksQ0FBQyxVQUFVLEVBQUU7WUFDYixLQUFLLEdBQUcsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQ3pCLE9BQU8sTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1NBQzNCO1FBQ0QsTUFBTSxDQUFDLGNBQWMsQ0FBQyxNQUFNLEVBQUUsUUFBUSxFQUFFO1lBQ3BDLEdBQUcsZ0JBQUssT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQSxDQUFDLENBQUM7WUFDeEQsR0FBRyxZQUFDLENBQUMsSUFBSSxRQUFRLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUNoRyxDQUFDLENBQUE7UUFDRixRQUFRLENBQUMsUUFBUSxDQUFDLEdBQUcsVUFBVSxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDO0lBQzFFLENBQUM7SUFFRCxnQ0FBUSxHQUFSO1FBQ0ksT0FBUSxJQUFJLENBQUMsWUFBWSxDQUFDLFFBQWlDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBZ0IsQ0FBQztJQUM1RixDQUFDO0lBRUQsdUNBQWUsR0FBZjtRQUNJLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQztJQUM3QixDQUFDO0lBRUQsK0JBQU8sR0FBUDtRQUNJLElBQUksSUFBSSxDQUFDLFlBQVksRUFDckI7WUFDSSxJQUFJLENBQUMsWUFBWSxDQUFDLE9BQU8sRUFBRSxDQUFDO1lBQzVCLElBQUksQ0FBQyxZQUFZLEdBQUcsU0FBUyxDQUFDO1NBQ2pDO0lBQ0wsQ0FBQztJQUNMLG9CQUFDO0FBQUQsQ0FBQyxBQXpERCxJQXlEQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFZpZXdDb250YWluZXJSZWYsIENvbXBvbmVudEZhY3RvcnlSZXNvbHZlciwgQ29tcG9uZW50UmVmLCBFbWJlZGRlZFZpZXdSZWYgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiXHJcbmltcG9ydCB7IEZvcm1Db250cm9sQ29uZmlnIH0gZnJvbSAnLi4vLi4vc2VydmljZXMvZm9ybS1jb250cm9sLWNvbmZpZydcclxuaW1wb3J0IHsgRHluYW1pY0Zvcm1CdWlsZENvbmZpZyB9IGZyb20gXCIuLi8uLi9tb2RlbHMvaW50ZXJmYWNlL2R5bmFtaWMtZm9ybS1idWlsZC1jb25maWdcIlxyXG5leHBvcnQgaW50ZXJmYWNlIENvbXBvbmVudFR5cGU8VD4ge1xyXG4gICAgbmV3ICguLi5hcmdzOiBhbnlbXSk6IFQ7XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBDb21wb25lbnRWaWV3PFQ+IHtcclxuICAgIHByaXZhdGUgY29tcG9uZW50OiBDb21wb25lbnRUeXBlPFQ+O1xyXG4gICAgcHJpdmF0ZSB2aWV3Q29udGFpbmVyUmVmOiBWaWV3Q29udGFpbmVyUmVmO1xyXG4gICAgcHJpdmF0ZSBjb21wb25lbnRGYWN0b3J5UmVzb2x2ZXI6IENvbXBvbmVudEZhY3RvcnlSZXNvbHZlcjtcclxuICAgIHByaXZhdGUgY29tcG9uZW50UmVmOiBDb21wb25lbnRSZWY8VD47XHJcblxyXG4gICAgY29uc3RydWN0b3IoX2NvbXBvbmVudDogQ29tcG9uZW50VHlwZTxUPiwgX3ZpZXdDb250YWluZXJSZWY6IFZpZXdDb250YWluZXJSZWYsIF9jb21wb25lbnRGYWN0b3J5UmVzb2x2ZXI6IENvbXBvbmVudEZhY3RvcnlSZXNvbHZlcixwcml2YXRlIGZvcm1Db250cm9sQ29uZmlnOkZvcm1Db250cm9sQ29uZmlnLHByaXZhdGUgZHluYW1pY0Zvcm1CdWlsZENvbmZpZzpEeW5hbWljRm9ybUJ1aWxkQ29uZmlnKSB7XHJcbiAgICAgICAgdGhpcy5jb21wb25lbnQgPSBfY29tcG9uZW50O1xyXG4gICAgICAgIHRoaXMudmlld0NvbnRhaW5lclJlZiA9IF92aWV3Q29udGFpbmVyUmVmO1xyXG4gICAgICAgIHRoaXMuY29tcG9uZW50RmFjdG9yeVJlc29sdmVyID0gX2NvbXBvbmVudEZhY3RvcnlSZXNvbHZlcjtcclxuICAgIH1cclxuXHJcbiAgICBjcmVhdGUoKTogdm9pZCB7XHJcbiAgICAgICAgbGV0IGNvbXBvbmVudEZhY3RvcnkgPSB0aGlzLmNvbXBvbmVudEZhY3RvcnlSZXNvbHZlci5yZXNvbHZlQ29tcG9uZW50RmFjdG9yeSh0aGlzLmNvbXBvbmVudCk7XHJcbiAgICAgICAgdGhpcy5jb21wb25lbnRSZWYgPSB0aGlzLnZpZXdDb250YWluZXJSZWYuY3JlYXRlQ29tcG9uZW50KGNvbXBvbmVudEZhY3RvcnksIHRoaXMudmlld0NvbnRhaW5lclJlZi5sZW5ndGgsIHRoaXMudmlld0NvbnRhaW5lclJlZi5wYXJlbnRJbmplY3Rvcik7XHJcbiAgICAgICAgdGhpcy5zZXRQYXJhbXModGhpcy5jb21wb25lbnRSZWYuaW5zdGFuY2UpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgc2V0UGFyYW1zKGluc3RhbmNlOiB7IFtrZXk6IHN0cmluZ106IGFueSB9KSB7XHJcbiAgICAgICAgaWYgKHRoaXMuZm9ybUNvbnRyb2xDb25maWcuaW5wdXRzKSB7XHJcbiAgICAgICAgICAgIGxldCBwcm9wTmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0aGlzLmZvcm1Db250cm9sQ29uZmlnLmlucHV0cyk7XHJcbiAgICAgICAgICAgIGZvciAobGV0IHByb3BOYW1lIG9mIHByb3BOYW1lcykgXHJcbiAgICAgICAgICAgICAgICB0aGlzLm92ZXJyaWRlUHJvcEFuZFNldFZhbHVlKGluc3RhbmNlLCBwcm9wTmFtZSwgdGhpcy5mb3JtQ29udHJvbENvbmZpZy5pbnB1dHMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpbnN0YW5jZVtcImNvbnRyb2xDb25maWdcIl0gPSB0aGlzLmZvcm1Db250cm9sQ29uZmlnO1xyXG4gICAgICAgIGluc3RhbmNlW1wiZHluYW1pY0Zvcm1CdWlsZENvbmZpZ1wiXSA9IHRoaXMuZHluYW1pY0Zvcm1CdWlsZENvbmZpZztcclxuICAgIH1cclxuXHJcbiAgICBvdmVycmlkZVByb3BBbmRTZXRWYWx1ZShpbnN0YW5jZTogYW55LCBwcm9wTmFtZTogc3RyaW5nLCBpbnB1dHM6IGFueSkge1xyXG4gICAgICAgIGxldCBkZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihPYmplY3QuZ2V0UHJvdG90eXBlT2YoaW5wdXRzKSwgcHJvcE5hbWUpXHJcbiAgICAgICAgbGV0IHZhbHVlID0gJyc7XHJcbiAgICAgICAgaWYgKCFkZXNjcmlwdG9yKSB7XHJcbiAgICAgICAgICAgIHZhbHVlID0gaW5wdXRzW3Byb3BOYW1lXTtcclxuICAgICAgICAgICAgZGVsZXRlIGlucHV0c1twcm9wTmFtZV07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShpbnB1dHMsIHByb3BOYW1lLCB7XHJcbiAgICAgICAgICAgIGdldCgpIHsgcmV0dXJuIChkZXNjcmlwdG9yKSA/IGRlc2NyaXB0b3IuZ2V0KCkgOiB2YWx1ZSB9LFxyXG4gICAgICAgICAgICBzZXQodikgeyBpbnN0YW5jZVtwcm9wTmFtZV0gPSB2OyAoZGVzY3JpcHRvcikgPyBkZXNjcmlwdG9yLnNldC5jYWxsKGlucHV0cywgdikgOiB2YWx1ZSA9IHY7IH1cclxuICAgICAgICB9KVxyXG4gICAgICAgIGluc3RhbmNlW3Byb3BOYW1lXSA9IGRlc2NyaXB0b3IgPyBkZXNjcmlwdG9yLmdldC5jYWxsKGlucHV0cykgOiB2YWx1ZTtcclxuICAgIH1cclxuXHJcbiAgICByb290Tm9kZSgpOiBIVE1MRWxlbWVudCB7XHJcbiAgICAgICAgcmV0dXJuICh0aGlzLmNvbXBvbmVudFJlZi5ob3N0VmlldyBhcyBFbWJlZGRlZFZpZXdSZWY8YW55Pikucm9vdE5vZGVzWzBdIGFzIEhUTUxFbGVtZW50O1xyXG4gICAgfVxyXG5cclxuICAgIGdldENvbXBvbmVudFJlZigpOiBDb21wb25lbnRSZWY8YW55PiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY29tcG9uZW50UmVmO1xyXG4gICAgfVxyXG5cclxuICAgIGRlc3Ryb3koKTp2b2lkIHtcclxuICAgICAgICBpZiAodGhpcy5jb21wb25lbnRSZWYpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0aGlzLmNvbXBvbmVudFJlZi5kZXN0cm95KCk7XHJcbiAgICAgICAgICAgIHRoaXMuY29tcG9uZW50UmVmID0gdW5kZWZpbmVkO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSJdfQ==