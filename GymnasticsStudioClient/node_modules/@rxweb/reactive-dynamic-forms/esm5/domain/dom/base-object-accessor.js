import { COLON, BLANK, STRING, SQUARE } from '../../const/app.const';
import { objectPropValue } from '../../functions/object-prop-value.function';
var PROPS = ":props.";
var GLOBAL_MATCH = "g";
var DOT = ".";
var BaseObjectAccessor = /** @class */ (function () {
    function BaseObjectAccessor(dynamicNodeConfig) {
        this.dynamicNodeConfig = dynamicNodeConfig;
        this.subscribeProps = {
            names: [], props: {}
        };
        this.controlConfig = this.dynamicNodeConfig.controlConfig;
    }
    BaseObjectAccessor.prototype.getPropName = function (text) {
        if (text[0] == COLON || (text[0] == SQUARE)) {
            return text.replace(new RegExp(COLON, GLOBAL_MATCH), BLANK).replace(new RegExp(SQUARE, GLOBAL_MATCH), BLANK);
        }
        return text;
    };
    BaseObjectAccessor.prototype.getValue = function (text) {
        if (typeof text == STRING && ((text[0] == COLON) || (text[0] == SQUARE))) {
            text = text.replace(new RegExp(COLON, GLOBAL_MATCH), BLANK).replace(new RegExp(SQUARE, GLOBAL_MATCH), BLANK);
            return objectPropValue(text, this.controlConfig);
        }
        return text;
    };
    BaseObjectAccessor.prototype.setPropSubscription = function (propName, type, attributeName, valuePropName, parentPropName) {
        if (valuePropName === void 0) { valuePropName = ''; }
        if (parentPropName === void 0) { parentPropName = ''; }
        if (propName.startsWith(PROPS))
            this.defineProp(propName);
        var prop = this.getPropName(propName);
        if (!this.subscribeProps.props[prop])
            this.subscribeProps.props[prop] = {};
        if (!this.subscribeProps.props[prop][type])
            this.subscribeProps.props[prop][type] = {};
        if (parentPropName) {
            this.subscribeProps.props[prop][type][parentPropName] = {};
            this.subscribeProps.props[prop][type][parentPropName][attributeName] = (valuePropName) ? valuePropName : propName;
        }
        else
            this.subscribeProps.props[prop][type][attributeName] = (valuePropName) ? valuePropName : propName;
        if (this.subscribeProps.names.indexOf(prop) == -1)
            this.subscribeProps.names.push(prop);
    };
    BaseObjectAccessor.prototype.isSubscribeProp = function (propName) {
        return (typeof propName == STRING && (propName[0] == COLON));
    };
    BaseObjectAccessor.prototype.defineProp = function (propName) {
        var splitText = propName.split(DOT);
        if (splitText.length > 1) {
            var descriptor = Object.getOwnPropertyDescriptor(Object.getPrototypeOf(this.controlConfig.props), splitText[1]);
            if (!descriptor)
                this.controlConfig.defineProp(splitText[1]);
        }
    };
    return BaseObjectAccessor;
}());
export { BaseObjectAccessor };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZS1vYmplY3QtYWNjZXNzb3IuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Acnh3ZWIvcmVhY3RpdmUtZHluYW1pYy1mb3Jtcy8iLCJzb3VyY2VzIjpbImRvbWFpbi9kb20vYmFzZS1vYmplY3QtYWNjZXNzb3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBQyxNQUFNLHVCQUF1QixDQUFDO0FBRXBFLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSw0Q0FBNEMsQ0FBQTtBQUc1RSxJQUFNLEtBQUssR0FBVyxTQUFTLENBQUM7QUFDaEMsSUFBTSxZQUFZLEdBQVcsR0FBRyxDQUFDO0FBQ2pDLElBQU0sR0FBRyxHQUFXLEdBQUcsQ0FBQztBQUV4QjtJQU1JLDRCQUFtQixpQkFBb0M7UUFBcEMsc0JBQWlCLEdBQWpCLGlCQUFpQixDQUFtQjtRQUp2RCxtQkFBYyxHQUEyQjtZQUNyQyxLQUFLLEVBQUUsRUFBRSxFQUFFLEtBQUssRUFBRSxFQUFFO1NBQ3ZCLENBQUM7UUFFeUQsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUMsaUJBQWlCLENBQUMsYUFBYSxDQUFDO0lBQUMsQ0FBQztJQUV2SCx3Q0FBVyxHQUFYLFVBQVksSUFBWTtRQUNwQixJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxLQUFLLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksTUFBTSxDQUFDLEVBQUU7WUFDekMsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksTUFBTSxDQUFDLEtBQUssRUFBRSxZQUFZLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxNQUFNLENBQUMsTUFBTSxFQUFFLFlBQVksQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDO1NBQ2hIO1FBQ0QsT0FBTyxJQUFJLENBQUM7SUFDaEIsQ0FBQztJQUdELHFDQUFRLEdBQVIsVUFBUyxJ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YUFBYSxDQUFDLEtBQUssQ0FBQyxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2hILElBQUksQ0FBQyxVQUFVO2dCQUNYLElBQUksQ0FBQyxhQUFhLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ25EO0lBQ0wsQ0FBQztJQUNMLHlCQUFDO0FBQUQsQ0FBQyxBQXpERCxJQXlEQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENPTE9OLCBCTEFOSywgU1RSSU5HLCBTUVVBUkV9IGZyb20gJy4uLy4uL2NvbnN0L2FwcC5jb25zdCc7XHJcbmltcG9ydCB7IER5bmFtaWNOb2RlQ29uZmlnIH0gZnJvbSAnLi4vLi4vbW9kZWxzL2ludGVyZmFjZS9keW5hbWljLW5vZGUtY29uZmlnJ1xyXG5pbXBvcnQgeyBvYmplY3RQcm9wVmFsdWUgfSBmcm9tICcuLi8uLi9mdW5jdGlvbnMvb2JqZWN0LXByb3AtdmFsdWUuZnVuY3Rpb24nXHJcbmltcG9ydCB7IEZvcm1Db250cm9sQ29uZmlnIH0gZnJvbSBcIi4uLy4uL3NlcnZpY2VzL2Zvcm0tY29udHJvbC1jb25maWdcIlxyXG5cclxuY29uc3QgUFJPUFM6IHN0cmluZyA9IFwiOnByb3BzLlwiO1xyXG5jb25zdCBHTE9CQUxfTUFUQ0g6IHN0cmluZyA9IFwiZ1wiO1xyXG5jb25zdCBET1Q6IHN0cmluZyA9IFwiLlwiO1xyXG5cclxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEJhc2VPYmplY3RBY2Nlc3NvciB7XHJcbiAgICBjb250cm9sQ29uZmlnOiBGb3JtQ29udHJvbENvbmZpZztcclxuICAgIHN1YnNjcmliZVByb3BzOiB7IFtrZXk6IHN0cmluZ106IGFueSB9ID0ge1xyXG4gICAgICAgIG5hbWVzOiBbXSwgcHJvcHM6IHt9XHJcbiAgICB9O1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyBkeW5hbWljTm9kZUNvbmZpZzogRHluYW1pY05vZGVDb25maWcpIHsgdGhpcy5jb250cm9sQ29uZmlnID0gdGhpcy5keW5hbWljTm9kZUNvbmZpZy5jb250cm9sQ29uZmlnOyB9XHJcblxyXG4gICAgZ2V0UHJvcE5hbWUodGV4dDogc3RyaW5nKSB7XHJcbiAgICAgICAgaWYgKHRleHRbMF0gPT0gQ09MT04gfHwgKHRleHRbMF0gPT0gU1FVQVJFKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGV4dC5yZXBsYWNlKG5ldyBSZWdFeHAoQ09MT04sIEdMT0JBTF9NQVRDSCksIEJMQU5LKS5yZXBsYWNlKG5ldyBSZWdFeHAoU1FVQVJFLCBHTE9CQUxfTUFUQ0gpLCBCTEFOSyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0ZXh0O1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICBnZXRWYWx1ZSh0ZXh0OiBzdHJpbmcpIHtcclxuICAgICAgICBpZiAodHlwZW9mIHRleHQgPT0gU1RSSU5HICYmICgodGV4dFswXSA9PSBDT0xPTikgfHwgKHRleHRbMF0gPT0gU1FVQVJFKSkpIHtcclxuICAgICAgICAgICAgdGV4dCA9IHRleHQucmVwbGFjZShuZXcgUmVnRXhwKENPTE9OLCBHTE9CQUxfTUFUQ0gpLCBCTEFOSykucmVwbGFjZShuZXcgUmVnRXhwKFNRVUFSRSwgR0xPQkFMX01BVENIKSwgQkxBTkspO1xyXG4gICAgICAgICAgICByZXR1cm4gb2JqZWN0UHJvcFZhbHVlKHRleHQsIHRoaXMuY29udHJvbENvbmZpZyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0ZXh0O1xyXG4gICAgfVxyXG5cclxuICAgIHNldFByb3BTdWJzY3JpcHRpb24ocHJvcE5hbWU6IHN0cmluZywgdHlwZTogc3RyaW5nLCBhdHRyaWJ1dGVOYW1lOiBzdHJpbmcsIHZhbHVlUHJvcE5hbWU6IHN0cmluZyA9ICcnLCBwYXJlbnRQcm9wTmFtZTogc3RyaW5nID0gJycpIHtcclxuICAgICAgICBpZiAocHJvcE5hbWUuc3RhcnRzV2l0aChQUk9QUykpIFxyXG4gICAgICAgICAgICB0aGlzLmRlZmluZVByb3AocHJvcE5hbWUpO1xyXG5cclxuICAgICAgICBsZXQgcHJvcCA9IHRoaXMuZ2V0UHJvcE5hbWUocHJvcE5hbWUpO1xyXG5cclxuICAgICAgICBpZiAoIXRoaXMuc3Vic2NyaWJlUHJvcHMucHJvcHNbcHJvcF0pXHJcbiAgICAgICAgICAgIHRoaXMuc3Vic2NyaWJlUHJvcHMucHJvcHNbcHJvcF0gPSB7fTtcclxuICAgICAgICBpZiAoIXRoaXMuc3Vic2NyaWJlUHJvcHMucHJvcHNbcHJvcF1bdHlwZV0pXHJcbiAgICAgICAgICAgIHRoaXMuc3Vic2NyaWJlUHJvcHMucHJvcHNbcHJvcF1bdHlwZV0gPSB7fTsgXHJcbiAgICAgICAgaWYgKHBhcmVudFByb3BOYW1lKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc3Vic2NyaWJlUHJvcHMucHJvcHNbcHJvcF1bdHlwZV1bcGFyZW50UHJvcE5hbWVdID0ge307XHJcbiAgICAgICAgICAgIHRoaXMuc3Vic2NyaWJlUHJvcHMucHJvcHNbcHJvcF1bdHlwZV1bcGFyZW50UHJvcE5hbWVdW2F0dHJpYnV0ZU5hbWVdID0gKHZhbHVlUHJvcE5hbWUpID8gdmFsdWVQcm9wTmFtZSA6IHByb3BOYW1lO1xyXG4gICAgICAgIH0gZWxzZVxyXG4gICAgICAgICAgICB0aGlzLnN1YnNjcmliZVByb3BzLnByb3BzW3Byb3BdW3R5cGVdW2F0dHJpYnV0ZU5hbWVdID0gKHZhbHVlUHJvcE5hbWUpID8gdmFsdWVQcm9wTmFtZSA6IHByb3BOYW1lO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5zdWJzY3JpYmVQcm9wcy5uYW1lcy5pbmRleE9mKHByb3ApID09IC0xKVxyXG4gICAgICAgICAgICB0aGlzLnN1YnNjcmliZVByb3BzLm5hbWVzLnB1c2gocHJvcCk7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIGlzU3Vic2NyaWJlUHJvcChwcm9wTmFtZTpzdHJpbmcpIHtcclxuICAgICAgICByZXR1cm4gKHR5cGVvZiBwcm9wTmFtZSA9PSBTVFJJTkcgJiYgKHByb3BOYW1lWzBdID09IENPTE9OKSk7XHJcbiAgICB9XHJcblxyXG4gICAgZGVmaW5lUHJvcChwcm9wTmFtZTogc3RyaW5nKSB7XHJcbiAgICAgICAgbGV0IHNwbGl0VGV4dCA9IHByb3BOYW1lLnNwbGl0KERPVCk7XHJcbiAgICAgICAgaWYgKHNwbGl0VGV4dC5sZW5ndGggPiAxKSB7XHJcbiAgICAgICAgICAgIGxldCBkZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihPYmplY3QuZ2V0UHJvdG90eXBlT2YodGhpcy5jb250cm9sQ29uZmlnLnByb3BzKSwgc3BsaXRUZXh0WzFdKTtcclxuICAgICAgICAgICAgaWYgKCFkZXNjcmlwdG9yKVxyXG4gICAgICAgICAgICAgICAgdGhpcy5jb250cm9sQ29uZmlnLmRlZmluZVByb3Aoc3BsaXRUZXh0WzFdKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iXX0=