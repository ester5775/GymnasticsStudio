import * as tslib_1 from "tslib";
import { ElementEventProcessor } from './element-event-processor';
import { ADDITIONAL_CLASS, BOOLEAN, NONE, BLANK, DISPLAY, FUNCTION, STRING, ATTR, PROP, CLASS, STYLE } from '../../const/app.const';
var ElementPropsAccessor = /** @class */ (function (_super) {
    tslib_1.__extends(ElementPropsAccessor, _super);
    function ElementPropsAccessor(dynamicNodeConfig) {
        var _this = _super.call(this, dynamicNodeConfig) || this;
        _this.oldAdditionalClasses = [];
        _this.oldClasses = [];
        return _this;
    }
    ElementPropsAccessor.prototype.bindAttribute = function (attr, isSubscribe) {
        var _this = this;
        Object.keys(attr).forEach(function (attributeName) {
            var value = (attributeName !== STYLE) ? _this.getValue(attr[attributeName]) : attr[attributeName];
            switch (attributeName) {
                case ADDITIONAL_CLASS:
                case CLASS:
                    _this.setClass(value, attributeName);
                    break;
                case STYLE:
                    Object.keys(attr[attributeName]).forEach(function (x) {
                        var value = _this.getValue(attr[attributeName][x]);
                        _this.setStyleProp(x, value);
                        if (isSubscribe && _this.isSubscribeProp(attr[attributeName][x]))
                            _this.setPropSubscription(attr[attributeName][x], ATTR, x, '', STYLE);
                    });
                    break;
                default:
                    _this.addOrRemoveAttribute(attributeName, value, attr[attributeName] === "");
                    break;
            }
            if (isSubscribe && attributeName !== STYLE && _this.isSubscribeProp(attr[attributeName]))
                _this.setPropSubscription(attr[attributeName], ATTR, attributeName);
        });
    };
    ElementPropsAccessor.prototype.bindProp = function (prop, isSubscribe) {
        var _this = this;
        Object.keys(prop).forEach(function (propName) {
            var value = _this.getValue(prop[propName]);
            _this.setProperty(propName, (value !== undefined && value !== null && value !== false) ? value : "");
            if (isSubscribe && _this.isSubscribeProp(prop[propName]))
                _this.setPropSubscription(prop[propName], PROP, propName);
        });
    };
    ElementPropsAccessor.prototype.setClass = function (classes, type) {
        classes = this.getClassNames(type == ADDITIONAL_CLASS ? this.dynamicNodeConfig.additionalClasses.class : classes);
        type == ADDITIONAL_CLASS ? this.addOrRemoveClasses(this.oldAdditionalClasses, false) : this.addOrRemoveClasses(this.oldClasses, false);
        this.addOrRemoveClasses(classes);
        switch (type) {
            case ADDITIONAL_CLASS:
                this.oldAdditionalClasses = classes;
                break;
            case CLASS:
                this.oldClasses = classes;
                break;
        }
    };
    ElementPropsAccessor.prototype.setStyleProp = function (propName, value) {
        switch (propName) {
            case DISPLAY:
                value = (typeof value == BOOLEAN || value === undefined) ? value : !(value);
                value = (value) ? NONE : BLANK;
                break;
        }
        this.addOrRemoveStyle(propName, value);
    };
    ElementPropsAccessor.prototype.setProperty = function (propertyName, value) {
        this.dynamicNodeConfig.renderer.setProperty(this.element, propertyName, value);
    };
    ElementPropsAccessor.prototype.addOrRemoveClasses = function (classes, isAdd) {
        var _this = this;
        if (isAdd === void 0) { isAdd = true; }
        if (isAdd)
            classes.forEach(function (t) { return _this.dynamicNodeConfig.renderer.addClass(_this.element, t); });
        else
            classes.forEach(function (t) { return _this.dynamicNodeConfig.renderer.removeClass(_this.element, t); });
    };
    ElementPropsAccessor.prototype.addOrRemoveStyle = function (styleName, value) {
        if (value)
            this.dynamicNodeConfig.renderer.setStyle(this.element, styleName, value);
        else
            this.dynamicNodeConfig.renderer.removeStyle(this.element, styleName);
    };
    ElementPropsAccessor.prototype.addOrRemoveAttribute = function (attributeName, value, isBlank) {
        if (value || isBlank)
            this.dynamicNodeConfig.renderer.setAttribute(this.element, attributeName, value);
        else
            this.dynamicNodeConfig.renderer.removeAttribute(this.element, attributeName);
    };
    ElementPropsAccessor.prototype.getClassNames = function (classes) {
        var _this = this;
        var elementClasses = [];
        if (classes)
            classes.forEach(function (t) {
                if (typeof t == STRING)
                    elementClasses.push(t);
                else if (typeof t == FUNCTION) {
                    var elementClass = t.call(_this.controlConfig);
                    if (elementClass && !Array.isArray(elementClass))
                        elementClasses.push(elementClass);
                    else if (Array.isArray(elementClass))
                        elementClass.forEach(function (x) { return elementClasses.push(x); });
                }
            });
        return elementClasses;
    };
    return ElementPropsAccessor;
}(ElementEventProcessor));
export { ElementPropsAccessor };
//# sourceMappingURL=data:application/json;base64,