import * as tslib_1 from "tslib";
import { BaseObjectAccessor } from './base-object-accessor';
import { CHECKBOX, SELECT_MULTIPLE, RADIO, FILE } from '../../const/app.const';
import { ControlState } from '../../statics/control-state';
import { dynamicContainer } from "../../core/dynamicContainer";
import { ComponentView } from "../component-viewer/component-view";
var ElementAccessor = /** @class */ (function (_super) {
    tslib_1.__extends(ElementAccessor, _super);
    function ElementAccessor(dynamicNodeConfig) {
        var _this = _super.call(this, dynamicNodeConfig) || this;
        _this.checkedCheckbox = function (value, element) { return (value) ? (_this.controlConfig.config.multiselect) ? value.filter(function (t) { return element.value == t; })[0] != undefined : element.value == value : false; };
        _this.checkedRadio = function (value, element) { return (value) ? value == element.value : false; };
        return _this;
    }
    ElementAccessor.prototype.createNodeElement = function (parentElement, name) {
        this.element = name.startsWith("#") ? this.createComponentView(this.dynamicNodeConfig.controlConfig) : this.dynamicNodeConfig.renderer.createElement(name);
        this.dynamicNodeConfig.renderer.appendChild(parentElement, this.element);
    };
    ElementAccessor.prototype.createComponentView = function (controlConfig) {
        var container = dynamicContainer.getComponent(controlConfig.config.type.replace("#", ""));
        if (container) {
            this.componentView = new ComponentView(container.instance, this.dynamicNodeConfig.viewContainerRef, this.dynamicNodeConfig.componentFactoryResolver, controlConfig, this.dynamicNodeConfig.dynamicFormBuildConfig);
            this.componentView.create();
            return this.componentView.rootNode();
        }
    };
    ElementAccessor.prototype.removeChildren = function (element) {
        if (element.firstElementChild) {
            this.removeChildren(element.firstElementChild);
        }
        var controlId = element.getAttribute("data-rxwebid");
        if (controlId && ControlState.controls[controlId]) {
            ControlState.controls[controlId].destroy();
            delete ControlState.controls[controlId];
        }
    };
    ElementAccessor.prototype.setControlConfigValue = function (targetElement) {
        var e_1, _a;
        var value = targetElement.value === "" ? null : targetElement.value;
        switch (targetElement.type) {
            case FILE:
                this.controlConfig.formControl.setValue(targetElement.files);
                this.controlConfig.value = targetElement.files;
                break;
            case CHECKBOX:
                this.setCheckboxValue(targetElement);
                break;
            case SELECT_MULTIPLE:
                var values = [];
                try {
                    for (var _b = tslib_1.__values(this.element.options), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var option = _c.value;
                        if (option.selected && option.value)
                            values.push(option.value);
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
                this.controlConfig.value = values;
                break;
            default:
                this.controlConfig.formControl.setValue(value);
                this.controlConfig.value = value;
                break;
        }
    };
    ElementAccessor.prototype.resetElementValue = function (value) {
        var e_2, _a;
        switch (this.element.type) {
            case CHECKBOX:
            case RADIO:
                var elements = document.querySelectorAll("[name='" + this.controlConfig.config.name + "']");
                for (var i = 0; i < elements.length; i++) {
                    elements[i].checked = this.element.type == CHECKBOX ? this.checkedCheckbox(value, elements[i]) : this.checkedRadio(value, elements[i]);
                }
                break;
            case SELECT_MULTIPLE:
                var _loop_1 = function (option) {
                    option.selected = (value) ? value.filter(function (t) { return t == option.value; })[0] != undefined : false;
                };
                try {
                    for (var _b = tslib_1.__values(this.element.options), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var option = _c.value;
                        _loop_1(option);
                    }
                }
                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                    }
                    finally { if (e_2) throw e_2.error; }
                }
                break;
            default:
                this.element.value = value;
        }
    };
    ElementAccessor.prototype.setCheckboxValue = function (targetElement) {
        var value = (this.controlConfig.config.multiselect) ? this.controlConfig.value || [] : targetElement.value;
        if (targetElement.checked)
            (this.controlConfig.config.multiselect) ? value.push(targetElement.value) : null;
        else
            (this.controlConfig.config.multiselect) ? value.splice(value.indexOf(targetElement.value), 1) : value = null;
        this.controlConfig.formControl.setValue(value);
        this.controlConfig.value = value;
    };
    return ElementAccessor;
}(BaseObjectAccessor));
export { ElementAccessor };
//# sourceMappingURL=data:application/json;base64,