import * as tslib_1 from "tslib";
import { ElementPropsAccessor } from './element-props-accessor';
var VALUE = "value";
var OverrideObjectProp = /** @class */ (function (_super) {
    tslib_1.__extends(OverrideObjectProp, _super);
    function OverrideObjectProp(dynamicNodeConfig) {
        return _super.call(this, dynamicNodeConfig) || this;
    }
    OverrideObjectProp.prototype.overrideValueProp = function () {
        var _this = this;
        var descriptor = Object.getOwnPropertyDescriptor(Object.getPrototypeOf(this.controlConfig), VALUE);
        var value = this.controlConfig.value;
        var oldValue = null;
        Object.defineProperty(this.controlConfig, VALUE, {
            get: function () { return descriptor ? descriptor.get.call(_this.controlConfig) : value; },
            set: function (v) {
                value = v;
                if (_this.controlConfig.formControl.value != v) {
                    _this.controlConfig.formControl.setValue(v);
                    _this.resetElementValue(v);
                    _this.controlConfig.value = v;
                }
                else {
                    _this.controlConfig.notifyValueChanged(VALUE, v, oldValue);
                    if (descriptor)
                        descriptor.set.call(_this.controlConfig, v);
                    _this.controlConfig.refresh();
                }
                _this.controlConfig.config.value = v;
                oldValue = v;
            }
        });
        this.overrideFormControlProp();
        if (this.controlConfig.formControl.value)
            setTimeout(function () { _this.resetElementValue(_this.controlConfig.formControl.value); }, 50);
    };
    OverrideObjectProp.prototype.overrideFormControlProp = function () {
        var _this = this;
        var value = this.controlConfig.formControl.value;
        Object.defineProperty(this.controlConfig.formControl, VALUE, {
            get: function () { return value; },
            set: function (v) {
                value = v;
                var t = setTimeout(function () {
                    if (value != _this.controlConfig.value) {
                        _this.controlConfig.value = value;
                        _this.resetElementValue(value);
                    }
                }, 50);
            }
        });
    };
    return OverrideObjectProp;
}(ElementPropsAccessor));
export { OverrideObjectProp };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3ZlcnJpZGUtb2JqZWN0LXByb3AuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Acnh3ZWIvcmVhY3RpdmUtZHluYW1pYy1mb3Jtcy8iLCJzb3VyY2VzIjpbImRvbWFpbi9kb20vb3ZlcnJpZGUtb2JqZWN0LXByb3AudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBR2hFLElBQU0sS0FBSyxHQUFXLE9BQU8sQ0FBQztBQUM5QjtJQUFpRCw4Q0FBb0I7SUFJakUsNEJBQVksaUJBQW9DO2VBQUksa0JBQU0saUJBQWlCLENBQUM7SUFBRSxDQUFDO0lBRS9FLDhDQUFpQixHQUFqQjtRQUFBLGlCQXlCQztRQXhCRyxJQUFJLFVBQVUsR0FBRyxNQUFNLENBQUMsd0JBQXdCLENBQUMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDbkcsSUFBSSxLQUFLLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUM7UUFDckMsSUFBSSxRQUFRLEdBQUcsSUFBSSxDQUFDO1FBQ3BCLE1BQU0sQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFBRSxLQUFLLEVBQUU7WUFDN0MsR0FBRyxFQUFFLGNBQVEsT0FBTyxVQUFVLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFBLENBQUMsQ0FBQztZQUNsRixHQUFHLEVBQUUsVUFBQyxDQUFDO2dCQUNILEtBQUssR0FBRyxDQUFDLENBQUM7Z0JBQ1YsSUFBSSxLQUFJLENBQUMsYUFBYSxDQUFDLFdBQVcsQ0FBQyxLQUFLLElBQUksQ0FBQyxFQUFFO29CQUMzQyxLQUFJLENBQUMsYUFBYSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7b0JBQzNDLEtBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLENBQUMsQ0FBQTtvQkFDekIsS0FBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFBO2lCQUMvQjtxQkFBTTtvQkFDSCxLQUFJLENBQUMsYUFBYSxDQUFDLGtCQUFrQixDQUFDLEtBQUssRUFBRSxDQUFDLEVBQUUsUUFBUSxDQUFDLENBQUM7b0JBQzFELElBQUksVUFBVTt3QkFDVixVQUFVLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxLQUFJLENBQUMsYUFBYSxFQUFFLENBQUMsQ0FBQyxDQUFDO29CQUMvQyxLQUFJLENBQUMsYUFBYSxDQUFDLE9BQU8sRUFBRSxDQUFDO2lCQUNoQztnQkFDRCxLQUFJLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDO2dCQUNwQyxRQUFRLEdBQUcsQ0FBQyxDQUFDO1lBQ2pCLENBQUM7U0FDSixDQUFDLENBQUE7UUFDRixJQUFJLENBQUMsdUJBQXVCLEVBQUUsQ0FBQztRQUMvQixJQUFJLElBQUksQ0FBQyxhQUFhLENBQUMsV0FBVyxDQUFDLEtBQUs7WUFDcEMsVUFBVSxDQUFDLGNBQVEsS0FBSSxDQUFDLGlCQUFpQixDQUFDLEtBQUksQ0FBQyxhQUFhLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFBO0lBQy9GLENBQUM7SUFFTyxvREFBdUIsR0FBL0I7UUFBQSxpQkFjQztRQWJHLElBQUksS0FBSyxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQztRQUNqRCxNQUFNLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsV0FBVyxFQUFFLEtBQUssRUFBRTtZQUN6RCxHQUFHLEVBQUUsY0FBUSxPQUFPLEtBQUssQ0FBQSxDQUFDLENBQUM7WUFDM0IsR0FBRyxFQUFFLFVBQUMsQ0FBQztnQkFDSCxLQUFLLEdBQUcsQ0FBQyxDQUFDO2dCQUNWLElBQUksQ0FBQyxHQUFHLFVBQVUsQ0FBQztvQkFDZixJQUFJLEtBQUssSUFBSSxLQUFJLENBQUMsYUFBYSxDQUFDLEtBQUssRUFBRTt3QkFDbkMsS0FBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO3dCQUNqQyxLQUFJLENBQUMsaUJBQWlCLENBQUMsS0FBSyxDQUFDLENBQUM7cUJBQ2pDO2dCQUNMLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQTtZQUNWLENBQUM7U0FDSixDQUFDLENBQUE7SUFDTixDQUFDO0lBQ0wseUJBQUM7QUFBRCxDQUFDLEFBaERELENBQWlELG9CQUFvQixHQWdEcEUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFbGVtZW50UHJvcHNBY2Nlc3NvciB9IGZyb20gJy4vZWxlbWVudC1wcm9wcy1hY2Nlc3Nvcic7XHJcbmltcG9ydCB7IER5bmFtaWNOb2RlQ29uZmlnIH0gZnJvbSBcIi4uLy4uL21vZGVscy9pbnRlcmZhY2UvZHluYW1pYy1ub2RlLWNvbmZpZ1wiO1xyXG5cclxuY29uc3QgVkFMVUU6IHN0cmluZyA9IFwidmFsdWVcIjtcclxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIE92ZXJyaWRlT2JqZWN0UHJvcCBleHRlbmRzIEVsZW1lbnRQcm9wc0FjY2Vzc29yIHtcclxuXHJcbiAgICBcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihkeW5hbWljTm9kZUNvbmZpZzogRHluYW1pY05vZGVDb25maWcpIHsgc3VwZXIoZHluYW1pY05vZGVDb25maWcpOyB9XHJcblxyXG4gICAgb3ZlcnJpZGVWYWx1ZVByb3AoKSB7XHJcbiAgICAgICAgbGV0IGRlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE9iamVjdC5nZXRQcm90b3R5cGVPZih0aGlzLmNvbnRyb2xDb25maWcpLCBWQUxVRSk7XHJcbiAgICAgICAgbGV0IHZhbHVlID0gdGhpcy5jb250cm9sQ29uZmlnLnZhbHVlO1xyXG4gICAgICAgIGxldCBvbGRWYWx1ZSA9IG51bGw7XHJcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMuY29udHJvbENvbmZpZywgVkFMVUUsIHtcclxuICAgICAgICAgICAgZ2V0OiAoKSA9PiB7IHJldHVybiBkZXNjcmlwdG9yID8gZGVzY3JpcHRvci5nZXQuY2FsbCh0aGlzLmNvbnRyb2xDb25maWcpIDogdmFsdWUgfSxcclxuICAgICAgICAgICAgc2V0OiAodikgPT4ge1xyXG4gICAgICAgICAgICAgICAgdmFsdWUgPSB2O1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuY29udHJvbENvbmZpZy5mb3JtQ29udHJvbC52YWx1ZSAhPSB2KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jb250cm9sQ29uZmlnLmZvcm1Db250cm9sLnNldFZhbHVlKHYpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVzZXRFbGVtZW50VmFsdWUodilcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbnRyb2xDb25maWcudmFsdWUgPSB2XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY29udHJvbENvbmZpZy5ub3RpZnlWYWx1ZUNoYW5nZWQoVkFMVUUsIHYsIG9sZFZhbHVlKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZGVzY3JpcHRvcilcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRvci5zZXQuY2FsbCh0aGlzLmNvbnRyb2xDb25maWcsIHYpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY29udHJvbENvbmZpZy5yZWZyZXNoKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRyb2xDb25maWcuY29uZmlnLnZhbHVlID0gdjtcclxuICAgICAgICAgICAgICAgIG9sZFZhbHVlID0gdjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pXHJcbiAgICAgICAgdGhpcy5vdmVycmlkZUZvcm1Db250cm9sUHJvcCgpO1xyXG4gICAgICAgIGlmICh0aGlzLmNvbnRyb2xDb25maWcuZm9ybUNvbnRyb2wudmFsdWUpXHJcbiAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4geyB0aGlzLnJlc2V0RWxlbWVudFZhbHVlKHRoaXMuY29udHJvbENvbmZpZy5mb3JtQ29udHJvbC52YWx1ZSk7IH0sIDUwKVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgb3ZlcnJpZGVGb3JtQ29udHJvbFByb3AoKSB7XHJcbiAgICAgICAgbGV0IHZhbHVlID0gdGhpcy5jb250cm9sQ29uZmlnLmZvcm1Db250cm9sLnZhbHVlO1xyXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLmNvbnRyb2xDb25maWcuZm9ybUNvbnRyb2wsIFZBTFVFLCB7XHJcbiAgICAgICAgICAgIGdldDogKCkgPT4geyByZXR1cm4gdmFsdWUgfSxcclxuICAgICAgICAgICAgc2V0OiAodikgPT4ge1xyXG4gICAgICAgICAgICAgICAgdmFsdWUgPSB2O1xyXG4gICAgICAgICAgICAgICAgdmFyIHQgPSBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUgIT0gdGhpcy5jb250cm9sQ29uZmlnLnZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29udHJvbENvbmZpZy52YWx1ZSA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlc2V0RWxlbWVudFZhbHVlKHZhbHVlKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9LCA1MClcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pXHJcbiAgICB9XHJcbn0iXX0=