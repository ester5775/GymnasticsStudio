import * as tslib_1 from "tslib";
import { SOURCE, SELECT, ADDITIONAL_CLASS, PROP, ATTR, EVENTS, INPUT, TEXTAREA, READONLY } from '../../const/app.const';
import { ControlState } from '../../statics/control-state';
import { OverrideObjectProp } from "./override-object-prop";
var DomManipulation = /** @class */ (function (_super) {
    tslib_1.__extends(DomManipulation, _super);
    function DomManipulation(parentNode, elementName, dynamicNodeConfig) {
        var _this = _super.call(this, dynamicNodeConfig) || this;
        _this.isComponentView = false;
        _this.subscribers = [];
        _this.elementIndex = 0;
        _this.eventListeners = [];
        _this.actionListeners = {};
        _this.elementClasses = [];
        _this.nodeName = elementName;
        _super.prototype.createNodeElement.call(_this, parentNode, elementName);
        _this.bindAdditionalClasses();
        _this.controlId = ControlState.controlId = ControlState.controlId + 1;
        ControlState.controls[_this.controlId] = _this;
        _this.addOrRemoveAttribute("data-rxwebid", _this.controlId, false);
        return _this;
    }
    DomManipulation.prototype.parseObject = function (jObject, isSubscribe) {
        this.domConfig = jObject;
        this.process(jObject, isSubscribe);
        this.overrideProp(isSubscribe);
        this.subscribeValueChange();
    };
    DomManipulation.prototype.subscribeValueChange = function () {
        var _this = this;
        if (Object.keys(this.subscribeProps).length > 0)
            this.controlConfig.onPropValueChanged(this.controlId, this.subscribeProps, function (x, y) {
                _this.process(x, false);
            });
    };
    DomManipulation.prototype.process = function (jObject, isSubscribe) {
        var _this = this;
        Object.keys(jObject).forEach(function (propName) {
            switch (propName) {
                case PROP:
                    _this.bindProp(jObject[propName], isSubscribe);
                    break;
                case ATTR:
                    _this.bindAttribute(jObject[propName], isSubscribe);
                    break;
                case EVENTS:
                    _this.bindEvents(jObject[propName], isSubscribe);
                    break;
                case SOURCE:
                    if (!isSubscribe) {
                        while (_this.element.firstElementChild)
                            _this.removeChildren(_this.element.firstElementChild);
                        _this.dynamicNodeConfig.controlConfigProcessor.createChildrens(_this.dynamicNodeConfig.collections, _this, _this.controlConfig, _this.dynamicNodeConfig.additionalClasses, false);
                    }
                    else
                        _this.setPropSubscription(SOURCE, SOURCE, SOURCE);
                    break;
            }
        });
    };
    DomManipulation.prototype.overrideProp = function (isSubscribe) {
        switch (this.nodeName) {
            case INPUT:
            case SELECT:
            case TEXTAREA:
                if (this.domConfig.overrideProp == undefined || this.domConfig.overrideProp)
                    this.overrideValueProp();
                this.setPropSubscription(READONLY, ATTR, ADDITIONAL_CLASS, ADDITIONAL_CLASS);
                if (this.controlConfig && this.controlConfig.config && this.controlConfig.config.additionalConfig)
                    this.process(this.controlConfig.config.additionalConfig, isSubscribe);
                break;
        }
    };
    DomManipulation.prototype.bindAdditionalClasses = function () {
        var _this = this;
        var additionalClasses = this.dynamicNodeConfig.additionalClasses;
        if (additionalClasses && additionalClasses.class) {
            this.setClass(additionalClasses.class, ADDITIONAL_CLASS);
            if (additionalClasses.listenerProps)
                additionalClasses.listenerProps.forEach(function (t) { return _this.setPropSubscription(t, ATTR, ADDITIONAL_CLASS, ADDITIONAL_CLASS); });
        }
    };
    DomManipulation.prototype.destroy = function () {
        var eventCount = this.eventListeners.length;
        for (var i = 0; i < eventCount; i++) {
            this.eventListeners[0]();
            this.eventListeners.splice(0, 1);
        }
        this.eventListeners = [];
        this.element.onClick = null;
        if (this.componentView)
            this.componentView.destroy();
        else
            this.element.parentElement.removeChild(this.element);
        this.controlConfig.destroy(this.controlId);
    };
    return DomManipulation;
}(OverrideObjectProp));
export { DomManipulation };
//# sourceMappingURL=data:application/json;base64,