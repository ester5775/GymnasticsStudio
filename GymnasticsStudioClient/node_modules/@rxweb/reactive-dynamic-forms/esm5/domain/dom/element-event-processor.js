import * as tslib_1 from "tslib";
import { ElementAccessor } from './element-accessor';
import { CONDITIONAL_VALIDATOR, BLUR, FOCUS, SELECT, INPUT, CLICK, EVENTS } from '../../const/app.const';
var ElementEventProcessor = /** @class */ (function (_super) {
    tslib_1.__extends(ElementEventProcessor, _super);
    function ElementEventProcessor(dynamicNodeConfig) {
        var _this = _super.call(this, dynamicNodeConfig) || this;
        _this.dynamicNodeConfig = dynamicNodeConfig;
        return _this;
    }
    ElementEventProcessor.prototype.bindEvents = function (events, isSubscribe) {
        var _this = this;
        Object.keys(events).forEach(function (eventName) {
            switch (eventName) {
                case FOCUS:
                    _this.setFocus(_this.getValue(events[eventName]));
                    break;
                case SELECT:
                case INPUT:
                    _this.setInput();
                    break;
                case BLUR:
                    _this.setBlur();
                    break;
                case CLICK:
                    _this.setClick(_this.getValue(events[eventName]));
                    break;
            }
            if (isSubscribe && _this.isSubscribeProp(events[eventName]))
                _this.setPropSubscription(_this.getPropName(events[eventName]), EVENTS, eventName);
        });
    };
    ElementEventProcessor.prototype.setClick = function (functionName) {
        var _this = this;
        this.element.onclick = function () {
            if (_this.controlConfig[functionName])
                _this.controlConfig[functionName].call(_this.controlConfig);
        };
    };
    ElementEventProcessor.prototype.setFocus = function (value) {
        var _this = this;
        if (value && this.element.focus)
            setTimeout(function (t) { _this.element.focus(); }, 1000);
    };
    ElementEventProcessor.prototype.setBlur = function () {
        var _this = this;
        var listen = this.dynamicNodeConfig.renderer.listen(this.element, BLUR, function () {
            _this.dynamicNodeConfig.controlConfig.formControl.markAsTouched();
        });
        this.eventListeners.push(listen);
    };
    ElementEventProcessor.prototype.setInput = function () {
        var _this = this;
        var listen = this.dynamicNodeConfig.renderer.listen(this.element, INPUT, function (v) {
            var isPassed = true;
            if (_this.controlConfig.hooks && _this.controlConfig.hooks.preValue) {
                isPassed = _this.controlConfig.hooks.preValue.call(_this.controlConfig, v.target.value);
                if (!isPassed) {
                    _this.controlConfig.formControl.patchValue(_this.controlConfig.formControl.value);
                    _this.resetElementValue(_this.controlConfig.formControl.value);
                }
            }
            if (isPassed) {
                _this.setControlConfigValue(v.target);
                if (_this.controlConfig.hooks && _this.controlConfig.hooks.postValue)
                    _this.controlConfig.hooks.postValue.call(_this.controlConfig);
                _this.controlConfig.formControl.markAsDirty();
            }
            if (_this.conditionalValidator)
                _this.conditionalValidator(_this.controlConfig.formControl);
        });
        this.eventListeners.push(listen);
        setTimeout(function () {
            if (_this.controlConfig.formControl[CONDITIONAL_VALIDATOR]) {
                _this.conditionalValidator = _this.controlConfig.formControl[CONDITIONAL_VALIDATOR];
                delete _this.controlConfig.formControl[CONDITIONAL_VALIDATOR];
            }
        }, 50);
    };
    return ElementEventProcessor;
}(ElementAccessor));
export { ElementEventProcessor };
//# sourceMappingURL=data:application/json;base64,