var Linq = /** @class */ (function () {
    function Linq() {
    }
    Linq.extractArguments = function (splitTexts) {
        var expressionArguments = ["this"];
        if (splitTexts && splitTexts[0])
            splitTexts[0].split(",").forEach(function (t) { return expressionArguments.push(t.trim().replace("(", "").replace(")", "")); });
        return expressionArguments;
    };
    Linq.dynamicConfigParser = function (expressionString) {
        var controlNames = [];
        var expressionArguments = Linq.extractArguments(expressionString.match(/\(([^)]+)\)/g));
        var splitString = expressionString.replace(new RegExp(/\r?\n|\r|;/g), ' ').replace(/["%()\{}=\\?Â´`'#<>|,;:+-]+/g, " ").split(/ /g);
        if (expressionArguments.length > 3)
            expressionArguments.splice(expressionArguments.length - 1, 1);
        splitString.forEach(function (t, i) {
            if (t) {
                if (t.includes("controlsConfig.")) {
                    var splitText = t.split("controlsConfig.");
                    if (splitText.length > 1)
                        controlNames.push(splitText[1].split(".")[0]);
                }
                else if (t.includes("controlsConfig["))
                    controlNames.push(splitString[i + 1]);
            }
        });
        return controlNames;
    };
    return Linq;
}());
export { Linq };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlucS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0ByeHdlYi9yZWFjdGl2ZS1keW5hbWljLWZvcm1zLyIsInNvdXJjZXMiOlsidXRpbC9saW5xLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0lBQUE7SUEwQkEsQ0FBQztJQXpCYyxxQkFBZ0IsR0FBL0IsVUFBZ0MsVUFBb0I7UUFDNUMsSUFBSSxtQkFBbUIsR0FBYSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzdDLElBQUksVUFBVSxJQUFJLFVBQVUsQ0FBQyxDQUFDLENBQUM7WUFDM0IsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBQSxDQUFDLElBQUksT0FBQSxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsQ0FBQyxFQUFwRSxDQUFvRSxDQUFDLENBQUM7UUFDaEgsT0FBTyxtQkFBbUIsQ0FBQztJQUMvQixDQUFDO0lBRU0sd0JBQW1CLEdBQTFCLFVBQTJCLGdCQUF3QjtRQUMvQyxJQUFJLFlBQVksR0FBRyxFQUFFLENBQUM7UUFDdEIsSUFBSSxtQkFBbUIsR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsZ0JBQWdCLENBQUMsS0FBSyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUM7UUFDeEYsSUFBSSxXQUFXLEdBQWEsZ0JBQWdCLENBQUMsT0FBTyxDQUFDLElBQUksTUFBTSxDQUFDLGFBQWEsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyw2QkFBNkIsRUFBRSxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDN0ksSUFBSSxtQkFBbUIsQ0FBQyxNQUFNLEdBQUcsQ0FBQztZQUM5QixtQkFBbUIsQ0FBQyxNQUFNLENBQUMsbUJBQW1CLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQTtRQUNqRSxXQUFXLENBQUMsT0FBTyxDQUFDLFVBQUMsQ0FBQyxFQUFFLENBQUM7WUFDckIsSUFBSSxDQUFDLEVBQUU7Z0JBQ0gsSUFBSSxDQUFDLENBQUMsUUFBUSxDQUFDLGlCQUFpQixDQUFDLEVBQUU7b0JBQy9CLElBQUksU0FBUyxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUMsaUJBQWlCLENBQUMsQ0FBQztvQkFDM0MsSUFBSSxTQUFTLENBQUMsTUFBTSxHQUFHLENBQUM7d0JBQ3BCLFlBQVksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2lCQUNyRDtxQkFBTSxJQUFJLENBQUMsQ0FBQyxRQUFRLENBQUMsaUJBQWlCLENBQUM7b0JBQ3BDLFlBQVksQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsR0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2FBQzNDO1FBQ0wsQ0FBQyxDQUFDLENBQUE7UUFDRixPQUFPLFlBQVksQ0FBQztJQUN4QixDQUFDO0lBQ0wsV0FBQztBQUFELENBQUMsQUExQkQsSUEwQkMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY2xhc3MgTGlucXtcclxucHJpdmF0ZSBzdGF0aWMgZXh0cmFjdEFyZ3VtZW50cyhzcGxpdFRleHRzOiBzdHJpbmdbXSk6IHN0cmluZ1tdIHtcclxuICAgICAgICBsZXQgZXhwcmVzc2lvbkFyZ3VtZW50czogc3RyaW5nW10gPSBbXCJ0aGlzXCJdO1xyXG4gICAgICAgIGlmIChzcGxpdFRleHRzICYmIHNwbGl0VGV4dHNbMF0pXHJcbiAgICAgICAgICAgIHNwbGl0VGV4dHNbMF0uc3BsaXQoXCIsXCIpLmZvckVhY2godCA9PiBleHByZXNzaW9uQXJndW1lbnRzLnB1c2godC50cmltKCkucmVwbGFjZShcIihcIiwgXCJcIikucmVwbGFjZShcIilcIiwgXCJcIikpKTtcclxuICAgICAgICByZXR1cm4gZXhwcmVzc2lvbkFyZ3VtZW50cztcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgZHluYW1pY0NvbmZpZ1BhcnNlcihleHByZXNzaW9uU3RyaW5nOiBzdHJpbmcpOiBhbnlbXSB7XHJcbiAgICAgICAgbGV0IGNvbnRyb2xOYW1lcyA9IFtdO1xyXG4gICAgICAgIGxldCBleHByZXNzaW9uQXJndW1lbnRzID0gTGlucS5leHRyYWN0QXJndW1lbnRzKGV4cHJlc3Npb25TdHJpbmcubWF0Y2goL1xcKChbXildKylcXCkvZykpO1xyXG4gICAgICAgIGxldCBzcGxpdFN0cmluZzogc3RyaW5nW10gPSBleHByZXNzaW9uU3RyaW5nLnJlcGxhY2UobmV3IFJlZ0V4cCgvXFxyP1xcbnxcXHJ8Oy9nKSwgJyAnKS5yZXBsYWNlKC9bXCIlKClcXHt9PVxcXFw/wrRgJyM8PnwsOzorLV0rL2csIFwiIFwiKS5zcGxpdCgvIC9nKTtcclxuICAgICAgICBpZiAoZXhwcmVzc2lvbkFyZ3VtZW50cy5sZW5ndGggPiAzKVxyXG4gICAgICAgICAgICBleHByZXNzaW9uQXJndW1lbnRzLnNwbGljZShleHByZXNzaW9uQXJndW1lbnRzLmxlbmd0aCAtIDEsIDEpXHJcbiAgICAgICAgc3BsaXRTdHJpbmcuZm9yRWFjaCgodCwgaSkgPT4ge1xyXG4gICAgICAgICAgICBpZiAodCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHQuaW5jbHVkZXMoXCJjb250cm9sc0NvbmZpZy5cIikpIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgc3BsaXRUZXh0ID0gdC5zcGxpdChcImNvbnRyb2xzQ29uZmlnLlwiKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoc3BsaXRUZXh0Lmxlbmd0aCA+IDEpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xOYW1lcy5wdXNoKHNwbGl0VGV4dFsxXS5zcGxpdChcIi5cIilbMF0pO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0LmluY2x1ZGVzKFwiY29udHJvbHNDb25maWdbXCIpKSBcclxuICAgICAgICAgICAgICAgICAgICBjb250cm9sTmFtZXMucHVzaChzcGxpdFN0cmluZ1tpKzFdKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pXHJcbiAgICAgICAgcmV0dXJuIGNvbnRyb2xOYW1lcztcclxuICAgIH1cclxufVxyXG5cclxuIl19