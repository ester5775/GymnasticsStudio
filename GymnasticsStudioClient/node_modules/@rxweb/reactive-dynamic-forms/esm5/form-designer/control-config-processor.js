import * as tslib_1 from "tslib";
import { Input } from "@angular/core";
import { ControlConfig } from "../services/form-control-config";
import { DYNAMIC_ELEMENT_DESIGN_TREE } from '../const/dynamic-element-design-tree.const';
import { BOOTSTRAP_DESIGN_CONFIG } from '../const/bootstrap-design-config.const';
import { DomManipulation } from '../domain/dom/dom-manipulation';
import { ApplicationUtil } from '../util/application-util';
import { objectPropValue } from '../functions/object-prop-value.function';
import { INLINE, PREPEND_BOTH, PREPEND_LEFT, PREPEND_RIGHT, INPUT_TEXT, SQUARE_ERROR, SQUARE_SMALL, SQUARE_LABEL, SQUARE_CONTROL, ADVANCE, INPUT, TEXT, RANGE, FILE, STRING, CONTROL } from '../const/app.const';
var ControlConfigProcessor = /** @class */ (function () {
    function ControlConfigProcessor(element, renderer, componentFactoryResolver, viewContainerRef) {
        this.element = element;
        this.renderer = renderer;
        this.componentFactoryResolver = componentFactoryResolver;
        this.viewContainerRef = viewContainerRef;
        this.isBuild = false;
    }
    Object.defineProperty(ControlConfigProcessor.prototype, "viewMode", {
        get: function () {
            return this._viewMode;
        },
        set: function (value) {
            this._viewMode = value;
            if (this.isBuild)
                this.build();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ControlConfigProcessor.prototype, "currentViewMode", {
        get: function () {
            return DYNAMIC_ELEMENT_DESIGN_TREE.viewMode[this.viewMode];
        },
        enumerable: true,
        configurable: true
    });
    ControlConfigProcessor.prototype.getView = function (name, controlConfig) {
        if (this.viewMode == INLINE)
            name = this.getName(name, controlConfig, true);
        return DYNAMIC_ELEMENT_DESIGN_TREE[name];
    };
    Object.defineProperty(ControlConfigProcessor.prototype, "viewClassPath", {
        get: function () {
            return BOOTSTRAP_DESIGN_CONFIG.elementClassPath.viewMode[this.viewMode];
        },
        enumerable: true,
        configurable: true
    });
    ControlConfigProcessor.prototype.build = function () {
        var _this = this;
        this.uiBindings.forEach(function (controlConfigName) {
            _this.designForm(controlConfigName, _this.element, _this.currentViewMode[0], _this.currentViewMode[1], BOOTSTRAP_DESIGN_CONFIG.elementClassPath.viewMode[_this.viewMode]);
        });
    };
    ControlConfigProcessor.prototype.designForm = function (controlConfigName, element, viewRoot, viewChild, classPath, childrenControlConfig) {
        var _this = this;
        var controlConfig = childrenControlConfig || this.getControlConfig(controlConfigName);
        if (controlConfig) {
            if (this.viewMode != INLINE && controlConfig && !controlConfig.config.skipDefaultView)
                this.createElement(viewRoot, viewChild, element, controlConfig, classPath);
            else {
                var currentView = this.getView(controlConfig.config.type, controlConfig);
                if (currentView)
                    this.createElement(currentView[0], currentView[1], element, controlConfig, this.getClassPath(controlConfig.config.type, controlConfig, this._viewMode == INLINE));
                else
                    this.createDomManipulation(controlConfig.config.type, [], element, controlConfig, [], true);
            }
        }
        else if (this.viewMode == ADVANCE && Array.isArray(controlConfigName)) {
            var config = new ControlConfig({}, {});
            var domManipulation_1 = this.createElement(this.currentViewMode[0], [], element, config, BOOTSTRAP_DESIGN_CONFIG.elementClassPath.viewMode[this.viewMode]);
            controlConfigName.forEach(function (t) {
                _this.designForm(t, domManipulation_1.element, _this.currentViewMode[1][0], _this.currentViewMode[1][1], BOOTSTRAP_DESIGN_CONFIG.elementClassPath.viewMode[_this.viewMode].child["0"]);
            });
        }
    };
    ControlConfigProcessor.prototype.createElement = function (elementName, collections, parentElement, controlConfig, elementClassPath) {
        var _this = this;
        if (!elementName.startsWith("#")) {
            elementClassPath = elementClassPath ? elementClassPath : {};
            var domManipulation_2 = this.createDomManipulation(elementName, collections, parentElement, controlConfig, elementClassPath);
            this.createChildrens(collections, domManipulation_2, controlConfig, elementClassPath);
            if (controlConfig.config && controlConfig.config.childrens && controlConfig.config.childrens.length > 0) {
                controlConfig.config.childrens.forEach(function (t, i) {
                    var childrenControlConfig = undefined;
                    if (!(typeof t == STRING) && !Array.isArray(t))
                        childrenControlConfig = new ControlConfig(tslib_1.__assign({}, t, { skipDefaultView: true }), {});
                    _this.designForm(t, domManipulation_2.element, _this.currentViewMode[0], _this.currentViewMode[1], BOOTSTRAP_DESIGN_CONFIG.elementClassPath.viewMode[_this.viewMode], childrenControlConfig);
                });
            }
            return domManipulation_2;
        }
        else
            this.createDomManipulation(elementName, collections, parentElement, controlConfig, elementClassPath, true); //this.createComponentView(controlConfig, parentElement);
    };
    ControlConfigProcessor.prototype.createDomManipulation = function (elementName, collections, parentElement, controlConfig, elementClassPath, isComponentView) {
        if (isComponentView === void 0) { isComponentView = false; }
        var dynamicNodeConfig = {
            controlConfig: controlConfig, additionalClasses: elementClassPath, renderer: this.renderer, collections: collections, controlConfigProcessor: this,
            viewContainerRef: isComponentView ? this.viewContainerRef : undefined,
            componentFactoryResolver: isComponentView ? this.componentFactoryResolver : undefined,
            dynamicFormBuildConfig: this.dynamicFormBuildConfig
        };
        return new DomManipulation(parentElement, elementName, dynamicNodeConfig);
    };
    ControlConfigProcessor.prototype.createChildrens = function (collections, domManipulation, controlConfig, elementClassPath, isSubscribe) {
        var _this = this;
        if (isSubscribe === void 0) { isSubscribe = true; }
        var elementCount = 0;
        var childElementsClassConfig = elementClassPath.child ? elementClassPath.child : {};
        for (var i = 0; i < collections.length; i++) {
            var collection = collections[i];
            if (!ApplicationUtil.isObject(collection)) {
                if (this.isCreateElement(collections[i], controlConfig)) {
                    if (collection == SQUARE_CONTROL && controlConfig.config.type == undefined && controlConfig.config.childControlConfigs) {
                        controlConfig.config.childControlConfigs.forEach(function (x) {
                            var childControlConfig = _this.getControlConfig(x);
                            _this.createChildNodes(collections, childControlConfig, childElementsClassConfig, elementCount, i, domManipulation);
                        });
                    }
                    else {
                        if (collection == SQUARE_CONTROL && controlConfig.config.type.startsWith("#"))
                            this.createDomManipulation(controlConfig.config.type, [], domManipulation.element, controlConfig, [], true);
                        else {
                            var isIncrease = this.createChildNodes(collections, controlConfig, childElementsClassConfig, elementCount, i, domManipulation);
                            if (isIncrease)
                                i = i + 1;
                        }
                    }
                }
                elementCount++;
            }
            else {
                if (collection.for)
                    this.runForCollection(collection, domManipulation, controlConfig, elementClassPath);
                if (isSubscribe)
                    domManipulation.parseObject(collections[i], isSubscribe);
            }
        }
    };
    ControlConfigProcessor.prototype.createChildNodes = function (collections, controlConfig, childElementsClassConfig, elementCount, i, domManipulation) {
        var isNextCollection = false;
        var nextCollection = this.getCollection(collections[i], controlConfig);
        var childClasses = this.getAdditionalClasses(collections[i], childElementsClassConfig, elementCount, controlConfig);
        if (!nextCollection) {
            nextCollection = [collections[i], collections[i + 1]];
            isNextCollection = true;
        }
        this.createElement(nextCollection[0], nextCollection[1], domManipulation.element, controlConfig, childClasses);
        return isNextCollection;
    };
    ControlConfigProcessor.prototype.runForCollection = function (collection, domManipulation, controlConfig, elementClassPath) {
        var _this = this;
        Object.keys(collection.for).forEach(function (t) {
            var source = objectPropValue(t, controlConfig);
            source.forEach(function (x, index) {
                var item = collection.for[t].call(controlConfig, x, index);
                _this.createChildrens(item, domManipulation, controlConfig, elementClassPath);
            });
        });
    };
    ControlConfigProcessor.prototype.getAdditionalClasses = function (name, childClasses, index, controlConfig) {
        name = this.getName(name, controlConfig);
        var additionalClasses = BOOTSTRAP_DESIGN_CONFIG.elementClassPath[name];
        var childrenClasses = childClasses[index] ? childClasses[index] : {
            class: []
        };
        if (additionalClasses) {
            if (childrenClasses.class)
                additionalClasses = { class: additionalClasses.class.concat(childrenClasses.class), listenerProps: additionalClasses.listenerProps, child: additionalClasses.child };
            return additionalClasses;
        }
        return childrenClasses;
    };
    ControlConfigProcessor.prototype.getCollection = function (name, controlConfig) {
        if (name[0] == "[") {
            name = this.getName(name, controlConfig);
            return DYNAMIC_ELEMENT_DESIGN_TREE[name];
        }
        return undefined;
    };
    ControlConfigProcessor.prototype.getControlName = function (name) {
        var controlName = '';
        switch (name) {
            case "number":
            case "color":
            case "date":
            case "email":
            case "password":
            case "tel":
            case "time":
            case "url":
            case "color":
            case RANGE:
            case FILE:
            case TEXT:
                controlName = INPUT;
                break;
            default:
                controlName = name;
        }
        return controlName;
    };
    ControlConfigProcessor.prototype.getControlConfig = function (name) {
        return this.dynamicFormBuildConfig.controlsConfig[name];
    };
    ControlConfigProcessor.prototype.getName = function (name, controlConfig, isInline) {
        if (isInline === void 0) { isInline = false; }
        name = name.replace(new RegExp(/\[/g), '').replace(new RegExp(/\]/g), '');
        name = (name == CONTROL || isInline) ? this.getControlName(controlConfig.config.type) : name;
        switch (name) {
            case INPUT:
                name = this.prependControl(name, controlConfig);
                break;
            case INPUT_TEXT:
                name = INPUT;
                break;
        }
        return name;
    };
    ControlConfigProcessor.prototype.prependControl = function (name, controlConfig) {
        if (controlConfig.config.ui && controlConfig.config.ui.prependText && controlConfig.config.ui.prependText.right && controlConfig.config.ui.prependText.left)
            name = PREPEND_BOTH;
        else if (name == INPUT && controlConfig.config.ui && controlConfig.config.ui.prependText && controlConfig.config.ui.prependText.left)
            name = PREPEND_LEFT;
        else if (name == INPUT && controlConfig.config.ui && controlConfig.config.ui.prependText && controlConfig.config.ui.prependText.right)
            name = PREPEND_RIGHT;
        return name;
    };
    ControlConfigProcessor.prototype.isCreateElement = function (collection, controlConfig) {
        var isCreate = true;
        switch (collection) {
            case "[img]":
                isCreate = controlConfig.img != undefined;
            case SQUARE_LABEL:
                isCreate = controlConfig.label != undefined;
                break;
            case SQUARE_SMALL:
                isCreate = controlConfig.description != undefined;
                break;
            case SQUARE_ERROR:
                isCreate = controlConfig.formControl != undefined && (controlConfig.formControl.validator != undefined || controlConfig.formControl.asyncValidator != undefined);
                break;
        }
        return isCreate;
    };
    ControlConfigProcessor.prototype.getClassPath = function (name, controlConfig, isInline) {
        if (this.viewMode == INLINE)
            name = this.getName(name, controlConfig, isInline);
        return BOOTSTRAP_DESIGN_CONFIG.elementClassPath[name];
    };
    tslib_1.__decorate([
        Input('rxwebDynamicForm'),
        tslib_1.__metadata("design:type", Object)
    ], ControlConfigProcessor.prototype, "dynamicFormBuildConfig", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String),
        tslib_1.__metadata("design:paramtypes", [String])
    ], ControlConfigProcessor.prototype, "viewMode", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Array)
    ], ControlConfigProcessor.prototype, "uiBindings", void 0);
    return ControlConfigProcessor;
}());
export { ControlConfigProcessor };
//# sourceMappingURL=data:application/json;base64,