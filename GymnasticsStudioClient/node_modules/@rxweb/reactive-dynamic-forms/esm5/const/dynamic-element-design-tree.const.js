import * as tslib_1 from "tslib";
var commonAttributes = {
    placeholder: ':placeholder',
    readonly: ':readonly',
    class: ':class',
    name: '{config.name'
};
var commonEvents = {
    focus: ':focus',
    input: 'true',
    blur: 'blur'
};
var ɵ0 = function (item, index) {
    return ['div', ['input', [{
                    attr: tslib_1.__assign({ type: '{config.type' }, commonAttributes, { value: item[this.config.valuePropName || 'value'], checked: item[this.config.valuePropName || 'value'] == this.value, disabled: item.disabled ? item.disabled : ':disabled' }),
                    events: commonEvents,
                    overrideProp: (index == 0)
                }],
            'label', [{ prop: { innerText: item[this.config.textPropName || 'text'] } }]]];
};
var checkBoxAndRadioDesign = ['div', [{ source: true }, {
            for: {
                source: ɵ0
            }
        }
    ]];
var configUiText = { innerText: ':props.text' };
var classAttribute = { class: ':class', style: { display: ":hide" } };
var ɵ1 = function (item) {
    return ['label', [{
                attr: tslib_1.__assign({ type: '{config.type' }, commonAttributes, { value: item[this.config.valuePropName || 'value'] }),
                events: commonEvents
            }],
        'label', [{ prop: { innerText: item[this.config.textPropName || 'text'] } }]];
}, ɵ2 = function (item) {
    var _this = this;
    return ['option', [
            {
                prop: { innerText: item[this.config.textPropName || 'text'] }, attr: {
                    value: item[this.config.valuePropName || 'value'],
                    selected: Array.isArray(this.value) ? this.value.filter(function (x) { return item[_this.config.valuePropName || 'value'] == x; })[0] != undefined : item[this.config.valuePropName || 'value'] == this.value,
                    disabled: item.disabled
                }
            }
        ]];
};
export var DYNAMIC_ELEMENT_DESIGN_TREE = {
    p: ['p', [{ prop: configUiText, attr: classAttribute }]],
    h1: ['h1', [{ prop: configUiText, attr: classAttribute }]],
    h2: ['h2', [{ prop: configUiText, attr: classAttribute }]],
    h3: ['h3', [{ prop: configUiText, attr: classAttribute }]],
    h4: ['h4', [{ prop: configUiText, attr: classAttribute }]],
    h5: ['h5', [{ prop: configUiText, attr: classAttribute }]],
    h6: ['h6', [{ prop: configUiText, attr: classAttribute }]],
    a: ['a', [{ attr: tslib_1.__assign({ href: '{config.href' }, classAttribute), prop: configUiText }]],
    hr: ['hr', [{ attr: commonAttributes }]],
    strong: ['strong', [{ prop: configUiText, attr: classAttribute }]],
    span: ['span', [{ prop: configUiText, attr: classAttribute }]],
    img: ['img', [{ prop: { src: ':img' }, attr: tslib_1.__assign({ style: { display: ":img" } }, classAttribute) }]],
    label: ['label', [{ prop: { innerText: ':label' }, attr: tslib_1.__assign({ style: { display: ":label" } }, classAttribute) }]],
    small: ['small', [{ prop: { innerText: ':description' }, attr: tslib_1.__assign({ style: { display: ":description" } }, classAttribute) }]],
    input: ['input', [{
                attr: tslib_1.__assign({ type: '{config.type' }, commonAttributes, { disabled: ':disabled' }),
                events: commonEvents,
            }]],
    error: ["span", [{ prop: { innerText: ':errorMessage' }, attr: tslib_1.__assign({ style: { display: ":errorMessage" } }, commonAttributes) }]],
    div: ['div', [{ attr: classAttribute }]],
    card: ['div', [{ attr: classAttribute }]],
    'card-header': ['div', [{ attr: classAttribute, prop: configUiText }]],
    'card-body': ['div', [{ attr: classAttribute }]],
    buttonGroup: ['div', [{
                for: {
                    source: ɵ1
                }
            }
        ]
    ],
    'prepend-left': ["div", [
            "div", [
                "div", [{ prop: { innerText: '{config.ui.prependText.left' } }]
            ],
            '[input-text]'
        ]],
    'prepend-right': ["div", [
            '[input-text]',
            "div", [
                "div", [{ prop: { innerText: '{config.ui.prependText.right' } }]
            ],
        ]],
    'prepend-both': ["div", [
            "div", [
                "div", [{ prop: { innerText: '{config.ui.prependText.left' } }]
            ],
            '[input-text]',
            "div", [
                "div", [{ prop: { innerText: '{config.ui.prependText.right' } }]
            ],
        ]],
    textarea: ['textarea', [{ attr: tslib_1.__assign({ rows: '{config.ui.rows', cols: '{config.ui.cols' }, commonAttributes), events: commonEvents }]],
    radio: checkBoxAndRadioDesign,
    'checkbox': checkBoxAndRadioDesign,
    select: ['select', [{
                attr: {
                    multiple: '{config.multiselect',
                },
                events: commonEvents,
                source: true
            },
            'option', [{ prop: { innerText: ":placeholder" }, attr: { value: '', style: { display: ":placeholder" } } }],
            {
                for: {
                    source: ɵ2
                }
            }
        ]],
    button: ['button', [{ attr: tslib_1.__assign({}, commonAttributes, { name: '{config.name', type: '{config.type' }), events: { click: '{config.events.click' }, prop: { innerText: ':props.text' } }]],
    alert: ['div', [{ attr: commonAttributes }]],
    viewMode: {
        basic: ['div', [{
                    attr: {
                        style: { display: ":hide" }
                    }
                },
                '[label]',
                '[control]',
                '[error]',
                '[small]'
            ]],
        horizontal: ['div', [{
                    attr: {
                        style: { display: ":hide" }
                    }
                },
                '[label]',
                'div', ['[control]', '[error]', '[small]']
            ]],
        inline: [],
        advance: ['div', [
                'div', [{
                        attr: {
                            style: { display: ":hide" }
                        }
                    },
                    '[img]', '[label]', '[control]', '[error]', '[small]']
            ]]
    }
};
export { ɵ0, ɵ1, ɵ2 };
//# sourceMappingURL=data:application/json;base64,