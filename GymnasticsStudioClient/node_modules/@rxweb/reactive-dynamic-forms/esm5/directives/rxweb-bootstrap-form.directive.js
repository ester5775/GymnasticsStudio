import * as tslib_1 from "tslib";
import { Renderer2, ElementRef, Directive, ComponentFactoryResolver, ViewContainerRef } from '@angular/core';
import { ControlConfigProcessor } from '../form-designer/control-config-processor';
import { ControlState } from '../statics/control-state';
var RxDynamicFormDirective = /** @class */ (function (_super) {
    tslib_1.__extends(RxDynamicFormDirective, _super);
    function RxDynamicFormDirective(elementRef, renderer, componentFactoryResolver, viewContainerRef) {
        return _super.call(this, elementRef.nativeElement, renderer, componentFactoryResolver, viewContainerRef) || this;
    }
    RxDynamicFormDirective.prototype.ngOnInit = function () {
        this.build();
    };
    RxDynamicFormDirective.prototype.removeChildren = function (element) {
        while (element.firstElementChild)
            this.removeChildren(element.firstElementChild);
        var controlId = element.getAttribute("data-rxwebid");
        if (controlId && ControlState.controls[controlId]) {
            ControlState.controls[controlId].destroy();
            delete ControlState.controls[controlId];
        }
    };
    RxDynamicFormDirective.prototype.ngOnDestroy = function () {
        if (this.element)
            this.removeChildren(this.element);
    };
    RxDynamicFormDirective = tslib_1.__decorate([
        Directive({
            selector: '[rxwebDynamicForm]'
        }),
        tslib_1.__metadata("design:paramtypes", [ElementRef, Renderer2, ComponentFactoryResolver, ViewContainerRef])
    ], RxDynamicFormDirective);
    return RxDynamicFormDirective;
}(ControlConfigProcessor));
export { RxDynamicFormDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicnh3ZWItYm9vdHN0cmFwLWZvcm0uZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHJ4d2ViL3JlYWN0aXZlLWR5bmFtaWMtZm9ybXMvIiwic291cmNlcyI6WyJkaXJlY3RpdmVzL3J4d2ViLWJvb3RzdHJhcC1mb3JtLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQVUsU0FBUyxFQUFhLHdCQUF3QixFQUFFLGdCQUFnQixFQUFFLE1BQU0sZUFBZSxDQUFBO0FBQy9ILE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLDJDQUEyQyxDQUFDO0FBQ25GLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUt4RDtJQUE0QyxrREFBc0I7SUFHOUQsZ0NBQVksVUFBc0IsRUFBRSxRQUFtQixFQUFFLHdCQUFrRCxFQUFFLGdCQUFrQztlQUMzSSxrQkFBTSxVQUFVLENBQUMsYUFBcUIsRUFBRSxRQUFRLEVBQUUsd0JBQXdCLEVBQUUsZ0JBQWdCLENBQUM7SUFDakcsQ0FBQztJQUdELHlDQUFRLEdBQVI7UUFDSSxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDakIsQ0FBQztJQUVELCtDQUFjLEdBQWQsVUFBZSxPQUFZO1FBQ3ZCLE9BQU8sT0FBTyxDQUFDLGlCQUFpQjtZQUM1QixJQUFJLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO1FBRW5ELElBQUksU0FBUyxHQUFHLE9BQU8sQ0FBQyxZQUFZLENBQUMsY0FBYyxDQUFDLENBQUM7UUFDckQsSUFBSSxTQUFTLElBQUksWUFBWSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsRUFBRTtZQUMvQyxZQUFZLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDO1lBQzNDLE9BQU8sWUFBWSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsQ0FBQztTQUMzQztJQUNMLENBQUM7SUFFRCw0Q0FBVyxHQUFYO1FBQ0ksSUFBSSxJQUFJLENBQUMsT0FBTztZQUNaLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBRTFDLENBQUM7SUEzQlEsc0JBQXNCO1FBSGxDLFNBQVMsQ0FBQztZQUNQLFFBQVEsRUFBRSxvQkFBb0I7U0FDakMsQ0FBQztpREFJMEIsVUFBVSxFQUFZLFNBQVMsRUFBNEIsd0JBQXdCLEVBQW9CLGdCQUFnQjtPQUh0SSxzQkFBc0IsQ0E0QmxDO0lBQUQsNkJBQUM7Q0FBQSxBQTVCRCxDQUE0QyxzQkFBc0IsR0E0QmpFO1NBNUJZLHNCQUFzQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFJlbmRlcmVyMiwgRWxlbWVudFJlZiwgT25Jbml0LCBEaXJlY3RpdmUsIE9uRGVzdHJveSwgQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyLCBWaWV3Q29udGFpbmVyUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSdcclxuaW1wb3J0IHsgQ29udHJvbENvbmZpZ1Byb2Nlc3NvciB9IGZyb20gJy4uL2Zvcm0tZGVzaWduZXIvY29udHJvbC1jb25maWctcHJvY2Vzc29yJztcclxuaW1wb3J0IHsgQ29udHJvbFN0YXRlIH0gZnJvbSAnLi4vc3RhdGljcy9jb250cm9sLXN0YXRlJztcclxuXHJcbkBEaXJlY3RpdmUoe1xyXG4gICAgc2VsZWN0b3I6ICdbcnh3ZWJEeW5hbWljRm9ybV0nXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBSeER5bmFtaWNGb3JtRGlyZWN0aXZlIGV4dGVuZHMgQ29udHJvbENvbmZpZ1Byb2Nlc3NvciBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95IHtcclxuXHJcblxyXG4gICAgY29uc3RydWN0b3IoZWxlbWVudFJlZjogRWxlbWVudFJlZiwgcmVuZGVyZXI6IFJlbmRlcmVyMiwgY29tcG9uZW50RmFjdG9yeVJlc29sdmVyOiBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIsIHZpZXdDb250YWluZXJSZWY6IFZpZXdDb250YWluZXJSZWYpIHtcclxuICAgICAgICBzdXBlcihlbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQgYXMgTm9kZSwgcmVuZGVyZXIsIGNvbXBvbmVudEZhY3RvcnlSZXNvbHZlciwgdmlld0NvbnRhaW5lclJlZik7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIG5nT25Jbml0KCkge1xyXG4gICAgICAgIHRoaXMuYnVpbGQoKTtcclxuICAgIH1cclxuXHJcbiAgICByZW1vdmVDaGlsZHJlbihlbGVtZW50OiBhbnkpIHtcclxuICAgICAgICB3aGlsZSAoZWxlbWVudC5maXJzdEVsZW1lbnRDaGlsZClcclxuICAgICAgICAgICAgdGhpcy5yZW1vdmVDaGlsZHJlbihlbGVtZW50LmZpcnN0RWxlbWVudENoaWxkKTtcclxuXHJcbiAgICAgICAgbGV0IGNvbnRyb2xJZCA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKFwiZGF0YS1yeHdlYmlkXCIpO1xyXG4gICAgICAgIGlmIChjb250cm9sSWQgJiYgQ29udHJvbFN0YXRlLmNvbnRyb2xzW2NvbnRyb2xJZF0pIHtcclxuICAgICAgICAgICAgQ29udHJvbFN0YXRlLmNvbnRyb2xzW2NvbnRyb2xJZF0uZGVzdHJveSgpO1xyXG4gICAgICAgICAgICBkZWxldGUgQ29udHJvbFN0YXRlLmNvbnRyb2xzW2NvbnRyb2xJZF07XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIG5nT25EZXN0cm95KCkge1xyXG4gICAgICAgIGlmICh0aGlzLmVsZW1lbnQpXHJcbiAgICAgICAgICAgIHRoaXMucmVtb3ZlQ2hpbGRyZW4odGhpcy5lbGVtZW50KTtcclxuXHJcbiAgICB9XHJcbn0iXX0=